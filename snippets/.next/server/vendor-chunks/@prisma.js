/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@prisma";
exports.ids = ["vendor-chunks/@prisma"];
exports.modules = {

/***/ "(ssr)/./node_modules/@prisma/client/index.js":
/*!**********************************************!*\
  !*** ./node_modules/@prisma/client/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = {\n    ...__webpack_require__(/*! .prisma/client/index */ \"(ssr)/./node_modules/.prisma/client/index.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByaXNtYS9jbGllbnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUFBLE9BQU9DLE9BQU8sR0FBRztJQUNmLEdBQUdDLG1CQUFPQSxDQUFDLDJFQUF1QjtBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL3NuaXBwZXRzLy4vbm9kZV9tb2R1bGVzL0BwcmlzbWEvY2xpZW50L2luZGV4LmpzPzMxYjUiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSB7XG4gIC4uLnJlcXVpcmUoJy5wcmlzbWEvY2xpZW50L2luZGV4JyksXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@prisma/client/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@prisma/client/runtime/library.js":
/*!********************************************************!*\
  !*** ./node_modules/@prisma/client/runtime/library.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* module decorator */ module = __webpack_require__.nmd(module);\n\nvar Tu = Object.create;\nvar Qr = Object.defineProperty;\nvar _u = Object.getOwnPropertyDescriptor;\nvar Cu = Object.getOwnPropertyNames;\nvar Au = Object.getPrototypeOf, Ru = Object.prototype.hasOwnProperty;\nvar Q = (e1, t1)=>()=>(t1 || e1((t1 = {\n            exports: {}\n        }).exports, t1), t1.exports), _t = (e1, t1)=>{\n    for(var r1 in t1)Qr(e1, r1, {\n        get: t1[r1],\n        enumerable: !0\n    });\n}, Bo = (e1, t1, r1, n1)=>{\n    if (t1 && typeof t1 == \"object\" || typeof t1 == \"function\") for (let i1 of Cu(t1))!Ru.call(e1, i1) && i1 !== r1 && Qr(e1, i1, {\n        get: ()=>t1[i1],\n        enumerable: !(n1 = _u(t1, i1)) || n1.enumerable\n    });\n    return e1;\n};\nvar F = (e1, t1, r1)=>(r1 = e1 != null ? Tu(Au(e1)) : {}, Bo(t1 || !e1 || !e1.__esModule ? Qr(r1, \"default\", {\n        value: e1,\n        enumerable: !0\n    }) : r1, e1)), Mu = (e1)=>Bo(Qr({}, \"__esModule\", {\n        value: !0\n    }), e1);\nvar zo = Q((Hg1, Wo1)=>{\n    \"use strict\";\n    var Ct1 = 1e3, At1 = Ct1 * 60, Rt1 = At1 * 60, ct1 = Rt1 * 24, Su1 = ct1 * 7, Iu1 = ct1 * 365.25;\n    Wo1.exports = function(e1, t1) {\n        t1 = t1 || {};\n        var r1 = typeof e1;\n        if (r1 === \"string\" && e1.length > 0) return ku1(e1);\n        if (r1 === \"number\" && isFinite(e1)) return t1.long ? Ou1(e1) : Fu1(e1);\n        throw new Error(\"val is not a non-empty string or a valid number. val=\" + JSON.stringify(e1));\n    };\n    function ku1(e1) {\n        if (e1 = String(e1), !(e1.length > 100)) {\n            var t1 = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e1);\n            if (t1) {\n                var r1 = parseFloat(t1[1]), n1 = (t1[2] || \"ms\").toLowerCase();\n                switch(n1){\n                    case \"years\":\n                    case \"year\":\n                    case \"yrs\":\n                    case \"yr\":\n                    case \"y\":\n                        return r1 * Iu1;\n                    case \"weeks\":\n                    case \"week\":\n                    case \"w\":\n                        return r1 * Su1;\n                    case \"days\":\n                    case \"day\":\n                    case \"d\":\n                        return r1 * ct1;\n                    case \"hours\":\n                    case \"hour\":\n                    case \"hrs\":\n                    case \"hr\":\n                    case \"h\":\n                        return r1 * Rt1;\n                    case \"minutes\":\n                    case \"minute\":\n                    case \"mins\":\n                    case \"min\":\n                    case \"m\":\n                        return r1 * At1;\n                    case \"seconds\":\n                    case \"second\":\n                    case \"secs\":\n                    case \"sec\":\n                    case \"s\":\n                        return r1 * Ct1;\n                    case \"milliseconds\":\n                    case \"millisecond\":\n                    case \"msecs\":\n                    case \"msec\":\n                    case \"ms\":\n                        return r1;\n                    default:\n                        return;\n                }\n            }\n        }\n    }\n    function Fu1(e1) {\n        var t1 = Math.abs(e1);\n        return t1 >= ct1 ? Math.round(e1 / ct1) + \"d\" : t1 >= Rt1 ? Math.round(e1 / Rt1) + \"h\" : t1 >= At1 ? Math.round(e1 / At1) + \"m\" : t1 >= Ct1 ? Math.round(e1 / Ct1) + \"s\" : e1 + \"ms\";\n    }\n    function Ou1(e1) {\n        var t1 = Math.abs(e1);\n        return t1 >= ct1 ? Gr1(e1, t1, ct1, \"day\") : t1 >= Rt1 ? Gr1(e1, t1, Rt1, \"hour\") : t1 >= At1 ? Gr1(e1, t1, At1, \"minute\") : t1 >= Ct1 ? Gr1(e1, t1, Ct1, \"second\") : e1 + \" ms\";\n    }\n    function Gr1(e1, t1, r1, n1) {\n        var i1 = t1 >= r1 * 1.5;\n        return Math.round(e1 / r1) + \" \" + n1 + (i1 ? \"s\" : \"\");\n    }\n});\nvar di = Q((Wg1, Yo1)=>{\n    \"use strict\";\n    function Du1(e1) {\n        r1.debug = r1, r1.default = r1, r1.coerce = l1, r1.disable = o1, r1.enable = i1, r1.enabled = s1, r1.humanize = zo(), r1.destroy = u1, Object.keys(e1).forEach((c1)=>{\n            r1[c1] = e1[c1];\n        }), r1.names = [], r1.skips = [], r1.formatters = {};\n        function t1(c1) {\n            let p1 = 0;\n            for(let d1 = 0; d1 < c1.length; d1++)p1 = (p1 << 5) - p1 + c1.charCodeAt(d1), p1 |= 0;\n            return r1.colors[Math.abs(p1) % r1.colors.length];\n        }\n        r1.selectColor = t1;\n        function r1(c1) {\n            let p1, d1 = null, f1, y1;\n            function g1(..._1) {\n                if (!g1.enabled) return;\n                let A1 = g1, R1 = Number(new Date), E1 = R1 - (p1 || R1);\n                A1.diff = E1, A1.prev = p1, A1.curr = R1, p1 = R1, _1[0] = r1.coerce(_1[0]), typeof _1[0] != \"string\" && _1.unshift(\"%O\");\n                let S1 = 0;\n                _1[0] = _1[0].replace(/%([a-zA-Z%])/g, (X1, ut1)=>{\n                    if (X1 === \"%%\") return \"%\";\n                    S1++;\n                    let K1 = r1.formatters[ut1];\n                    if (typeof K1 == \"function\") {\n                        let ne1 = _1[S1];\n                        X1 = K1.call(A1, ne1), _1.splice(S1, 1), S1--;\n                    }\n                    return X1;\n                }), r1.formatArgs.call(A1, _1), (A1.log || r1.log).apply(A1, _1);\n            }\n            return g1.namespace = c1, g1.useColors = r1.useColors(), g1.color = r1.selectColor(c1), g1.extend = n1, g1.destroy = r1.destroy, Object.defineProperty(g1, \"enabled\", {\n                enumerable: !0,\n                configurable: !1,\n                get: ()=>d1 !== null ? d1 : (f1 !== r1.namespaces && (f1 = r1.namespaces, y1 = r1.enabled(c1)), y1),\n                set: (_1)=>{\n                    d1 = _1;\n                }\n            }), typeof r1.init == \"function\" && r1.init(g1), g1;\n        }\n        function n1(c1, p1) {\n            let d1 = r1(this.namespace + (typeof p1 > \"u\" ? \":\" : p1) + c1);\n            return d1.log = this.log, d1;\n        }\n        function i1(c1) {\n            r1.save(c1), r1.namespaces = c1, r1.names = [], r1.skips = [];\n            let p1, d1 = (typeof c1 == \"string\" ? c1 : \"\").split(/[\\s,]+/), f1 = d1.length;\n            for(p1 = 0; p1 < f1; p1++)d1[p1] && (c1 = d1[p1].replace(/\\*/g, \".*?\"), c1[0] === \"-\" ? r1.skips.push(new RegExp(\"^\" + c1.slice(1) + \"$\")) : r1.names.push(new RegExp(\"^\" + c1 + \"$\")));\n        }\n        function o1() {\n            let c1 = [\n                ...r1.names.map(a1),\n                ...r1.skips.map(a1).map((p1)=>\"-\" + p1)\n            ].join(\",\");\n            return r1.enable(\"\"), c1;\n        }\n        function s1(c1) {\n            if (c1[c1.length - 1] === \"*\") return !0;\n            let p1, d1;\n            for(p1 = 0, d1 = r1.skips.length; p1 < d1; p1++)if (r1.skips[p1].test(c1)) return !1;\n            for(p1 = 0, d1 = r1.names.length; p1 < d1; p1++)if (r1.names[p1].test(c1)) return !0;\n            return !1;\n        }\n        function a1(c1) {\n            return c1.toString().substring(2, c1.toString().length - 2).replace(/\\.\\*\\?$/, \"*\");\n        }\n        function l1(c1) {\n            return c1 instanceof Error ? c1.stack || c1.message : c1;\n        }\n        function u1() {\n            console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n        }\n        return r1.enable(r1.load()), r1;\n    }\n    Yo1.exports = Du1;\n});\nvar Zo = Q((he1, Hr1)=>{\n    \"use strict\";\n    he1.formatArgs = Lu1;\n    he1.save = $u1;\n    he1.load = qu1;\n    he1.useColors = Nu1;\n    he1.storage = Bu1();\n    he1.destroy = (()=>{\n        let e1 = !1;\n        return ()=>{\n            e1 || (e1 = !0, console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\"));\n        };\n    })();\n    he1.colors = [\n        \"#0000CC\",\n        \"#0000FF\",\n        \"#0033CC\",\n        \"#0033FF\",\n        \"#0066CC\",\n        \"#0066FF\",\n        \"#0099CC\",\n        \"#0099FF\",\n        \"#00CC00\",\n        \"#00CC33\",\n        \"#00CC66\",\n        \"#00CC99\",\n        \"#00CCCC\",\n        \"#00CCFF\",\n        \"#3300CC\",\n        \"#3300FF\",\n        \"#3333CC\",\n        \"#3333FF\",\n        \"#3366CC\",\n        \"#3366FF\",\n        \"#3399CC\",\n        \"#3399FF\",\n        \"#33CC00\",\n        \"#33CC33\",\n        \"#33CC66\",\n        \"#33CC99\",\n        \"#33CCCC\",\n        \"#33CCFF\",\n        \"#6600CC\",\n        \"#6600FF\",\n        \"#6633CC\",\n        \"#6633FF\",\n        \"#66CC00\",\n        \"#66CC33\",\n        \"#9900CC\",\n        \"#9900FF\",\n        \"#9933CC\",\n        \"#9933FF\",\n        \"#99CC00\",\n        \"#99CC33\",\n        \"#CC0000\",\n        \"#CC0033\",\n        \"#CC0066\",\n        \"#CC0099\",\n        \"#CC00CC\",\n        \"#CC00FF\",\n        \"#CC3300\",\n        \"#CC3333\",\n        \"#CC3366\",\n        \"#CC3399\",\n        \"#CC33CC\",\n        \"#CC33FF\",\n        \"#CC6600\",\n        \"#CC6633\",\n        \"#CC9900\",\n        \"#CC9933\",\n        \"#CCCC00\",\n        \"#CCCC33\",\n        \"#FF0000\",\n        \"#FF0033\",\n        \"#FF0066\",\n        \"#FF0099\",\n        \"#FF00CC\",\n        \"#FF00FF\",\n        \"#FF3300\",\n        \"#FF3333\",\n        \"#FF3366\",\n        \"#FF3399\",\n        \"#FF33CC\",\n        \"#FF33FF\",\n        \"#FF6600\",\n        \"#FF6633\",\n        \"#FF9900\",\n        \"#FF9933\",\n        \"#FFCC00\",\n        \"#FFCC33\"\n    ];\n    function Nu1() {\n        return  false ? 0 : typeof navigator < \"u\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/) ? !1 : typeof document < \"u\" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance ||  false && (0) || typeof navigator < \"u\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator < \"u\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n    }\n    function Lu1(e1) {\n        if (e1[0] = (this.useColors ? \"%c\" : \"\") + this.namespace + (this.useColors ? \" %c\" : \" \") + e1[0] + (this.useColors ? \"%c \" : \" \") + \"+\" + Hr1.exports.humanize(this.diff), !this.useColors) return;\n        let t1 = \"color: \" + this.color;\n        e1.splice(1, 0, t1, \"color: inherit\");\n        let r1 = 0, n1 = 0;\n        e1[0].replace(/%[a-zA-Z%]/g, (i1)=>{\n            i1 !== \"%%\" && (r1++, i1 === \"%c\" && (n1 = r1));\n        }), e1.splice(n1, 0, t1);\n    }\n    he1.log = console.debug || console.log || (()=>{});\n    function $u1(e1) {\n        try {\n            e1 ? he1.storage.setItem(\"debug\", e1) : he1.storage.removeItem(\"debug\");\n        } catch  {}\n    }\n    function qu1() {\n        let e1;\n        try {\n            e1 = he1.storage.getItem(\"debug\");\n        } catch  {}\n        return !e1 && typeof process < \"u\" && \"env\" in process && (e1 = process.env.DEBUG), e1;\n    }\n    function Bu1() {\n        try {\n            return localStorage;\n        } catch  {}\n    }\n    Hr1.exports = di()(he1);\n    var { formatters: ju1 } = Hr1.exports;\n    ju1.j = function(e1) {\n        try {\n            return JSON.stringify(e1);\n        } catch (t1) {\n            return \"[UnexpectedJSONParseError]: \" + t1.message;\n        }\n    };\n});\nvar mi = Q((zg1, Xo1)=>{\n    \"use strict\";\n    Xo1.exports = (e1, t1 = process.argv)=>{\n        let r1 = e1.startsWith(\"-\") ? \"\" : e1.length === 1 ? \"-\" : \"--\", n1 = t1.indexOf(r1 + e1), i1 = t1.indexOf(\"--\");\n        return n1 !== -1 && (i1 === -1 || n1 < i1);\n    };\n});\nvar yi = Q((Yg1, ts1)=>{\n    \"use strict\";\n    var Vu1 = __webpack_require__(/*! os */ \"os\"), es1 = __webpack_require__(/*! tty */ \"tty\"), Pe1 = mi(), { env: G1 } = process, Ge1;\n    Pe1(\"no-color\") || Pe1(\"no-colors\") || Pe1(\"color=false\") || Pe1(\"color=never\") ? Ge1 = 0 : (Pe1(\"color\") || Pe1(\"colors\") || Pe1(\"color=true\") || Pe1(\"color=always\")) && (Ge1 = 1);\n    \"FORCE_COLOR\" in G1 && (G1.FORCE_COLOR === \"true\" ? Ge1 = 1 : G1.FORCE_COLOR === \"false\" ? Ge1 = 0 : Ge1 = G1.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(G1.FORCE_COLOR, 10), 3));\n    function fi1(e1) {\n        return e1 === 0 ? !1 : {\n            level: e1,\n            hasBasic: !0,\n            has256: e1 >= 2,\n            has16m: e1 >= 3\n        };\n    }\n    function gi1(e1, t1) {\n        if (Ge1 === 0) return 0;\n        if (Pe1(\"color=16m\") || Pe1(\"color=full\") || Pe1(\"color=truecolor\")) return 3;\n        if (Pe1(\"color=256\")) return 2;\n        if (e1 && !t1 && Ge1 === void 0) return 0;\n        let r1 = Ge1 || 0;\n        if (G1.TERM === \"dumb\") return r1;\n        if (process.platform === \"win32\") {\n            let n1 = Vu1.release().split(\".\");\n            return Number(n1[0]) >= 10 && Number(n1[2]) >= 10586 ? Number(n1[2]) >= 14931 ? 3 : 2 : 1;\n        }\n        if (\"CI\" in G1) return [\n            \"TRAVIS\",\n            \"CIRCLECI\",\n            \"APPVEYOR\",\n            \"GITLAB_CI\",\n            \"GITHUB_ACTIONS\",\n            \"BUILDKITE\"\n        ].some((n1)=>n1 in G1) || G1.CI_NAME === \"codeship\" ? 1 : r1;\n        if (\"TEAMCITY_VERSION\" in G1) return /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(G1.TEAMCITY_VERSION) ? 1 : 0;\n        if (G1.COLORTERM === \"truecolor\") return 3;\n        if (\"TERM_PROGRAM\" in G1) {\n            let n1 = parseInt((G1.TERM_PROGRAM_VERSION || \"\").split(\".\")[0], 10);\n            switch(G1.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return n1 >= 3 ? 3 : 2;\n                case \"Apple_Terminal\":\n                    return 2;\n            }\n        }\n        return /-256(color)?$/i.test(G1.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(G1.TERM) || \"COLORTERM\" in G1 ? 1 : r1;\n    }\n    function Uu1(e1) {\n        let t1 = gi1(e1, e1 && e1.isTTY);\n        return fi1(t1);\n    }\n    ts1.exports = {\n        supportsColor: Uu1,\n        stdout: fi1(gi1(!0, es1.isatty(1))),\n        stderr: fi1(gi1(!0, es1.isatty(2)))\n    };\n});\nvar ns = Q((ee1, zr1)=>{\n    \"use strict\";\n    var Ku1 = __webpack_require__(/*! tty */ \"tty\"), Wr1 = __webpack_require__(/*! util */ \"util\");\n    ee1.init = Yu1;\n    ee1.log = Hu1;\n    ee1.formatArgs = Ju1;\n    ee1.save = Wu1;\n    ee1.load = zu1;\n    ee1.useColors = Qu1;\n    ee1.destroy = Wr1.deprecate(()=>{}, \"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n    ee1.colors = [\n        6,\n        2,\n        3,\n        4,\n        5,\n        1\n    ];\n    try {\n        let e1 = yi();\n        e1 && (e1.stderr || e1).level >= 2 && (ee1.colors = [\n            20,\n            21,\n            26,\n            27,\n            32,\n            33,\n            38,\n            39,\n            40,\n            41,\n            42,\n            43,\n            44,\n            45,\n            56,\n            57,\n            62,\n            63,\n            68,\n            69,\n            74,\n            75,\n            76,\n            77,\n            78,\n            79,\n            80,\n            81,\n            92,\n            93,\n            98,\n            99,\n            112,\n            113,\n            128,\n            129,\n            134,\n            135,\n            148,\n            149,\n            160,\n            161,\n            162,\n            163,\n            164,\n            165,\n            166,\n            167,\n            168,\n            169,\n            170,\n            171,\n            172,\n            173,\n            178,\n            179,\n            184,\n            185,\n            196,\n            197,\n            198,\n            199,\n            200,\n            201,\n            202,\n            203,\n            204,\n            205,\n            206,\n            207,\n            208,\n            209,\n            214,\n            215,\n            220,\n            221\n        ]);\n    } catch  {}\n    ee1.inspectOpts = Object.keys(process.env).filter((e1)=>/^debug_/i.test(e1)).reduce((e1, t1)=>{\n        let r1 = t1.substring(6).toLowerCase().replace(/_([a-z])/g, (i1, o1)=>o1.toUpperCase()), n1 = process.env[t1];\n        return /^(yes|on|true|enabled)$/i.test(n1) ? n1 = !0 : /^(no|off|false|disabled)$/i.test(n1) ? n1 = !1 : n1 === \"null\" ? n1 = null : n1 = Number(n1), e1[r1] = n1, e1;\n    }, {});\n    function Qu1() {\n        return \"colors\" in ee1.inspectOpts ? !!ee1.inspectOpts.colors : Ku1.isatty(process.stderr.fd);\n    }\n    function Ju1(e1) {\n        let { namespace: t1, useColors: r1 } = this;\n        if (r1) {\n            let n1 = this.color, i1 = \"\\x1b[3\" + (n1 < 8 ? n1 : \"8;5;\" + n1), o1 = `  ${i1};1m${t1} \\x1B[0m`;\n            e1[0] = o1 + e1[0].split(`\n`).join(`\n` + o1), e1.push(i1 + \"m+\" + zr1.exports.humanize(this.diff) + \"\\x1b[0m\");\n        } else e1[0] = Gu1() + t1 + \" \" + e1[0];\n    }\n    function Gu1() {\n        return ee1.inspectOpts.hideDate ? \"\" : new Date().toISOString() + \" \";\n    }\n    function Hu1(...e1) {\n        return process.stderr.write(Wr1.format(...e1) + `\n`);\n    }\n    function Wu1(e1) {\n        e1 ? process.env.DEBUG = e1 : delete process.env.DEBUG;\n    }\n    function zu1() {\n        return process.env.DEBUG;\n    }\n    function Yu1(e1) {\n        e1.inspectOpts = {};\n        let t1 = Object.keys(ee1.inspectOpts);\n        for(let r1 = 0; r1 < t1.length; r1++)e1.inspectOpts[t1[r1]] = ee1.inspectOpts[t1[r1]];\n    }\n    zr1.exports = di()(ee1);\n    var { formatters: rs1 } = zr1.exports;\n    rs1.o = function(e1) {\n        return this.inspectOpts.colors = this.useColors, Wr1.inspect(e1, this.inspectOpts).split(`\n`).map((t1)=>t1.trim()).join(\" \");\n    };\n    rs1.O = function(e1) {\n        return this.inspectOpts.colors = this.useColors, Wr1.inspect(e1, this.inspectOpts);\n    };\n});\nvar is = Q((Zg1, hi1)=>{\n    \"use strict\";\n    typeof process > \"u\" || process.type === \"renderer\" || false === !0 || process.__nwjs ? hi1.exports = Zo() : hi1.exports = ns();\n});\nvar fs = Q((Oy1, _i1)=>{\n    \"use strict\";\n    var M1 = _i1.exports;\n    _i1.exports.default = M1;\n    var D1 = \"\\x1b[\", er1 = \"\\x1b]\", It1 = \"\\x07\", nn1 = \";\", ms1 = process.env.TERM_PROGRAM === \"Apple_Terminal\";\n    M1.cursorTo = (e1, t1)=>{\n        if (typeof e1 != \"number\") throw new TypeError(\"The `x` argument is required\");\n        return typeof t1 != \"number\" ? D1 + (e1 + 1) + \"G\" : D1 + (t1 + 1) + \";\" + (e1 + 1) + \"H\";\n    };\n    M1.cursorMove = (e1, t1)=>{\n        if (typeof e1 != \"number\") throw new TypeError(\"The `x` argument is required\");\n        let r1 = \"\";\n        return e1 < 0 ? r1 += D1 + -e1 + \"D\" : e1 > 0 && (r1 += D1 + e1 + \"C\"), t1 < 0 ? r1 += D1 + -t1 + \"A\" : t1 > 0 && (r1 += D1 + t1 + \"B\"), r1;\n    };\n    M1.cursorUp = (e1 = 1)=>D1 + e1 + \"A\";\n    M1.cursorDown = (e1 = 1)=>D1 + e1 + \"B\";\n    M1.cursorForward = (e1 = 1)=>D1 + e1 + \"C\";\n    M1.cursorBackward = (e1 = 1)=>D1 + e1 + \"D\";\n    M1.cursorLeft = D1 + \"G\";\n    M1.cursorSavePosition = ms1 ? \"\\x1b7\" : D1 + \"s\";\n    M1.cursorRestorePosition = ms1 ? \"\\x1b8\" : D1 + \"u\";\n    M1.cursorGetPosition = D1 + \"6n\";\n    M1.cursorNextLine = D1 + \"E\";\n    M1.cursorPrevLine = D1 + \"F\";\n    M1.cursorHide = D1 + \"?25l\";\n    M1.cursorShow = D1 + \"?25h\";\n    M1.eraseLines = (e1)=>{\n        let t1 = \"\";\n        for(let r1 = 0; r1 < e1; r1++)t1 += M1.eraseLine + (r1 < e1 - 1 ? M1.cursorUp() : \"\");\n        return e1 && (t1 += M1.cursorLeft), t1;\n    };\n    M1.eraseEndLine = D1 + \"K\";\n    M1.eraseStartLine = D1 + \"1K\";\n    M1.eraseLine = D1 + \"2K\";\n    M1.eraseDown = D1 + \"J\";\n    M1.eraseUp = D1 + \"1J\";\n    M1.eraseScreen = D1 + \"2J\";\n    M1.scrollUp = D1 + \"S\";\n    M1.scrollDown = D1 + \"T\";\n    M1.clearScreen = \"\\x1bc\";\n    M1.clearTerminal = process.platform === \"win32\" ? `${M1.eraseScreen}${D1}0f` : `${M1.eraseScreen}${D1}3J${D1}H`;\n    M1.beep = It1;\n    M1.link = (e1, t1)=>[\n            er1,\n            \"8\",\n            nn1,\n            nn1,\n            t1,\n            It1,\n            e1,\n            er1,\n            \"8\",\n            nn1,\n            nn1,\n            It1\n        ].join(\"\");\n    M1.image = (e1, t1 = {})=>{\n        let r1 = `${er1}1337;File=inline=1`;\n        return t1.width && (r1 += `;width=${t1.width}`), t1.height && (r1 += `;height=${t1.height}`), t1.preserveAspectRatio === !1 && (r1 += \";preserveAspectRatio=0\"), r1 + \":\" + e1.toString(\"base64\") + It1;\n    };\n    M1.iTerm = {\n        setCwd: (e1 = process.cwd())=>`${er1}50;CurrentDir=${e1}${It1}`,\n        annotation: (e1, t1 = {})=>{\n            let r1 = `${er1}1337;`, n1 = typeof t1.x < \"u\", i1 = typeof t1.y < \"u\";\n            if ((n1 || i1) && !(n1 && i1 && typeof t1.length < \"u\")) throw new Error(\"`x`, `y` and `length` must be defined when `x` or `y` is defined\");\n            return e1 = e1.replace(/\\|/g, \"\"), r1 += t1.isHidden ? \"AddHiddenAnnotation=\" : \"AddAnnotation=\", t1.length > 0 ? r1 += (n1 ? [\n                e1,\n                t1.length,\n                t1.x,\n                t1.y\n            ] : [\n                t1.length,\n                e1\n            ]).join(\"|\") : r1 += e1, r1 + It1;\n        }\n    };\n});\nvar hs = Q((Dy1, ys1)=>{\n    \"use strict\";\n    var ic1 = yi(), kt1 = mi();\n    function gs1(e1) {\n        if (/^\\d{3,4}$/.test(e1)) {\n            let r1 = /(\\d{1,2})(\\d{2})/.exec(e1);\n            return {\n                major: 0,\n                minor: parseInt(r1[1], 10),\n                patch: parseInt(r1[2], 10)\n            };\n        }\n        let t1 = (e1 || \"\").split(\".\").map((r1)=>parseInt(r1, 10));\n        return {\n            major: t1[0],\n            minor: t1[1],\n            patch: t1[2]\n        };\n    }\n    function Ci1(e1) {\n        let { env: t1 } = process;\n        if (\"FORCE_HYPERLINK\" in t1) return !(t1.FORCE_HYPERLINK.length > 0 && parseInt(t1.FORCE_HYPERLINK, 10) === 0);\n        if (kt1(\"no-hyperlink\") || kt1(\"no-hyperlinks\") || kt1(\"hyperlink=false\") || kt1(\"hyperlink=never\")) return !1;\n        if (kt1(\"hyperlink=true\") || kt1(\"hyperlink=always\") || \"NETLIFY\" in t1) return !0;\n        if (!ic1.supportsColor(e1) || e1 && !e1.isTTY || process.platform === \"win32\" || \"CI\" in t1 || \"TEAMCITY_VERSION\" in t1) return !1;\n        if (\"TERM_PROGRAM\" in t1) {\n            let r1 = gs1(t1.TERM_PROGRAM_VERSION);\n            switch(t1.TERM_PROGRAM){\n                case \"iTerm.app\":\n                    return r1.major === 3 ? r1.minor >= 1 : r1.major > 3;\n                case \"WezTerm\":\n                    return r1.major >= 20200620;\n                case \"vscode\":\n                    return r1.major > 1 || r1.major === 1 && r1.minor >= 72;\n            }\n        }\n        if (\"VTE_VERSION\" in t1) {\n            if (t1.VTE_VERSION === \"0.50.0\") return !1;\n            let r1 = gs1(t1.VTE_VERSION);\n            return r1.major > 0 || r1.minor >= 50;\n        }\n        return !1;\n    }\n    ys1.exports = {\n        supportsHyperlink: Ci1,\n        stdout: Ci1(process.stdout),\n        stderr: Ci1(process.stderr)\n    };\n});\nvar xs = Q((Ny1, tr1)=>{\n    \"use strict\";\n    var oc1 = fs(), Ai1 = hs(), bs1 = (e1, t1, { target: r1 = \"stdout\", ...n1 } = {})=>Ai1[r1] ? oc1.link(e1, t1) : n1.fallback === !1 ? e1 : typeof n1.fallback == \"function\" ? n1.fallback(e1, t1) : `${e1} (\\u200B${t1}\\u200B)`;\n    tr1.exports = (e1, t1, r1 = {})=>bs1(e1, t1, r1);\n    tr1.exports.stderr = (e1, t1, r1 = {})=>bs1(e1, t1, {\n            target: \"stderr\",\n            ...r1\n        });\n    tr1.exports.isSupported = Ai1.stdout;\n    tr1.exports.stderr.isSupported = Ai1.stderr;\n});\nvar Ms = Q((Xy1, wc1)=>{\n    wc1.exports = {\n        name: \"dotenv\",\n        version: \"16.0.3\",\n        description: \"Loads environment variables from .env file\",\n        main: \"lib/main.js\",\n        types: \"lib/main.d.ts\",\n        exports: {\n            \".\": {\n                require: \"./lib/main.js\",\n                types: \"./lib/main.d.ts\",\n                default: \"./lib/main.js\"\n            },\n            \"./config\": \"./config.js\",\n            \"./config.js\": \"./config.js\",\n            \"./lib/env-options\": \"./lib/env-options.js\",\n            \"./lib/env-options.js\": \"./lib/env-options.js\",\n            \"./lib/cli-options\": \"./lib/cli-options.js\",\n            \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n            \"./package.json\": \"./package.json\"\n        },\n        scripts: {\n            \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n            lint: \"standard\",\n            \"lint-readme\": \"standard-markdown\",\n            pretest: \"npm run lint && npm run dts-check\",\n            test: \"tap tests/*.js --100 -Rspec\",\n            prerelease: \"npm test\",\n            release: \"standard-version\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"git://github.com/motdotla/dotenv.git\"\n        },\n        keywords: [\n            \"dotenv\",\n            \"env\",\n            \".env\",\n            \"environment\",\n            \"variables\",\n            \"config\",\n            \"settings\"\n        ],\n        readmeFilename: \"README.md\",\n        license: \"BSD-2-Clause\",\n        devDependencies: {\n            \"@types/node\": \"^17.0.9\",\n            decache: \"^4.6.1\",\n            dtslint: \"^3.7.0\",\n            sinon: \"^12.0.1\",\n            standard: \"^16.0.4\",\n            \"standard-markdown\": \"^7.1.0\",\n            \"standard-version\": \"^9.3.2\",\n            tap: \"^15.1.6\",\n            tar: \"^6.1.11\",\n            typescript: \"^4.5.4\"\n        },\n        engines: {\n            node: \">=12\"\n        }\n    };\n});\nvar Is = Q((eh1, un1)=>{\n    \"use strict\";\n    var Ec1 = __webpack_require__(/*! fs */ \"fs\"), Ss1 = __webpack_require__(/*! path */ \"path\"), Pc1 = __webpack_require__(/*! os */ \"os\"), vc1 = Ms(), Tc1 = vc1.version, _c1 = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg;\n    function Cc1(e1) {\n        let t1 = {}, r1 = e1.toString();\n        r1 = r1.replace(/\\r\\n?/mg, `\n`);\n        let n1;\n        for(; (n1 = _c1.exec(r1)) != null;){\n            let i1 = n1[1], o1 = n1[2] || \"\";\n            o1 = o1.trim();\n            let s1 = o1[0];\n            o1 = o1.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, \"$2\"), s1 === '\"' && (o1 = o1.replace(/\\\\n/g, `\n`), o1 = o1.replace(/\\\\r/g, \"\\r\")), t1[i1] = o1;\n        }\n        return t1;\n    }\n    function Si1(e1) {\n        console.log(`[dotenv@${Tc1}][DEBUG] ${e1}`);\n    }\n    function Ac1(e1) {\n        return e1[0] === \"~\" ? Ss1.join(Pc1.homedir(), e1.slice(1)) : e1;\n    }\n    function Rc1(e1) {\n        let t1 = Ss1.resolve(process.cwd(), \".env\"), r1 = \"utf8\", n1 = !!(e1 && e1.debug), i1 = !!(e1 && e1.override);\n        e1 && (e1.path != null && (t1 = Ac1(e1.path)), e1.encoding != null && (r1 = e1.encoding));\n        try {\n            let o1 = ln1.parse(Ec1.readFileSync(t1, {\n                encoding: r1\n            }));\n            return Object.keys(o1).forEach(function(s1) {\n                Object.prototype.hasOwnProperty.call(process.env, s1) ? (i1 === !0 && (process.env[s1] = o1[s1]), n1 && Si1(i1 === !0 ? `\"${s1}\" is already defined in \\`process.env\\` and WAS overwritten` : `\"${s1}\" is already defined in \\`process.env\\` and was NOT overwritten`)) : process.env[s1] = o1[s1];\n            }), {\n                parsed: o1\n            };\n        } catch (o1) {\n            return n1 && Si1(`Failed to load ${t1} ${o1.message}`), {\n                error: o1\n            };\n        }\n    }\n    var ln1 = {\n        config: Rc1,\n        parse: Cc1\n    };\n    un1.exports.config = ln1.config;\n    un1.exports.parse = ln1.parse;\n    un1.exports = ln1;\n});\nvar Ls = Q((ah1, Ns1)=>{\n    \"use strict\";\n    Ns1.exports = (e1)=>{\n        let t1 = e1.match(/^[ \\t]*(?=\\S)/gm);\n        return t1 ? t1.reduce((r1, n1)=>Math.min(r1, n1.length), 1 / 0) : 0;\n    };\n});\nvar qs = Q((lh1, $s1)=>{\n    \"use strict\";\n    var kc1 = Ls();\n    $s1.exports = (e1)=>{\n        let t1 = kc1(e1);\n        if (t1 === 0) return e1;\n        let r1 = new RegExp(`^[ \\\\t]{${t1}}`, \"gm\");\n        return e1.replace(r1, \"\");\n    };\n});\nvar Bs = Q((uh1, Fc1)=>{\n    Fc1.exports = {\n        name: \"@prisma/engines-version\",\n        version: \"5.8.0-37.0a83d8541752d7582de2ebc1ece46519ce72a848\",\n        main: \"index.js\",\n        types: \"index.d.ts\",\n        license: \"Apache-2.0\",\n        author: \"Tim Suchanek <suchanek@prisma.io>\",\n        prisma: {\n            enginesVersion: \"0a83d8541752d7582de2ebc1ece46519ce72a848\"\n        },\n        repository: {\n            type: \"git\",\n            url: \"https://github.com/prisma/engines-wrapper.git\",\n            directory: \"packages/engines-version\"\n        },\n        devDependencies: {\n            \"@types/node\": \"18.19.4\",\n            typescript: \"4.9.5\"\n        },\n        files: [\n            \"index.js\",\n            \"index.d.ts\"\n        ],\n        scripts: {\n            build: \"tsc -d\"\n        }\n    };\n});\nvar Fi = Q((pn1)=>{\n    \"use strict\";\n    Object.defineProperty(pn1, \"__esModule\", {\n        value: !0\n    });\n    pn1.enginesVersion = void 0;\n    pn1.enginesVersion = Bs().prisma.enginesVersion;\n});\nvar $i = Q((Mh1, Us1)=>{\n    \"use strict\";\n    Us1.exports = (e1, t1 = 1, r1)=>{\n        if (r1 = {\n            indent: \" \",\n            includeEmptyLines: !1,\n            ...r1\n        }, typeof e1 != \"string\") throw new TypeError(`Expected \\`input\\` to be a \\`string\\`, got \\`${typeof e1}\\``);\n        if (typeof t1 != \"number\") throw new TypeError(`Expected \\`count\\` to be a \\`number\\`, got \\`${typeof t1}\\``);\n        if (typeof r1.indent != \"string\") throw new TypeError(`Expected \\`options.indent\\` to be a \\`string\\`, got \\`${typeof r1.indent}\\``);\n        if (t1 === 0) return e1;\n        let n1 = r1.includeEmptyLines ? /^/gm : /^(?!\\s*$)/gm;\n        return e1.replace(n1, r1.indent.repeat(t1));\n    };\n});\nvar Gs = Q((kh1, Js1)=>{\n    \"use strict\";\n    Js1.exports = ({ onlyFirst: e1 = !1 } = {})=>{\n        let t1 = [\n            \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n            \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-ntqry=><~]))\"\n        ].join(\"|\");\n        return new RegExp(t1, e1 ? void 0 : \"g\");\n    };\n});\nvar Vi = Q((Fh1, Hs1)=>{\n    \"use strict\";\n    var Uc1 = Gs();\n    Hs1.exports = (e1)=>typeof e1 == \"string\" ? e1.replace(Uc1(), \"\") : e1;\n});\nvar Ws = Q((Nh1, mn1)=>{\n    \"use strict\";\n    mn1.exports = (e1 = {})=>{\n        let t1;\n        if (e1.repoUrl) t1 = e1.repoUrl;\n        else if (e1.user && e1.repo) t1 = `https://github.com/${e1.user}/${e1.repo}`;\n        else throw new Error(\"You need to specify either the `repoUrl` option or both the `user` and `repo` options\");\n        let r1 = new URL(`${t1}/issues/new`), n1 = [\n            \"body\",\n            \"title\",\n            \"labels\",\n            \"template\",\n            \"milestone\",\n            \"assignee\",\n            \"projects\"\n        ];\n        for (let i1 of n1){\n            let o1 = e1[i1];\n            if (o1 !== void 0) {\n                if (i1 === \"labels\" || i1 === \"projects\") {\n                    if (!Array.isArray(o1)) throw new TypeError(`The \\`${i1}\\` option should be an array`);\n                    o1 = o1.join(\",\");\n                }\n                r1.searchParams.set(i1, o1);\n            }\n        }\n        return r1.toString();\n    };\n    mn1.exports.default = mn1.exports;\n});\nvar Io = Q((vT1, Il1)=>{\n    \"use strict\";\n    Il1.exports = function() {\n        function e1(t1, r1, n1, i1, o1) {\n            return t1 < r1 || n1 < r1 ? t1 > n1 ? n1 + 1 : t1 + 1 : i1 === o1 ? r1 : r1 + 1;\n        }\n        return function(t1, r1) {\n            if (t1 === r1) return 0;\n            if (t1.length > r1.length) {\n                var n1 = t1;\n                t1 = r1, r1 = n1;\n            }\n            for(var i1 = t1.length, o1 = r1.length; i1 > 0 && t1.charCodeAt(i1 - 1) === r1.charCodeAt(o1 - 1);)i1--, o1--;\n            for(var s1 = 0; s1 < i1 && t1.charCodeAt(s1) === r1.charCodeAt(s1);)s1++;\n            if (i1 -= s1, o1 -= s1, i1 === 0 || o1 < 3) return o1;\n            var a1 = 0, l1, u1, c1, p1, d1, f1, y1, g1, _1, A1, R1, E1, S1 = [];\n            for(l1 = 0; l1 < i1; l1++)S1.push(l1 + 1), S1.push(t1.charCodeAt(s1 + l1));\n            for(var we1 = S1.length - 1; a1 < o1 - 3;)for(_1 = r1.charCodeAt(s1 + (u1 = a1)), A1 = r1.charCodeAt(s1 + (c1 = a1 + 1)), R1 = r1.charCodeAt(s1 + (p1 = a1 + 2)), E1 = r1.charCodeAt(s1 + (d1 = a1 + 3)), f1 = a1 += 4, l1 = 0; l1 < we1; l1 += 2)y1 = S1[l1], g1 = S1[l1 + 1], u1 = e1(y1, u1, c1, _1, g1), c1 = e1(u1, c1, p1, A1, g1), p1 = e1(c1, p1, d1, R1, g1), f1 = e1(p1, d1, f1, E1, g1), S1[l1] = f1, d1 = p1, p1 = c1, c1 = u1, u1 = y1;\n            for(; a1 < o1;)for(_1 = r1.charCodeAt(s1 + (u1 = a1)), f1 = ++a1, l1 = 0; l1 < we1; l1 += 2)y1 = S1[l1], S1[l1] = f1 = e1(y1, u1, f1, _1, S1[l1 + 1]), u1 = y1;\n            return f1;\n        };\n    }();\n});\nvar Ng = {};\n_t(Ng, {\n    DMMF: ()=>Ee,\n    DMMFClass: ()=>Jr,\n    Debug: ()=>bi,\n    Decimal: ()=>Ne,\n    Extensions: ()=>li,\n    MetricsClient: ()=>Dt,\n    NotFoundError: ()=>Ve,\n    ObjectEnumValue: ()=>ke,\n    PrismaClientInitializationError: ()=>k,\n    PrismaClientKnownRequestError: ()=>H,\n    PrismaClientRustPanicError: ()=>be,\n    PrismaClientUnknownRequestError: ()=>W,\n    PrismaClientValidationError: ()=>se,\n    Public: ()=>ui,\n    Sql: ()=>fe,\n    Types: ()=>ci,\n    defineDmmfProperty: ()=>Ys,\n    detectRuntime: ()=>gl,\n    empty: ()=>Xs,\n    getPrismaClient: ()=>Eu,\n    itxClientDenyList: ()=>Gi,\n    join: ()=>Zs,\n    makeStrictEnum: ()=>Pu,\n    objectEnumNames: ()=>Jc,\n    objectEnumValues: ()=>gn,\n    raw: ()=>Zi,\n    sqltag: ()=>Xi,\n    warnEnvConflicts: ()=>vu,\n    warnOnce: ()=>lr\n});\nmodule.exports = Mu(Ng);\nvar li = {};\n_t(li, {\n    defineExtension: ()=>jo,\n    getExtensionContext: ()=>Vo\n});\nfunction jo(e1) {\n    return typeof e1 == \"function\" ? e1 : (t1)=>t1.$extends(e1);\n}\nfunction Vo(e1) {\n    return e1;\n}\nvar ui = {};\n_t(ui, {\n    validator: ()=>Uo\n});\nfunction Uo(...e1) {\n    return (t1)=>t1;\n}\nvar ci = {};\n_t(ci, {\n    Extensions: ()=>Ko,\n    Public: ()=>Qo,\n    Result: ()=>Jo,\n    Utils: ()=>Go\n});\nvar Ko = {};\nvar Qo = {};\nvar Jo = {};\nvar Go = {};\nvar Je = (e1, t1)=>{\n    let r1 = {};\n    for (let n1 of e1){\n        let i1 = n1[t1];\n        r1[i1] = n1;\n    }\n    return r1;\n};\nfunction Ho(e1) {\n    return e1.substring(0, 1).toLowerCase() + e1.substring(1);\n}\nvar Jr = class {\n    constructor(t1){\n        this.document = t1;\n        this.compositeNames = new Set(this.datamodel.types.map((r1)=>r1.name)), this.typeAndModelMap = this.buildTypeModelMap(), this.mappingsMap = this.buildMappingsMap(), this.outputTypeMap = this.buildMergedOutputTypeMap(), this.rootFieldMap = this.buildRootFieldMap(), this.inputTypesByName = this.buildInputTypesMap();\n    }\n    get datamodel() {\n        return this.document.datamodel;\n    }\n    get mappings() {\n        return this.document.mappings;\n    }\n    get schema() {\n        return this.document.schema;\n    }\n    get inputObjectTypes() {\n        return this.schema.inputObjectTypes;\n    }\n    get outputObjectTypes() {\n        return this.schema.outputObjectTypes;\n    }\n    isComposite(t1) {\n        return this.compositeNames.has(t1);\n    }\n    getOtherOperationNames() {\n        return [\n            Object.values(this.mappings.otherOperations.write),\n            Object.values(this.mappings.otherOperations.read)\n        ].flat();\n    }\n    hasEnumInNamespace(t1, r1) {\n        return this.schema.enumTypes[r1]?.find((n1)=>n1.name === t1) !== void 0;\n    }\n    resolveInputObjectType(t1) {\n        return this.inputTypesByName.get(pi(t1.type, t1.namespace));\n    }\n    resolveOutputObjectType(t1) {\n        if (t1.location === \"outputObjectTypes\") return this.outputObjectTypes[t1.namespace ?? \"prisma\"].find((r1)=>r1.name === t1.type);\n    }\n    buildModelMap() {\n        return Je(this.datamodel.models, \"name\");\n    }\n    buildTypeMap() {\n        return Je(this.datamodel.types, \"name\");\n    }\n    buildTypeModelMap() {\n        return {\n            ...this.buildTypeMap(),\n            ...this.buildModelMap()\n        };\n    }\n    buildMappingsMap() {\n        return Je(this.mappings.modelOperations, \"model\");\n    }\n    buildMergedOutputTypeMap() {\n        return {\n            model: Je(this.schema.outputObjectTypes.model, \"name\"),\n            prisma: Je(this.schema.outputObjectTypes.prisma, \"name\")\n        };\n    }\n    buildRootFieldMap() {\n        return {\n            ...Je(this.outputTypeMap.prisma.Query.fields, \"name\"),\n            ...Je(this.outputTypeMap.prisma.Mutation.fields, \"name\")\n        };\n    }\n    buildInputTypesMap() {\n        let t1 = new Map;\n        for (let r1 of this.inputObjectTypes.prisma)t1.set(pi(r1.name, \"prisma\"), r1);\n        if (!this.inputObjectTypes.model) return t1;\n        for (let r1 of this.inputObjectTypes.model)t1.set(pi(r1.name, \"model\"), r1);\n        return t1;\n    }\n};\nfunction pi(e1, t1) {\n    return t1 ? `${t1}.${e1}` : e1;\n}\nvar Ee;\n((t1)=>{\n    let e1;\n    ((E1)=>(E1.findUnique = \"findUnique\", E1.findUniqueOrThrow = \"findUniqueOrThrow\", E1.findFirst = \"findFirst\", E1.findFirstOrThrow = \"findFirstOrThrow\", E1.findMany = \"findMany\", E1.create = \"create\", E1.createMany = \"createMany\", E1.update = \"update\", E1.updateMany = \"updateMany\", E1.upsert = \"upsert\", E1.delete = \"delete\", E1.deleteMany = \"deleteMany\", E1.groupBy = \"groupBy\", E1.count = \"count\", E1.aggregate = \"aggregate\", E1.findRaw = \"findRaw\", E1.aggregateRaw = \"aggregateRaw\"))(e1 = t1.ModelAction || (t1.ModelAction = {}));\n})(Ee || (Ee = {}));\nvar Yr = F(is()), Zu = 100, Zt = [];\ntypeof process < \"u\" && typeof process.stderr?.write != \"function\" && (Yr.default.log = console.debug ?? console.log);\nfunction Xu(e1) {\n    let t1 = (0, Yr.default)(e1), r1 = Object.assign((...n1)=>(t1.log = r1.log, n1.length !== 0 && Zt.push([\n            e1,\n            ...n1\n        ]), Zt.length > Zu && Zt.shift(), t1(\"\", ...n1)), t1);\n    return r1;\n}\nvar bi = Object.assign(Xu, Yr.default);\nfunction os(e1 = 7500) {\n    let t1 = Zt.map((r1)=>r1.map((n1)=>typeof n1 == \"string\" ? n1 : JSON.stringify(n1)).join(\" \")).join(`\n`);\n    return t1.length < e1 ? t1 : t1.slice(-e1);\n}\nfunction ss() {\n    Zt.length = 0;\n}\nvar $ = bi;\nvar xi, as, ls, us, cs = !0;\ntypeof process < \"u\" && ({ FORCE_COLOR: xi, NODE_DISABLE_COLORS: as, NO_COLOR: ls, TERM: us } = process.env || {}, cs = process.stdout && process.stdout.isTTY);\nvar ec = {\n    enabled: !as && ls == null && us !== \"dumb\" && (xi != null && xi !== \"0\" || cs)\n};\nfunction q(e1, t1) {\n    let r1 = new RegExp(`\\\\x1b\\\\[${t1}m`, \"g\"), n1 = `\\x1B[${e1}m`, i1 = `\\x1B[${t1}m`;\n    return function(o1) {\n        return !ec.enabled || o1 == null ? o1 : n1 + (~(\"\" + o1).indexOf(i1) ? o1.replace(r1, i1 + n1) : o1) + i1;\n    };\n}\nvar ey = q(0, 0), de = q(1, 22), He = q(2, 22), ty = q(3, 23), ue = q(4, 24), ry = q(7, 27), ny = q(8, 28), iy = q(9, 29), oy = q(30, 39), ve = q(31, 39), pt = q(32, 39), Re = q(33, 39), Mt = q(34, 39), sy = q(35, 39), We = q(36, 39), ay = q(37, 39), Zr = q(90, 39), ly = q(90, 39), uy = q(40, 49), cy = q(41, 49), py = q(42, 49), dy = q(43, 49), my = q(44, 49), fy = q(45, 49), gy = q(46, 49), yy = q(47, 49);\nvar ps = F(__webpack_require__(/*! fs */ \"fs\"));\nfunction wi() {\n    let e1 = process.env.PRISMA_QUERY_ENGINE_LIBRARY;\n    if (!(e1 && ps.default.existsSync(e1)) && process.arch === \"ia32\") throw new Error('The default query engine type (Node-API, \"library\") is currently not supported for 32bit Node. Please set `engineType = \"binary\"` in the \"generator\" block of your \"schema.prisma\" file (or use the environment variables \"PRISMA_CLIENT_ENGINE_TYPE=binary\" and/or \"PRISMA_CLI_QUERY_ENGINE_TYPE=binary\".)');\n}\nvar Ei = [\n    \"darwin\",\n    \"darwin-arm64\",\n    \"debian-openssl-1.0.x\",\n    \"debian-openssl-1.1.x\",\n    \"debian-openssl-3.0.x\",\n    \"rhel-openssl-1.0.x\",\n    \"rhel-openssl-1.1.x\",\n    \"rhel-openssl-3.0.x\",\n    \"linux-arm64-openssl-1.1.x\",\n    \"linux-arm64-openssl-1.0.x\",\n    \"linux-arm64-openssl-3.0.x\",\n    \"linux-arm-openssl-1.1.x\",\n    \"linux-arm-openssl-1.0.x\",\n    \"linux-arm-openssl-3.0.x\",\n    \"linux-musl\",\n    \"linux-musl-openssl-3.0.x\",\n    \"linux-musl-arm64-openssl-1.1.x\",\n    \"linux-musl-arm64-openssl-3.0.x\",\n    \"linux-nixos\",\n    \"linux-static-x64\",\n    \"linux-static-arm64\",\n    \"windows\",\n    \"freebsd11\",\n    \"freebsd12\",\n    \"freebsd13\",\n    \"freebsd14\",\n    \"openbsd\",\n    \"netbsd\",\n    \"arm\"\n];\nvar Xr = \"libquery_engine\";\nfunction en(e1, t1) {\n    let r1 = t1 === \"url\";\n    return e1.includes(\"windows\") ? r1 ? \"query_engine.dll.node\" : `query_engine-${e1}.dll.node` : e1.includes(\"darwin\") ? r1 ? `${Xr}.dylib.node` : `${Xr}-${e1}.dylib.node` : r1 ? `${Xr}.so.node` : `${Xr}-${e1}.so.node`;\n}\nvar vs = F(__webpack_require__(/*! child_process */ \"child_process\")), Ri = F(__webpack_require__(/*! fs/promises */ \"fs/promises\")), sn = F(__webpack_require__(/*! os */ \"os\"));\nvar je = Symbol.for(\"@ts-pattern/matcher\"), tc = Symbol.for(\"@ts-pattern/isVariadic\"), rn = \"@ts-pattern/anonymous-select-key\", Pi = (e1)=>!!(e1 && typeof e1 == \"object\"), tn = (e1)=>e1 && !!e1[je], Ie = (e1, t1, r1)=>{\n    if (tn(e1)) {\n        let n1 = e1[je](), { matched: i1, selections: o1 } = n1.match(t1);\n        return i1 && o1 && Object.keys(o1).forEach((s1)=>r1(s1, o1[s1])), i1;\n    }\n    if (Pi(e1)) {\n        if (!Pi(t1)) return !1;\n        if (Array.isArray(e1)) {\n            if (!Array.isArray(t1)) return !1;\n            let n1 = [], i1 = [], o1 = [];\n            for (let s1 of e1.keys()){\n                let a1 = e1[s1];\n                tn(a1) && a1[tc] ? o1.push(a1) : o1.length ? i1.push(a1) : n1.push(a1);\n            }\n            if (o1.length) {\n                if (o1.length > 1) throw new Error(\"Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.\");\n                if (t1.length < n1.length + i1.length) return !1;\n                let s1 = t1.slice(0, n1.length), a1 = i1.length === 0 ? [] : t1.slice(-i1.length), l1 = t1.slice(n1.length, i1.length === 0 ? 1 / 0 : -i1.length);\n                return n1.every((u1, c1)=>Ie(u1, s1[c1], r1)) && i1.every((u1, c1)=>Ie(u1, a1[c1], r1)) && (o1.length === 0 || Ie(o1[0], l1, r1));\n            }\n            return e1.length === t1.length && e1.every((s1, a1)=>Ie(s1, t1[a1], r1));\n        }\n        return Object.keys(e1).every((n1)=>{\n            let i1 = e1[n1];\n            return (n1 in t1 || tn(o1 = i1) && o1[je]().matcherType === \"optional\") && Ie(i1, t1[n1], r1);\n            var o1;\n        });\n    }\n    return Object.is(t1, e1);\n}, Ze = (e1)=>{\n    var t1, r1, n1;\n    return Pi(e1) ? tn(e1) ? (t1 = (r1 = (n1 = e1[je]()).getSelectionKeys) == null ? void 0 : r1.call(n1)) != null ? t1 : [] : Array.isArray(e1) ? Xt(e1, Ze) : Xt(Object.values(e1), Ze) : [];\n}, Xt = (e1, t1)=>e1.reduce((r1, n1)=>r1.concat(t1(n1)), []);\nfunction Te(e1) {\n    return Object.assign(e1, {\n        optional: ()=>rc(e1),\n        and: (t1)=>V(e1, t1),\n        or: (t1)=>nc(e1, t1),\n        select: (t1)=>t1 === void 0 ? ds(e1) : ds(t1, e1)\n    });\n}\nfunction rc(e1) {\n    return Te({\n        [je]: ()=>({\n                match: (t1)=>{\n                    let r1 = {}, n1 = (i1, o1)=>{\n                        r1[i1] = o1;\n                    };\n                    return t1 === void 0 ? (Ze(e1).forEach((i1)=>n1(i1, void 0)), {\n                        matched: !0,\n                        selections: r1\n                    }) : {\n                        matched: Ie(e1, t1, n1),\n                        selections: r1\n                    };\n                },\n                getSelectionKeys: ()=>Ze(e1),\n                matcherType: \"optional\"\n            })\n    });\n}\nfunction V(...e1) {\n    return Te({\n        [je]: ()=>({\n                match: (t1)=>{\n                    let r1 = {}, n1 = (i1, o1)=>{\n                        r1[i1] = o1;\n                    };\n                    return {\n                        matched: e1.every((i1)=>Ie(i1, t1, n1)),\n                        selections: r1\n                    };\n                },\n                getSelectionKeys: ()=>Xt(e1, Ze),\n                matcherType: \"and\"\n            })\n    });\n}\nfunction nc(...e1) {\n    return Te({\n        [je]: ()=>({\n                match: (t1)=>{\n                    let r1 = {}, n1 = (i1, o1)=>{\n                        r1[i1] = o1;\n                    };\n                    return Xt(e1, Ze).forEach((i1)=>n1(i1, void 0)), {\n                        matched: e1.some((i1)=>Ie(i1, t1, n1)),\n                        selections: r1\n                    };\n                },\n                getSelectionKeys: ()=>Xt(e1, Ze),\n                matcherType: \"or\"\n            })\n    });\n}\nfunction O(e1) {\n    return {\n        [je]: ()=>({\n                match: (t1)=>({\n                        matched: !!e1(t1)\n                    })\n            })\n    };\n}\nfunction ds(...e1) {\n    let t1 = typeof e1[0] == \"string\" ? e1[0] : void 0, r1 = e1.length === 2 ? e1[1] : typeof e1[0] == \"string\" ? void 0 : e1[0];\n    return Te({\n        [je]: ()=>({\n                match: (n1)=>{\n                    let i1 = {\n                        [t1 ?? rn]: n1\n                    };\n                    return {\n                        matched: r1 === void 0 || Ie(r1, n1, (o1, s1)=>{\n                            i1[o1] = s1;\n                        }),\n                        selections: i1\n                    };\n                },\n                getSelectionKeys: ()=>[\n                        t1 ?? rn\n                    ].concat(r1 === void 0 ? [] : Ze(r1))\n            })\n    });\n}\nfunction Me(e1) {\n    return typeof e1 == \"number\";\n}\nfunction dt(e1) {\n    return typeof e1 == \"string\";\n}\nfunction ze(e1) {\n    return typeof e1 == \"bigint\";\n}\nvar Cy = Te(O(function(e1) {\n    return !0;\n}));\nvar mt = (e1)=>Object.assign(Te(e1), {\n        startsWith: (t1)=>{\n            return mt(V(e1, (r1 = t1, O((n1)=>dt(n1) && n1.startsWith(r1)))));\n            var r1;\n        },\n        endsWith: (t1)=>{\n            return mt(V(e1, (r1 = t1, O((n1)=>dt(n1) && n1.endsWith(r1)))));\n            var r1;\n        },\n        minLength: (t1)=>mt(V(e1, ((r1)=>O((n1)=>dt(n1) && n1.length >= r1))(t1))),\n        maxLength: (t1)=>mt(V(e1, ((r1)=>O((n1)=>dt(n1) && n1.length <= r1))(t1))),\n        includes: (t1)=>{\n            return mt(V(e1, (r1 = t1, O((n1)=>dt(n1) && n1.includes(r1)))));\n            var r1;\n        },\n        regex: (t1)=>{\n            return mt(V(e1, (r1 = t1, O((n1)=>dt(n1) && !!n1.match(r1)))));\n            var r1;\n        }\n    }), Ay = mt(O(dt)), Se = (e1)=>Object.assign(Te(e1), {\n        between: (t1, r1)=>Se(V(e1, ((n1, i1)=>O((o1)=>Me(o1) && n1 <= o1 && i1 >= o1))(t1, r1))),\n        lt: (t1)=>Se(V(e1, ((r1)=>O((n1)=>Me(n1) && n1 < r1))(t1))),\n        gt: (t1)=>Se(V(e1, ((r1)=>O((n1)=>Me(n1) && n1 > r1))(t1))),\n        lte: (t1)=>Se(V(e1, ((r1)=>O((n1)=>Me(n1) && n1 <= r1))(t1))),\n        gte: (t1)=>Se(V(e1, ((r1)=>O((n1)=>Me(n1) && n1 >= r1))(t1))),\n        int: ()=>Se(V(e1, O((t1)=>Me(t1) && Number.isInteger(t1)))),\n        finite: ()=>Se(V(e1, O((t1)=>Me(t1) && Number.isFinite(t1)))),\n        positive: ()=>Se(V(e1, O((t1)=>Me(t1) && t1 > 0))),\n        negative: ()=>Se(V(e1, O((t1)=>Me(t1) && t1 < 0)))\n    }), Ry = Se(O(Me)), Ye = (e1)=>Object.assign(Te(e1), {\n        between: (t1, r1)=>Ye(V(e1, ((n1, i1)=>O((o1)=>ze(o1) && n1 <= o1 && i1 >= o1))(t1, r1))),\n        lt: (t1)=>Ye(V(e1, ((r1)=>O((n1)=>ze(n1) && n1 < r1))(t1))),\n        gt: (t1)=>Ye(V(e1, ((r1)=>O((n1)=>ze(n1) && n1 > r1))(t1))),\n        lte: (t1)=>Ye(V(e1, ((r1)=>O((n1)=>ze(n1) && n1 <= r1))(t1))),\n        gte: (t1)=>Ye(V(e1, ((r1)=>O((n1)=>ze(n1) && n1 >= r1))(t1))),\n        positive: ()=>Ye(V(e1, O((t1)=>ze(t1) && t1 > 0))),\n        negative: ()=>Ye(V(e1, O((t1)=>ze(t1) && t1 < 0)))\n    }), My = Ye(O(ze)), Sy = Te(O(function(e1) {\n    return typeof e1 == \"boolean\";\n})), Iy = Te(O(function(e1) {\n    return typeof e1 == \"symbol\";\n})), ky = Te(O(function(e1) {\n    return e1 == null;\n}));\nvar vi = {\n    matched: !1,\n    value: void 0\n};\nfunction St(e1) {\n    return new Ti(e1, vi);\n}\nvar Ti = class e {\n    constructor(t1, r1){\n        this.input = void 0, this.state = void 0, this.input = t1, this.state = r1;\n    }\n    with(...t1) {\n        if (this.state.matched) return this;\n        let r1 = t1[t1.length - 1], n1 = [\n            t1[0]\n        ], i1;\n        t1.length === 3 && typeof t1[1] == \"function\" ? (n1.push(t1[0]), i1 = t1[1]) : t1.length > 2 && n1.push(...t1.slice(1, t1.length - 1));\n        let o1 = !1, s1 = {}, a1 = (u1, c1)=>{\n            o1 = !0, s1[u1] = c1;\n        }, l1 = !n1.some((u1)=>Ie(u1, this.input, a1)) || i1 && !i1(this.input) ? vi : {\n            matched: !0,\n            value: r1(o1 ? rn in s1 ? s1[rn] : s1 : this.input, this.input)\n        };\n        return new e(this.input, l1);\n    }\n    when(t1, r1) {\n        if (this.state.matched) return this;\n        let n1 = !!t1(this.input);\n        return new e(this.input, n1 ? {\n            matched: !0,\n            value: r1(this.input, this.input)\n        } : vi);\n    }\n    otherwise(t1) {\n        return this.state.matched ? this.state.value : t1(this.input);\n    }\n    exhaustive() {\n        return this.run();\n    }\n    run() {\n        if (this.state.matched) return this.state.value;\n        let t1;\n        try {\n            t1 = JSON.stringify(this.input);\n        } catch  {\n            t1 = this.input;\n        }\n        throw new Error(`Pattern matching error: no pattern matches value ${t1}`);\n    }\n    returnType() {\n        return this;\n    }\n};\nvar Ts = __webpack_require__(/*! util */ \"util\");\nvar ws = F(xs());\nfunction rr(e1) {\n    return (0, ws.default)(e1, e1, {\n        fallback: ue\n    });\n}\nvar sc = {\n    warn: Re(\"prisma:warn\")\n}, ac = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction nr(e1, ...t1) {\n    ac.warn() && console.warn(`${sc.warn} ${e1}`, ...t1);\n}\nvar lc = (0, Ts.promisify)(vs.default.exec), me = $(\"prisma:get-platform\"), uc = [\n    \"1.0.x\",\n    \"1.1.x\",\n    \"3.0.x\"\n];\nasync function _s() {\n    let e1 = sn.default.platform(), t1 = process.arch;\n    if (e1 === \"freebsd\") {\n        let s1 = await an(\"freebsd-version\");\n        if (s1 && s1.trim().length > 0) {\n            let l1 = /^(\\d+)\\.?/.exec(s1);\n            if (l1) return {\n                platform: \"freebsd\",\n                targetDistro: `freebsd${l1[1]}`,\n                arch: t1\n            };\n        }\n    }\n    if (e1 !== \"linux\") return {\n        platform: e1,\n        arch: t1\n    };\n    let r1 = await pc(), n1 = await xc(), i1 = mc({\n        arch: t1,\n        archFromUname: n1,\n        familyDistro: r1.familyDistro\n    }), { libssl: o1 } = await fc(i1);\n    return {\n        platform: \"linux\",\n        libssl: o1,\n        arch: t1,\n        archFromUname: n1,\n        ...r1\n    };\n}\nfunction cc(e1) {\n    let t1 = /^ID=\"?([^\"\\n]*)\"?$/im, r1 = /^ID_LIKE=\"?([^\"\\n]*)\"?$/im, n1 = t1.exec(e1), i1 = n1 && n1[1] && n1[1].toLowerCase() || \"\", o1 = r1.exec(e1), s1 = o1 && o1[1] && o1[1].toLowerCase() || \"\", a1 = St({\n        id: i1,\n        idLike: s1\n    }).with({\n        id: \"alpine\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"musl\",\n            familyDistro: l1,\n            originalDistro: l1\n        })).with({\n        id: \"raspbian\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"arm\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).with({\n        id: \"nixos\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"nixos\",\n            originalDistro: l1,\n            familyDistro: \"nixos\"\n        })).with({\n        id: \"debian\"\n    }, {\n        id: \"ubuntu\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).with({\n        id: \"rhel\"\n    }, {\n        id: \"centos\"\n    }, {\n        id: \"fedora\"\n    }, ({ id: l1 })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>l1.includes(\"debian\") || l1.includes(\"ubuntu\"), ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"debian\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>i1 === \"arch\" || l1.includes(\"arch\"), ({ id: l1 })=>({\n            targetDistro: \"debian\",\n            familyDistro: \"arch\",\n            originalDistro: l1\n        })).when(({ idLike: l1 })=>l1.includes(\"centos\") || l1.includes(\"fedora\") || l1.includes(\"rhel\") || l1.includes(\"suse\"), ({ id: l1 })=>({\n            targetDistro: \"rhel\",\n            familyDistro: \"rhel\",\n            originalDistro: l1\n        })).otherwise(({ id: l1 })=>({\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: l1\n        }));\n    return me(`Found distro info:\n${JSON.stringify(a1, null, 2)}`), a1;\n}\nasync function pc() {\n    let e1 = \"/etc/os-release\";\n    try {\n        let t1 = await Ri.default.readFile(e1, {\n            encoding: \"utf-8\"\n        });\n        return cc(t1);\n    } catch  {\n        return {\n            targetDistro: void 0,\n            familyDistro: void 0,\n            originalDistro: void 0\n        };\n    }\n}\nfunction dc(e1) {\n    let t1 = /^OpenSSL\\s(\\d+\\.\\d+)\\.\\d+/.exec(e1);\n    if (t1) {\n        let r1 = `${t1[1]}.x`;\n        return Cs(r1);\n    }\n}\nfunction Es(e1) {\n    let t1 = /libssl\\.so\\.(\\d)(\\.\\d)?/.exec(e1);\n    if (t1) {\n        let r1 = `${t1[1]}${t1[2] ?? \".0\"}.x`;\n        return Cs(r1);\n    }\n}\nfunction Cs(e1) {\n    let t1 = (()=>{\n        if (Rs(e1)) return e1;\n        let r1 = e1.split(\".\");\n        return r1[1] = \"0\", r1.join(\".\");\n    })();\n    if (uc.includes(t1)) return t1;\n}\nfunction mc(e1) {\n    return St(e1).with({\n        familyDistro: \"musl\"\n    }, ()=>(me('Trying platform-specific paths for \"alpine\"'), [\n            \"/lib\"\n        ])).with({\n        familyDistro: \"debian\"\n    }, ({ archFromUname: t1 })=>(me('Trying platform-specific paths for \"debian\" (and \"ubuntu\")'), [\n            `/usr/lib/${t1}-linux-gnu`,\n            `/lib/${t1}-linux-gnu`\n        ])).with({\n        familyDistro: \"rhel\"\n    }, ()=>(me('Trying platform-specific paths for \"rhel\"'), [\n            \"/lib64\",\n            \"/usr/lib64\"\n        ])).otherwise(({ familyDistro: t1, arch: r1, archFromUname: n1 })=>(me(`Don't know any platform-specific paths for \"${t1}\" on ${r1} (${n1})`), []));\n}\nasync function fc(e1) {\n    let t1 = 'grep -v \"libssl.so.0\"', r1 = await Ps(e1);\n    if (r1) {\n        me(`Found libssl.so file using platform-specific paths: ${r1}`);\n        let o1 = Es(r1);\n        if (me(`The parsed libssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"libssl-specific-path\"\n        };\n    }\n    me('Falling back to \"ldconfig\" and other generic paths');\n    let n1 = await an(`ldconfig -p | sed \"s/.*=>s*//\" | sed \"s|.*/||\" | grep libssl | sort | ${t1}`);\n    if (n1 || (n1 = await Ps([\n        \"/lib64\",\n        \"/usr/lib64\",\n        \"/lib\"\n    ])), n1) {\n        me(`Found libssl.so file using \"ldconfig\" or other generic paths: ${n1}`);\n        let o1 = Es(n1);\n        if (me(`The parsed libssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"ldconfig\"\n        };\n    }\n    let i1 = await an(\"openssl version -v\");\n    if (i1) {\n        me(`Found openssl binary with version: ${i1}`);\n        let o1 = dc(i1);\n        if (me(`The parsed openssl version is: ${o1}`), o1) return {\n            libssl: o1,\n            strategy: \"openssl-binary\"\n        };\n    }\n    return me(\"Couldn't find any version of libssl or OpenSSL in the system\"), {};\n}\nasync function Ps(e1) {\n    for (let t1 of e1){\n        let r1 = await gc(t1);\n        if (r1) return r1;\n    }\n}\nasync function gc(e1) {\n    try {\n        return (await Ri.default.readdir(e1)).find((r1)=>r1.startsWith(\"libssl.so.\") && !r1.startsWith(\"libssl.so.0\"));\n    } catch (t1) {\n        if (t1.code === \"ENOENT\") return;\n        throw t1;\n    }\n}\nasync function ft() {\n    let { binaryTarget: e1 } = await As();\n    return e1;\n}\nfunction yc(e1) {\n    return e1.binaryTarget !== void 0;\n}\nasync function Mi() {\n    let { memoized: e1, ...t1 } = await As();\n    return t1;\n}\nvar on = {};\nasync function As() {\n    if (yc(on)) return Promise.resolve({\n        ...on,\n        memoized: !0\n    });\n    let e1 = await _s(), t1 = hc(e1);\n    return on = {\n        ...e1,\n        binaryTarget: t1\n    }, {\n        ...on,\n        memoized: !1\n    };\n}\nfunction hc(e1) {\n    let { platform: t1, arch: r1, archFromUname: n1, libssl: i1, targetDistro: o1, familyDistro: s1, originalDistro: a1 } = e1;\n    t1 === \"linux\" && ![\n        \"x64\",\n        \"arm64\"\n    ].includes(r1) && nr(`Prisma only officially supports Linux on amd64 (x86_64) and arm64 (aarch64) system architectures. If you are using your own custom Prisma engines, you can ignore this warning, as long as you've compiled the engines for your system architecture \"${n1}\".`);\n    let l1 = \"1.1.x\";\n    if (t1 === \"linux\" && i1 === void 0) {\n        let c1 = St({\n            familyDistro: s1\n        }).with({\n            familyDistro: \"debian\"\n        }, ()=>\"Please manually install OpenSSL via `apt-get update -y && apt-get install -y openssl` and try installing Prisma again. If you're running Prisma on Docker, add this command to your Dockerfile, or switch to an image that already has OpenSSL installed.\").otherwise(()=>\"Please manually install OpenSSL and try installing Prisma again.\");\n        nr(`Prisma failed to detect the libssl/openssl version to use, and may not work as expected. Defaulting to \"openssl-${l1}\".\n${c1}`);\n    }\n    let u1 = \"debian\";\n    if (t1 === \"linux\" && o1 === void 0 && nr(`Prisma doesn't know which engines to download for the Linux distro \"${a1}\". Falling back to Prisma engines built \"${u1}\".\nPlease report your experience by creating an issue at ${rr(\"https://github.com/prisma/prisma/issues\")} so we can add your distro to the list of known supported distros.`), t1 === \"darwin\" && r1 === \"arm64\") return \"darwin-arm64\";\n    if (t1 === \"darwin\") return \"darwin\";\n    if (t1 === \"win32\") return \"windows\";\n    if (t1 === \"freebsd\") return o1;\n    if (t1 === \"openbsd\") return \"openbsd\";\n    if (t1 === \"netbsd\") return \"netbsd\";\n    if (t1 === \"linux\" && o1 === \"nixos\") return \"linux-nixos\";\n    if (t1 === \"linux\" && r1 === \"arm64\") return `${o1 === \"musl\" ? \"linux-musl-arm64\" : \"linux-arm64\"}-openssl-${i1 || l1}`;\n    if (t1 === \"linux\" && r1 === \"arm\") return `linux-arm-openssl-${i1 || l1}`;\n    if (t1 === \"linux\" && o1 === \"musl\") {\n        let c1 = \"linux-musl\";\n        return !i1 || Rs(i1) ? c1 : `${c1}-openssl-${i1}`;\n    }\n    return t1 === \"linux\" && o1 && i1 ? `${o1}-openssl-${i1}` : (t1 !== \"linux\" && nr(`Prisma detected unknown OS \"${t1}\" and may not work as expected. Defaulting to \"linux\".`), i1 ? `${u1}-openssl-${i1}` : o1 ? `${o1}-openssl-${l1}` : `${u1}-openssl-${l1}`);\n}\nasync function bc(e1) {\n    try {\n        return await e1();\n    } catch  {\n        return;\n    }\n}\nfunction an(e1) {\n    return bc(async ()=>{\n        let t1 = await lc(e1);\n        return me(`Command \"${e1}\" successfully returned \"${t1.stdout}\"`), t1.stdout;\n    });\n}\nasync function xc() {\n    return typeof sn.default.machine == \"function\" ? sn.default.machine() : (await an(\"uname -m\"))?.trim();\n}\nfunction Rs(e1) {\n    return e1.startsWith(\"1.\");\n}\nvar ki = F(Is()), cn = F(__webpack_require__(/*! fs */ \"fs\"));\nvar Ft = F(__webpack_require__(/*! path */ \"path\"));\nfunction ks(e1) {\n    let t1 = e1.ignoreProcessEnv ? {} : process.env, r1 = (n1)=>n1.match(/(.?\\${(?:[a-zA-Z0-9_]+)?})/g)?.reduce(function(o1, s1) {\n            let a1 = /(.?)\\${([a-zA-Z0-9_]+)?}/g.exec(s1);\n            if (!a1) return o1;\n            let l1 = a1[1], u1, c1;\n            if (l1 === \"\\\\\") c1 = a1[0], u1 = c1.replace(\"\\\\$\", \"$\");\n            else {\n                let p1 = a1[2];\n                c1 = a1[0].substring(l1.length), u1 = Object.hasOwnProperty.call(t1, p1) ? t1[p1] : e1.parsed[p1] || \"\", u1 = r1(u1);\n            }\n            return o1.replace(c1, u1);\n        }, n1) ?? n1;\n    for(let n1 in e1.parsed){\n        let i1 = Object.hasOwnProperty.call(t1, n1) ? t1[n1] : e1.parsed[n1];\n        e1.parsed[n1] = r1(i1);\n    }\n    for(let n1 in e1.parsed)t1[n1] = e1.parsed[n1];\n    return e1;\n}\nvar Ii = $(\"prisma:tryLoadEnv\");\nfunction ir({ rootEnvPath: e1, schemaEnvPath: t1 }, r1 = {\n    conflictCheck: \"none\"\n}) {\n    let n1 = Fs(e1);\n    r1.conflictCheck !== \"none\" && Mc(n1, t1, r1.conflictCheck);\n    let i1 = null;\n    return Os(n1?.path, t1) || (i1 = Fs(t1)), !n1 && !i1 && Ii(\"No Environment variables loaded\"), i1?.dotenvResult.error ? console.error(ve(de(\"Schema Env Error: \")) + i1.dotenvResult.error) : {\n        message: [\n            n1?.message,\n            i1?.message\n        ].filter(Boolean).join(`\n`),\n        parsed: {\n            ...n1?.dotenvResult?.parsed,\n            ...i1?.dotenvResult?.parsed\n        }\n    };\n}\nfunction Mc(e1, t1, r1) {\n    let n1 = e1?.dotenvResult.parsed, i1 = !Os(e1?.path, t1);\n    if (n1 && t1 && i1 && cn.default.existsSync(t1)) {\n        let o1 = ki.default.parse(cn.default.readFileSync(t1)), s1 = [];\n        for(let a1 in o1)n1[a1] === o1[a1] && s1.push(a1);\n        if (s1.length > 0) {\n            let a1 = Ft.default.relative(process.cwd(), e1.path), l1 = Ft.default.relative(process.cwd(), t1);\n            if (r1 === \"error\") {\n                let u1 = `There is a conflict between env var${s1.length > 1 ? \"s\" : \"\"} in ${ue(a1)} and ${ue(l1)}\nConflicting env vars:\n${s1.map((c1)=>`  ${de(c1)}`).join(`\n`)}\n\nWe suggest to move the contents of ${ue(l1)} to ${ue(a1)} to consolidate your env vars.\n`;\n                throw new Error(u1);\n            } else if (r1 === \"warn\") {\n                let u1 = `Conflict for env var${s1.length > 1 ? \"s\" : \"\"} ${s1.map((c1)=>de(c1)).join(\", \")} in ${ue(a1)} and ${ue(l1)}\nEnv vars from ${ue(l1)} overwrite the ones from ${ue(a1)}\n      `;\n                console.warn(`${Re(\"warn(prisma)\")} ${u1}`);\n            }\n        }\n    }\n}\nfunction Fs(e1) {\n    if (Sc(e1)) {\n        Ii(`Environment variables loaded from ${e1}`);\n        let t1 = ki.default.config({\n            path: e1,\n            debug: process.env.DOTENV_CONFIG_DEBUG ? !0 : void 0\n        });\n        return {\n            dotenvResult: ks(t1),\n            message: He(`Environment variables loaded from ${Ft.default.relative(process.cwd(), e1)}`),\n            path: e1\n        };\n    } else Ii(`Environment variables not found at ${e1}`);\n    return null;\n}\nfunction Os(e1, t1) {\n    return e1 && t1 && Ft.default.resolve(e1) === Ft.default.resolve(t1);\n}\nfunction Sc(e1) {\n    return !!(e1 && cn.default.existsSync(e1));\n}\nvar Ds = \"library\";\nfunction gt(e1) {\n    let t1 = Ic();\n    return t1 || (e1?.config.engineType === \"library\" ? \"library\" : e1?.config.engineType === \"binary\" ? \"binary\" : e1?.config.engineType === \"wasm\" ? \"wasm\" : Ds);\n}\nfunction Ic() {\n    let e1 = process.env.PRISMA_CLIENT_ENGINE_TYPE;\n    return e1 === \"library\" ? \"library\" : e1 === \"binary\" ? \"binary\" : e1 === \"wasm\" ? \"wasm\" : void 0;\n}\nvar Oc = F(Fi());\nvar B = F(__webpack_require__(/*! path */ \"path\")), Dc = F(Fi()), xh = $(\"prisma:engines\");\nfunction js() {\n    return B.default.join(__dirname, \"../\");\n}\nvar wh = \"libquery-engine\";\nB.default.join(__dirname, \"../query-engine-darwin\");\nB.default.join(__dirname, \"../query-engine-darwin-arm64\");\nB.default.join(__dirname, \"../query-engine-debian-openssl-1.0.x\");\nB.default.join(__dirname, \"../query-engine-debian-openssl-1.1.x\");\nB.default.join(__dirname, \"../query-engine-debian-openssl-3.0.x\");\nB.default.join(__dirname, \"../query-engine-linux-static-x64\");\nB.default.join(__dirname, \"../query-engine-linux-static-arm64\");\nB.default.join(__dirname, \"../query-engine-rhel-openssl-1.0.x\");\nB.default.join(__dirname, \"../query-engine-rhel-openssl-1.1.x\");\nB.default.join(__dirname, \"../query-engine-rhel-openssl-3.0.x\");\nB.default.join(__dirname, \"../libquery_engine-darwin.dylib.node\");\nB.default.join(__dirname, \"../libquery_engine-darwin-arm64.dylib.node\");\nB.default.join(__dirname, \"../libquery_engine-debian-openssl-1.0.x.so.node\");\nB.default.join(__dirname, \"../libquery_engine-debian-openssl-1.1.x.so.node\");\nB.default.join(__dirname, \"../libquery_engine-debian-openssl-3.0.x.so.node\");\nB.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.0.x.so.node\");\nB.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-1.1.x.so.node\");\nB.default.join(__dirname, \"../libquery_engine-linux-arm64-openssl-3.0.x.so.node\");\nB.default.join(__dirname, \"../libquery_engine-linux-musl.so.node\");\nB.default.join(__dirname, \"../libquery_engine-linux-musl-openssl-3.0.x.so.node\");\nB.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.0.x.so.node\");\nB.default.join(__dirname, \"../libquery_engine-rhel-openssl-1.1.x.so.node\");\nB.default.join(__dirname, \"../libquery_engine-rhel-openssl-3.0.x.so.node\");\nB.default.join(__dirname, \"../query_engine-windows.dll.node\");\nvar Oi = F(__webpack_require__(/*! fs */ \"fs\")), Vs = $(\"chmodPlusX\");\nfunction Di(e1) {\n    if (process.platform === \"win32\") return;\n    let t1 = Oi.default.statSync(e1), r1 = t1.mode | 64 | 8 | 1;\n    if (t1.mode === r1) {\n        Vs(`Execution permissions of ${e1} are fine`);\n        return;\n    }\n    let n1 = r1.toString(8).slice(-3);\n    Vs(`Have to call chmodPlusX on ${e1}`), Oi.default.chmodSync(e1, n1);\n}\nfunction Ni(e1) {\n    let t1 = e1.e, r1 = (a1)=>`Prisma cannot find the required \\`${a1}\\` system library in your system`, n1 = t1.message.includes(\"cannot open shared object file\"), i1 = `Please refer to the documentation about Prisma's system requirements: ${rr(\"https://pris.ly/d/system-requirements\")}`, o1 = `Unable to require(\\`${He(e1.id)}\\`).`, s1 = St({\n        message: t1.message,\n        code: t1.code\n    }).with({\n        code: \"ENOENT\"\n    }, ()=>\"File does not exist.\").when(({ message: a1 })=>n1 && a1.includes(\"libz\"), ()=>`${r1(\"libz\")}. Please install it and try again.`).when(({ message: a1 })=>n1 && a1.includes(\"libgcc_s\"), ()=>`${r1(\"libgcc_s\")}. Please install it and try again.`).when(({ message: a1 })=>n1 && a1.includes(\"libssl\"), ()=>{\n        let a1 = e1.platformInfo.libssl ? `openssl-${e1.platformInfo.libssl}` : \"openssl\";\n        return `${r1(\"libssl\")}. Please install ${a1} and try again.`;\n    }).when(({ message: a1 })=>a1.includes(\"GLIBC\"), ()=>`Prisma has detected an incompatible version of the \\`glibc\\` C standard library installed in your system. This probably means your system may be too old to run Prisma. ${i1}`).when(({ message: a1 })=>e1.platformInfo.platform === \"linux\" && a1.includes(\"symbol not found\"), ()=>`The Prisma engines are not compatible with your system ${e1.platformInfo.originalDistro} on (${e1.platformInfo.archFromUname}) which uses the \\`${e1.platformInfo.binaryTarget}\\` binaryTarget by default. ${i1}`).otherwise(()=>`The Prisma engines do not seem to be compatible with your system. ${i1}`);\n    return `${o1}\n${s1}\n\nDetails: ${t1.message}`;\n}\nvar or = F(__webpack_require__(/*! path */ \"path\"));\nfunction Li(e1) {\n    return or.default.sep === or.default.posix.sep ? e1 : e1.split(or.default.sep).join(or.default.posix.sep);\n}\nvar Ks = F($i());\nfunction Bi(e1) {\n    return String(new qi(e1));\n}\nvar qi = class {\n    constructor(t1){\n        this.config = t1;\n    }\n    toString() {\n        let { config: t1 } = this, r1 = t1.provider.fromEnvVar ? `env(\"${t1.provider.fromEnvVar}\")` : t1.provider.value, n1 = JSON.parse(JSON.stringify({\n            provider: r1,\n            binaryTargets: Nc(t1.binaryTargets)\n        }));\n        return `generator ${t1.name} {\n${(0, Ks.default)(Lc(n1), 2)}\n}`;\n    }\n};\nfunction Nc(e1) {\n    let t1;\n    if (e1.length > 0) {\n        let r1 = e1.find((n1)=>n1.fromEnvVar !== null);\n        r1 ? t1 = `env(\"${r1.fromEnvVar}\")` : t1 = e1.map((n1)=>n1.native ? \"native\" : n1.value);\n    } else t1 = void 0;\n    return t1;\n}\nfunction Lc(e1) {\n    let t1 = Object.keys(e1).reduce((r1, n1)=>Math.max(r1, n1.length), 0);\n    return Object.entries(e1).map(([r1, n1])=>`${r1.padEnd(t1)} = ${$c(n1)}`).join(`\n`);\n}\nfunction $c(e1) {\n    return JSON.parse(JSON.stringify(e1, (t1, r1)=>Array.isArray(r1) ? `[${r1.map((n1)=>JSON.stringify(n1)).join(\", \")}]` : JSON.stringify(r1)));\n}\nvar ar = {};\n_t(ar, {\n    error: ()=>jc,\n    info: ()=>Bc,\n    log: ()=>qc,\n    query: ()=>Vc,\n    should: ()=>Qs,\n    tags: ()=>sr,\n    warn: ()=>ji\n});\nvar sr = {\n    error: ve(\"prisma:error\"),\n    warn: Re(\"prisma:warn\"),\n    info: We(\"prisma:info\"),\n    query: Mt(\"prisma:query\")\n}, Qs = {\n    warn: ()=>!process.env.PRISMA_DISABLE_WARNINGS\n};\nfunction qc(...e1) {\n    console.log(...e1);\n}\nfunction ji(e1, ...t1) {\n    Qs.warn() && console.warn(`${sr.warn} ${e1}`, ...t1);\n}\nfunction Bc(e1, ...t1) {\n    console.info(`${sr.info} ${e1}`, ...t1);\n}\nfunction jc(e1, ...t1) {\n    console.error(`${sr.error} ${e1}`, ...t1);\n}\nfunction Vc(e1, ...t1) {\n    console.log(`${sr.query} ${e1}`, ...t1);\n}\nfunction dn(e1, t1) {\n    if (!e1) throw new Error(`${t1}. This should never happen. If you see this error, please, open an issue at https://pris.ly/prisma-prisma-bug-report`);\n}\nfunction yt(e1, t1) {\n    throw new Error(t1);\n}\nfunction Ui(e1, t1) {\n    return Object.prototype.hasOwnProperty.call(e1, t1);\n}\nvar Ki = (e1, t1)=>e1.reduce((r1, n1)=>(r1[t1(n1)] = n1, r1), {});\nfunction Ot(e1, t1) {\n    let r1 = {};\n    for (let n1 of Object.keys(e1))r1[n1] = t1(e1[n1], n1);\n    return r1;\n}\nfunction Qi(e1, t1) {\n    if (e1.length === 0) return;\n    let r1 = e1[0];\n    for(let n1 = 1; n1 < e1.length; n1++)t1(r1, e1[n1]) < 0 && (r1 = e1[n1]);\n    return r1;\n}\nfunction v(e1, t1) {\n    Object.defineProperty(e1, \"name\", {\n        value: t1,\n        configurable: !0\n    });\n}\nvar zs = new Set, lr = (e1, t1, ...r1)=>{\n    zs.has(e1) || (zs.add(e1), ji(t1, ...r1));\n};\nvar H = class extends Error {\n    constructor(t1, { code: r1, clientVersion: n1, meta: i1, batchRequestIdx: o1 }){\n        super(t1), this.name = \"PrismaClientKnownRequestError\", this.code = r1, this.clientVersion = n1, this.meta = i1, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: o1,\n            enumerable: !1,\n            writable: !0\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientKnownRequestError\";\n    }\n};\nv(H, \"PrismaClientKnownRequestError\");\nvar Ve = class extends H {\n    constructor(t1, r1){\n        super(t1, {\n            code: \"P2025\",\n            clientVersion: r1\n        }), this.name = \"NotFoundError\";\n    }\n};\nv(Ve, \"NotFoundError\");\nvar k = class e extends Error {\n    constructor(t1, r1, n1){\n        super(t1), this.name = \"PrismaClientInitializationError\", this.clientVersion = r1, this.errorCode = n1, Error.captureStackTrace(e);\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientInitializationError\";\n    }\n};\nv(k, \"PrismaClientInitializationError\");\nvar be = class extends Error {\n    constructor(t1, r1){\n        super(t1), this.name = \"PrismaClientRustPanicError\", this.clientVersion = r1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientRustPanicError\";\n    }\n};\nv(be, \"PrismaClientRustPanicError\");\nvar W = class extends Error {\n    constructor(t1, { clientVersion: r1, batchRequestIdx: n1 }){\n        super(t1), this.name = \"PrismaClientUnknownRequestError\", this.clientVersion = r1, Object.defineProperty(this, \"batchRequestIdx\", {\n            value: n1,\n            writable: !0,\n            enumerable: !1\n        });\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientUnknownRequestError\";\n    }\n};\nv(W, \"PrismaClientUnknownRequestError\");\nvar se = class extends Error {\n    constructor(r1, { clientVersion: n1 }){\n        super(r1);\n        this.name = \"PrismaClientValidationError\";\n        this.clientVersion = n1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientValidationError\";\n    }\n};\nv(se, \"PrismaClientValidationError\");\nvar Dt = class {\n    constructor(t1){\n        this._engine = t1;\n    }\n    prometheus(t1) {\n        return this._engine.metrics({\n            format: \"prometheus\",\n            ...t1\n        });\n    }\n    json(t1) {\n        return this._engine.metrics({\n            format: \"json\",\n            ...t1\n        });\n    }\n};\nfunction cr(e1) {\n    let t1;\n    return {\n        get () {\n            return t1 || (t1 = {\n                value: e1()\n            }), t1.value;\n        }\n    };\n}\nfunction Ys(e1, t1) {\n    let r1 = cr(()=>Kc(t1));\n    Object.defineProperty(e1, \"dmmf\", {\n        get: ()=>r1.get()\n    });\n}\nfunction Kc(e1) {\n    return {\n        datamodel: {\n            models: Ji(e1.models),\n            enums: Ji(e1.enums),\n            types: Ji(e1.types)\n        }\n    };\n}\nfunction Ji(e1) {\n    return Object.entries(e1).map(([t1, r1])=>({\n            name: t1,\n            ...r1\n        }));\n}\nvar Qc = [\n    \"$connect\",\n    \"$disconnect\",\n    \"$on\",\n    \"$transaction\",\n    \"$use\",\n    \"$extends\"\n], Gi = Qc;\nvar Jc = [\n    \"JsonNullValueInput\",\n    \"NullableJsonNullValueInput\",\n    \"JsonNullValueFilter\"\n], fn = Symbol(), Hi = new WeakMap, ke = class {\n    constructor(t1){\n        t1 === fn ? Hi.set(this, `Prisma.${this._getName()}`) : Hi.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);\n    }\n    _getName() {\n        return this.constructor.name;\n    }\n    toString() {\n        return Hi.get(this);\n    }\n}, pr = class extends ke {\n    _getNamespace() {\n        return \"NullTypes\";\n    }\n}, dr = class extends pr {\n};\nWi(dr, \"DbNull\");\nvar mr = class extends pr {\n};\nWi(mr, \"JsonNull\");\nvar fr = class extends pr {\n};\nWi(fr, \"AnyNull\");\nvar gn = {\n    classes: {\n        DbNull: dr,\n        JsonNull: mr,\n        AnyNull: fr\n    },\n    instances: {\n        DbNull: new dr(fn),\n        JsonNull: new mr(fn),\n        AnyNull: new fr(fn)\n    }\n};\nfunction Wi(e1, t1) {\n    Object.defineProperty(e1, \"name\", {\n        value: t1,\n        configurable: !0\n    });\n}\nfunction gr(e1) {\n    return {\n        ok: !1,\n        error: e1,\n        map () {\n            return gr(e1);\n        },\n        flatMap () {\n            return gr(e1);\n        }\n    };\n}\nvar zi = class {\n    constructor(){\n        this.registeredErrors = [];\n    }\n    consumeError(t1) {\n        return this.registeredErrors[t1];\n    }\n    registerNewError(t1) {\n        let r1 = 0;\n        for(; this.registeredErrors[r1] !== void 0;)r1++;\n        return this.registeredErrors[r1] = {\n            error: t1\n        }, r1;\n    }\n}, Yi = (e1)=>{\n    let t1 = new zi, r1 = ht(t1, e1.startTransaction.bind(e1)), n1 = {\n        errorRegistry: t1,\n        queryRaw: ht(t1, e1.queryRaw.bind(e1)),\n        executeRaw: ht(t1, e1.executeRaw.bind(e1)),\n        provider: e1.provider,\n        startTransaction: async (...i1)=>(await r1(...i1)).map((s1)=>Gc(t1, s1))\n    };\n    return e1.getConnectionInfo && (n1.getConnectionInfo = Hc(t1, e1.getConnectionInfo.bind(e1))), n1;\n}, Gc = (e1, t1)=>({\n        provider: t1.provider,\n        options: t1.options,\n        queryRaw: ht(e1, t1.queryRaw.bind(t1)),\n        executeRaw: ht(e1, t1.executeRaw.bind(t1)),\n        commit: ht(e1, t1.commit.bind(t1)),\n        rollback: ht(e1, t1.rollback.bind(t1))\n    });\nfunction ht(e1, t1) {\n    return async (...r1)=>{\n        try {\n            return await t1(...r1);\n        } catch (n1) {\n            let i1 = e1.registerNewError(n1);\n            return gr({\n                kind: \"GenericJs\",\n                id: i1\n            });\n        }\n    };\n}\nfunction Hc(e1, t1) {\n    return (...r1)=>{\n        try {\n            return t1(...r1);\n        } catch (n1) {\n            let i1 = e1.registerNewError(n1);\n            return gr({\n                kind: \"GenericJs\",\n                id: i1\n            });\n        }\n    };\n}\nvar bu = __webpack_require__(/*! async_hooks */ \"async_hooks\"), xu = __webpack_require__(/*! events */ \"events\"), wu = F(__webpack_require__(/*! fs */ \"fs\")), Ur = F(__webpack_require__(/*! path */ \"path\"));\nvar fe = class e {\n    constructor(t1, r1){\n        if (t1.length - 1 !== r1.length) throw t1.length === 0 ? new TypeError(\"Expected at least 1 string\") : new TypeError(`Expected ${t1.length} strings to have ${t1.length - 1} values`);\n        let n1 = r1.reduce((s1, a1)=>s1 + (a1 instanceof e ? a1.values.length : 1), 0);\n        this.values = new Array(n1), this.strings = new Array(n1 + 1), this.strings[0] = t1[0];\n        let i1 = 0, o1 = 0;\n        for(; i1 < r1.length;){\n            let s1 = r1[i1++], a1 = t1[i1];\n            if (s1 instanceof e) {\n                this.strings[o1] += s1.strings[0];\n                let l1 = 0;\n                for(; l1 < s1.values.length;)this.values[o1++] = s1.values[l1++], this.strings[o1] = s1.strings[l1];\n                this.strings[o1] += a1;\n            } else this.values[o1++] = s1, this.strings[o1] = a1;\n        }\n    }\n    get text() {\n        let t1 = this.strings.length, r1 = 1, n1 = this.strings[0];\n        for(; r1 < t1;)n1 += `$${r1}${this.strings[r1++]}`;\n        return n1;\n    }\n    get sql() {\n        let t1 = this.strings.length, r1 = 1, n1 = this.strings[0];\n        for(; r1 < t1;)n1 += `?${this.strings[r1++]}`;\n        return n1;\n    }\n    get statement() {\n        let t1 = this.strings.length, r1 = 1, n1 = this.strings[0];\n        for(; r1 < t1;)n1 += `:${r1}${this.strings[r1++]}`;\n        return n1;\n    }\n    inspect() {\n        return {\n            text: this.text,\n            sql: this.sql,\n            values: this.values\n        };\n    }\n};\nfunction Zs(e1, t1 = \",\", r1 = \"\", n1 = \"\") {\n    if (e1.length === 0) throw new TypeError(\"Expected `join([])` to be called with an array of multiple elements, but got an empty array\");\n    return new fe([\n        r1,\n        ...Array(e1.length - 1).fill(t1),\n        n1\n    ], e1);\n}\nfunction Zi(e1) {\n    return new fe([\n        e1\n    ], []);\n}\nvar Xs = Zi(\"\");\nfunction Xi(e1, ...t1) {\n    return new fe(e1, t1);\n}\nfunction yr(e1) {\n    return {\n        getKeys () {\n            return Object.keys(e1);\n        },\n        getPropertyValue (t1) {\n            return e1[t1];\n        }\n    };\n}\nfunction ce(e1, t1) {\n    return {\n        getKeys () {\n            return [\n                e1\n            ];\n        },\n        getPropertyValue () {\n            return t1();\n        }\n    };\n}\nvar Fe = class {\n    constructor(){\n        this._map = new Map;\n    }\n    get(t1) {\n        return this._map.get(t1)?.value;\n    }\n    set(t1, r1) {\n        this._map.set(t1, {\n            value: r1\n        });\n    }\n    getOrCreate(t1, r1) {\n        let n1 = this._map.get(t1);\n        if (n1) return n1.value;\n        let i1 = r1();\n        return this.set(t1, i1), i1;\n    }\n};\nfunction bt(e1) {\n    let t1 = new Fe;\n    return {\n        getKeys () {\n            return e1.getKeys();\n        },\n        getPropertyValue (r1) {\n            return t1.getOrCreate(r1, ()=>e1.getPropertyValue(r1));\n        },\n        getPropertyDescriptor (r1) {\n            return e1.getPropertyDescriptor?.(r1);\n        }\n    };\n}\nvar ra = __webpack_require__(/*! util */ \"util\");\nvar yn = {\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n};\nfunction hn(e1) {\n    let t1 = new Set(e1);\n    return {\n        getOwnPropertyDescriptor: ()=>yn,\n        has: (r1, n1)=>t1.has(n1),\n        set: (r1, n1, i1)=>t1.add(n1) && Reflect.set(r1, n1, i1),\n        ownKeys: ()=>[\n                ...t1\n            ]\n    };\n}\nvar ea = Symbol.for(\"nodejs.util.inspect.custom\");\nfunction Oe(e1, t1) {\n    let r1 = Wc(t1), n1 = new Set, i1 = new Proxy(e1, {\n        get (o1, s1) {\n            if (n1.has(s1)) return o1[s1];\n            let a1 = r1.get(s1);\n            return a1 ? a1.getPropertyValue(s1) : o1[s1];\n        },\n        has (o1, s1) {\n            if (n1.has(s1)) return !0;\n            let a1 = r1.get(s1);\n            return a1 ? a1.has?.(s1) ?? !0 : Reflect.has(o1, s1);\n        },\n        ownKeys (o1) {\n            let s1 = ta(Reflect.ownKeys(o1), r1), a1 = ta(Array.from(r1.keys()), r1);\n            return [\n                ...new Set([\n                    ...s1,\n                    ...a1,\n                    ...n1\n                ])\n            ];\n        },\n        set (o1, s1, a1) {\n            return r1.get(s1)?.getPropertyDescriptor?.(s1)?.writable === !1 ? !1 : (n1.add(s1), Reflect.set(o1, s1, a1));\n        },\n        getOwnPropertyDescriptor (o1, s1) {\n            let a1 = Reflect.getOwnPropertyDescriptor(o1, s1);\n            if (a1 && !a1.configurable) return a1;\n            let l1 = r1.get(s1);\n            return l1 ? l1.getPropertyDescriptor ? {\n                ...yn,\n                ...l1?.getPropertyDescriptor(s1)\n            } : yn : a1;\n        },\n        defineProperty (o1, s1, a1) {\n            return n1.add(s1), Reflect.defineProperty(o1, s1, a1);\n        }\n    });\n    return i1[ea] = function(o1, s1, a1 = ra.inspect) {\n        let l1 = {\n            ...this\n        };\n        return delete l1[ea], a1(l1, s1);\n    }, i1;\n}\nfunction Wc(e1) {\n    let t1 = new Map;\n    for (let r1 of e1){\n        let n1 = r1.getKeys();\n        for (let i1 of n1)t1.set(i1, r1);\n    }\n    return t1;\n}\nfunction ta(e1, t1) {\n    return e1.filter((r1)=>t1.get(r1)?.has?.(r1) ?? !0);\n}\nfunction hr(e1) {\n    return {\n        getKeys () {\n            return e1;\n        },\n        has () {\n            return !1;\n        },\n        getPropertyValue () {}\n    };\n}\nvar Nt = class {\n    constructor(t1 = 0, r1){\n        this.context = r1;\n        this.lines = [];\n        this.currentLine = \"\";\n        this.currentIndent = 0;\n        this.currentIndent = t1;\n    }\n    write(t1) {\n        return typeof t1 == \"string\" ? this.currentLine += t1 : t1.write(this), this;\n    }\n    writeJoined(t1, r1) {\n        let n1 = r1.length - 1;\n        for(let i1 = 0; i1 < r1.length; i1++)this.write(r1[i1]), i1 !== n1 && this.write(t1);\n        return this;\n    }\n    writeLine(t1) {\n        return this.write(t1).newLine();\n    }\n    newLine() {\n        this.lines.push(this.indentedCurrentLine()), this.currentLine = \"\", this.marginSymbol = void 0;\n        let t1 = this.afterNextNewLineCallback;\n        return this.afterNextNewLineCallback = void 0, t1?.(), this;\n    }\n    withIndent(t1) {\n        return this.indent(), t1(this), this.unindent(), this;\n    }\n    afterNextNewline(t1) {\n        return this.afterNextNewLineCallback = t1, this;\n    }\n    indent() {\n        return this.currentIndent++, this;\n    }\n    unindent() {\n        return this.currentIndent > 0 && this.currentIndent--, this;\n    }\n    addMarginSymbol(t1) {\n        return this.marginSymbol = t1, this;\n    }\n    toString() {\n        return this.lines.concat(this.indentedCurrentLine()).join(`\n`);\n    }\n    getCurrentLineLength() {\n        return this.currentLine.length;\n    }\n    indentedCurrentLine() {\n        let t1 = this.currentLine.padStart(this.currentLine.length + 2 * this.currentIndent);\n        return this.marginSymbol ? this.marginSymbol + t1.slice(1) : t1;\n    }\n};\nfunction Lt(e1) {\n    return e1 instanceof Date || Object.prototype.toString.call(e1) === \"[object Date]\";\n}\nfunction bn(e1) {\n    return e1.toString() !== \"Invalid Date\";\n}\nvar $t = 9e15, rt = 1e9, eo = \"0123456789abcdef\", wn = \"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\", En = \"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\", to = {\n    precision: 20,\n    rounding: 4,\n    modulo: 1,\n    toExpNeg: -7,\n    toExpPos: 21,\n    minE: -$t,\n    maxE: $t,\n    crypto: !1\n}, sa, Ue, T = !0, vn = \"[DecimalError] \", tt = vn + \"Invalid argument: \", aa = vn + \"Precision limit exceeded\", la = vn + \"crypto unavailable\", ua = \"[object Decimal]\", ae = Math.floor, J = Math.pow, zc = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i, Yc = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i, Zc = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i, ca = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i, Ce = 1e7, P = 7, Xc = 9007199254740991, ep = wn.length - 1, ro = En.length - 1, m = {\n    toStringTag: ua\n};\nm.absoluteValue = m.abs = function() {\n    var e1 = new this.constructor(this);\n    return e1.s < 0 && (e1.s = 1), x(e1);\n};\nm.ceil = function() {\n    return x(new this.constructor(this), this.e + 1, 2);\n};\nm.clampedTo = m.clamp = function(e1, t1) {\n    var r1, n1 = this, i1 = n1.constructor;\n    if (e1 = new i1(e1), t1 = new i1(t1), !e1.s || !t1.s) return new i1(NaN);\n    if (e1.gt(t1)) throw Error(tt + t1);\n    return r1 = n1.cmp(e1), r1 < 0 ? e1 : n1.cmp(t1) > 0 ? t1 : new i1(n1);\n};\nm.comparedTo = m.cmp = function(e1) {\n    var t1, r1, n1, i1, o1 = this, s1 = o1.d, a1 = (e1 = new o1.constructor(e1)).d, l1 = o1.s, u1 = e1.s;\n    if (!s1 || !a1) return !l1 || !u1 ? NaN : l1 !== u1 ? l1 : s1 === a1 ? 0 : !s1 ^ l1 < 0 ? 1 : -1;\n    if (!s1[0] || !a1[0]) return s1[0] ? l1 : a1[0] ? -u1 : 0;\n    if (l1 !== u1) return l1;\n    if (o1.e !== e1.e) return o1.e > e1.e ^ l1 < 0 ? 1 : -1;\n    for(n1 = s1.length, i1 = a1.length, t1 = 0, r1 = n1 < i1 ? n1 : i1; t1 < r1; ++t1)if (s1[t1] !== a1[t1]) return s1[t1] > a1[t1] ^ l1 < 0 ? 1 : -1;\n    return n1 === i1 ? 0 : n1 > i1 ^ l1 < 0 ? 1 : -1;\n};\nm.cosine = m.cos = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.d ? r1.d[0] ? (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + Math.max(r1.e, r1.sd()) + P, n1.rounding = 1, r1 = tp(n1, ga(n1, r1)), n1.precision = e1, n1.rounding = t1, x(Ue == 2 || Ue == 3 ? r1.neg() : r1, e1, t1, !0)) : new n1(1) : new n1(NaN);\n};\nm.cubeRoot = m.cbrt = function() {\n    var e1, t1, r1, n1, i1, o1, s1, a1, l1, u1, c1 = this, p1 = c1.constructor;\n    if (!c1.isFinite() || c1.isZero()) return new p1(c1);\n    for(T = !1, o1 = c1.s * J(c1.s * c1, 1 / 3), !o1 || Math.abs(o1) == 1 / 0 ? (r1 = te(c1.d), e1 = c1.e, (o1 = (e1 - r1.length + 1) % 3) && (r1 += o1 == 1 || o1 == -2 ? \"0\" : \"00\"), o1 = J(r1, 1 / 3), e1 = ae((e1 + 1) / 3) - (e1 % 3 == (e1 < 0 ? -1 : 2)), o1 == 1 / 0 ? r1 = \"5e\" + e1 : (r1 = o1.toExponential(), r1 = r1.slice(0, r1.indexOf(\"e\") + 1) + e1), n1 = new p1(r1), n1.s = c1.s) : n1 = new p1(o1.toString()), s1 = (e1 = p1.precision) + 3;;)if (a1 = n1, l1 = a1.times(a1).times(a1), u1 = l1.plus(c1), n1 = L(u1.plus(c1).times(a1), u1.plus(l1), s1 + 2, 1), te(a1.d).slice(0, s1) === (r1 = te(n1.d)).slice(0, s1)) if (r1 = r1.slice(s1 - 3, s1 + 1), r1 == \"9999\" || !i1 && r1 == \"4999\") {\n        if (!i1 && (x(a1, e1 + 1, 0), a1.times(a1).times(a1).eq(c1))) {\n            n1 = a1;\n            break;\n        }\n        s1 += 4, i1 = 1;\n    } else {\n        (!+r1 || !+r1.slice(1) && r1.charAt(0) == \"5\") && (x(n1, e1 + 1, 1), t1 = !n1.times(n1).times(n1).eq(c1));\n        break;\n    }\n    return T = !0, x(n1, e1, p1.rounding, t1);\n};\nm.decimalPlaces = m.dp = function() {\n    var e1, t1 = this.d, r1 = NaN;\n    if (t1) {\n        if (e1 = t1.length - 1, r1 = (e1 - ae(this.e / P)) * P, e1 = t1[e1], e1) for(; e1 % 10 == 0; e1 /= 10)r1--;\n        r1 < 0 && (r1 = 0);\n    }\n    return r1;\n};\nm.dividedBy = m.div = function(e1) {\n    return L(this, new this.constructor(e1));\n};\nm.dividedToIntegerBy = m.divToInt = function(e1) {\n    var t1 = this, r1 = t1.constructor;\n    return x(L(t1, new r1(e1), 0, 1, 1), r1.precision, r1.rounding);\n};\nm.equals = m.eq = function(e1) {\n    return this.cmp(e1) === 0;\n};\nm.floor = function() {\n    return x(new this.constructor(this), this.e + 1, 3);\n};\nm.greaterThan = m.gt = function(e1) {\n    return this.cmp(e1) > 0;\n};\nm.greaterThanOrEqualTo = m.gte = function(e1) {\n    var t1 = this.cmp(e1);\n    return t1 == 1 || t1 === 0;\n};\nm.hyperbolicCosine = m.cosh = function() {\n    var e1, t1, r1, n1, i1, o1 = this, s1 = o1.constructor, a1 = new s1(1);\n    if (!o1.isFinite()) return new s1(o1.s ? 1 / 0 : NaN);\n    if (o1.isZero()) return a1;\n    r1 = s1.precision, n1 = s1.rounding, s1.precision = r1 + Math.max(o1.e, o1.sd()) + 4, s1.rounding = 1, i1 = o1.d.length, i1 < 32 ? (e1 = Math.ceil(i1 / 3), t1 = (1 / _n(4, e1)).toString()) : (e1 = 16, t1 = \"2.3283064365386962890625e-10\"), o1 = qt(s1, 1, o1.times(t1), new s1(1), !0);\n    for(var l1, u1 = e1, c1 = new s1(8); u1--;)l1 = o1.times(o1), o1 = a1.minus(l1.times(c1.minus(l1.times(c1))));\n    return x(o1, s1.precision = r1, s1.rounding = n1, !0);\n};\nm.hyperbolicSine = m.sinh = function() {\n    var e1, t1, r1, n1, i1 = this, o1 = i1.constructor;\n    if (!i1.isFinite() || i1.isZero()) return new o1(i1);\n    if (t1 = o1.precision, r1 = o1.rounding, o1.precision = t1 + Math.max(i1.e, i1.sd()) + 4, o1.rounding = 1, n1 = i1.d.length, n1 < 3) i1 = qt(o1, 2, i1, i1, !0);\n    else {\n        e1 = 1.4 * Math.sqrt(n1), e1 = e1 > 16 ? 16 : e1 | 0, i1 = i1.times(1 / _n(5, e1)), i1 = qt(o1, 2, i1, i1, !0);\n        for(var s1, a1 = new o1(5), l1 = new o1(16), u1 = new o1(20); e1--;)s1 = i1.times(i1), i1 = i1.times(a1.plus(s1.times(l1.times(s1).plus(u1))));\n    }\n    return o1.precision = t1, o1.rounding = r1, x(i1, t1, r1, !0);\n};\nm.hyperbolicTangent = m.tanh = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.isFinite() ? r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + 7, n1.rounding = 1, L(r1.sinh(), r1.cosh(), n1.precision = e1, n1.rounding = t1)) : new n1(r1.s);\n};\nm.inverseCosine = m.acos = function() {\n    var e1, t1 = this, r1 = t1.constructor, n1 = t1.abs().cmp(1), i1 = r1.precision, o1 = r1.rounding;\n    return n1 !== -1 ? n1 === 0 ? t1.isNeg() ? _e(r1, i1, o1) : new r1(0) : new r1(NaN) : t1.isZero() ? _e(r1, i1 + 4, o1).times(.5) : (r1.precision = i1 + 6, r1.rounding = 1, t1 = t1.asin(), e1 = _e(r1, i1 + 4, o1).times(.5), r1.precision = i1, r1.rounding = o1, e1.minus(t1));\n};\nm.inverseHyperbolicCosine = m.acosh = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.lte(1) ? new n1(r1.eq(1) ? 0 : NaN) : r1.isFinite() ? (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + Math.max(Math.abs(r1.e), r1.sd()) + 4, n1.rounding = 1, T = !1, r1 = r1.times(r1).minus(1).sqrt().plus(r1), T = !0, n1.precision = e1, n1.rounding = t1, r1.ln()) : new n1(r1);\n};\nm.inverseHyperbolicSine = m.asinh = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return !r1.isFinite() || r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + 2 * Math.max(Math.abs(r1.e), r1.sd()) + 6, n1.rounding = 1, T = !1, r1 = r1.times(r1).plus(1).sqrt().plus(r1), T = !0, n1.precision = e1, n1.rounding = t1, r1.ln());\n};\nm.inverseHyperbolicTangent = m.atanh = function() {\n    var e1, t1, r1, n1, i1 = this, o1 = i1.constructor;\n    return i1.isFinite() ? i1.e >= 0 ? new o1(i1.abs().eq(1) ? i1.s / 0 : i1.isZero() ? i1 : NaN) : (e1 = o1.precision, t1 = o1.rounding, n1 = i1.sd(), Math.max(n1, e1) < 2 * -i1.e - 1 ? x(new o1(i1), e1, t1, !0) : (o1.precision = r1 = n1 - i1.e, i1 = L(i1.plus(1), new o1(1).minus(i1), r1 + e1, 1), o1.precision = e1 + 4, o1.rounding = 1, i1 = i1.ln(), o1.precision = e1, o1.rounding = t1, i1.times(.5))) : new o1(NaN);\n};\nm.inverseSine = m.asin = function() {\n    var e1, t1, r1, n1, i1 = this, o1 = i1.constructor;\n    return i1.isZero() ? new o1(i1) : (t1 = i1.abs().cmp(1), r1 = o1.precision, n1 = o1.rounding, t1 !== -1 ? t1 === 0 ? (e1 = _e(o1, r1 + 4, n1).times(.5), e1.s = i1.s, e1) : new o1(NaN) : (o1.precision = r1 + 6, o1.rounding = 1, i1 = i1.div(new o1(1).minus(i1.times(i1)).sqrt().plus(1)).atan(), o1.precision = r1, o1.rounding = n1, i1.times(2)));\n};\nm.inverseTangent = m.atan = function() {\n    var e1, t1, r1, n1, i1, o1, s1, a1, l1, u1 = this, c1 = u1.constructor, p1 = c1.precision, d1 = c1.rounding;\n    if (u1.isFinite()) {\n        if (u1.isZero()) return new c1(u1);\n        if (u1.abs().eq(1) && p1 + 4 <= ro) return s1 = _e(c1, p1 + 4, d1).times(.25), s1.s = u1.s, s1;\n    } else {\n        if (!u1.s) return new c1(NaN);\n        if (p1 + 4 <= ro) return s1 = _e(c1, p1 + 4, d1).times(.5), s1.s = u1.s, s1;\n    }\n    for(c1.precision = a1 = p1 + 10, c1.rounding = 1, r1 = Math.min(28, a1 / P + 2 | 0), e1 = r1; e1; --e1)u1 = u1.div(u1.times(u1).plus(1).sqrt().plus(1));\n    for(T = !1, t1 = Math.ceil(a1 / P), n1 = 1, l1 = u1.times(u1), s1 = new c1(u1), i1 = u1; e1 !== -1;)if (i1 = i1.times(l1), o1 = s1.minus(i1.div(n1 += 2)), i1 = i1.times(l1), s1 = o1.plus(i1.div(n1 += 2)), s1.d[t1] !== void 0) for(e1 = t1; s1.d[e1] === o1.d[e1] && e1--;);\n    return r1 && (s1 = s1.times(2 << r1 - 1)), T = !0, x(s1, c1.precision = p1, c1.rounding = d1, !0);\n};\nm.isFinite = function() {\n    return !!this.d;\n};\nm.isInteger = m.isInt = function() {\n    return !!this.d && ae(this.e / P) > this.d.length - 2;\n};\nm.isNaN = function() {\n    return !this.s;\n};\nm.isNegative = m.isNeg = function() {\n    return this.s < 0;\n};\nm.isPositive = m.isPos = function() {\n    return this.s > 0;\n};\nm.isZero = function() {\n    return !!this.d && this.d[0] === 0;\n};\nm.lessThan = m.lt = function(e1) {\n    return this.cmp(e1) < 0;\n};\nm.lessThanOrEqualTo = m.lte = function(e1) {\n    return this.cmp(e1) < 1;\n};\nm.logarithm = m.log = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1 = this, c1 = u1.constructor, p1 = c1.precision, d1 = c1.rounding, f1 = 5;\n    if (e1 == null) e1 = new c1(10), t1 = !0;\n    else {\n        if (e1 = new c1(e1), r1 = e1.d, e1.s < 0 || !r1 || !r1[0] || e1.eq(1)) return new c1(NaN);\n        t1 = e1.eq(10);\n    }\n    if (r1 = u1.d, u1.s < 0 || !r1 || !r1[0] || u1.eq(1)) return new c1(r1 && !r1[0] ? -1 / 0 : u1.s != 1 ? NaN : r1 ? 0 : 1 / 0);\n    if (t1) if (r1.length > 1) o1 = !0;\n    else {\n        for(i1 = r1[0]; i1 % 10 === 0;)i1 /= 10;\n        o1 = i1 !== 1;\n    }\n    if (T = !1, a1 = p1 + f1, s1 = et(u1, a1), n1 = t1 ? Pn(c1, a1 + 10) : et(e1, a1), l1 = L(s1, n1, a1, 1), br(l1.d, i1 = p1, d1)) do if (a1 += 10, s1 = et(u1, a1), n1 = t1 ? Pn(c1, a1 + 10) : et(e1, a1), l1 = L(s1, n1, a1, 1), !o1) {\n        +te(l1.d).slice(i1 + 1, i1 + 15) + 1 == 1e14 && (l1 = x(l1, p1 + 1, 0));\n        break;\n    }\n    while (br(l1.d, i1 += 10, d1));\n    return T = !0, x(l1, p1, d1);\n};\nm.minus = m.sub = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = this, y1 = f1.constructor;\n    if (e1 = new y1(e1), !f1.d || !e1.d) return !f1.s || !e1.s ? e1 = new y1(NaN) : f1.d ? e1.s = -e1.s : e1 = new y1(e1.d || f1.s !== e1.s ? f1 : NaN), e1;\n    if (f1.s != e1.s) return e1.s = -e1.s, f1.plus(e1);\n    if (u1 = f1.d, d1 = e1.d, a1 = y1.precision, l1 = y1.rounding, !u1[0] || !d1[0]) {\n        if (d1[0]) e1.s = -e1.s;\n        else if (u1[0]) e1 = new y1(f1);\n        else return new y1(l1 === 3 ? -0 : 0);\n        return T ? x(e1, a1, l1) : e1;\n    }\n    if (r1 = ae(e1.e / P), c1 = ae(f1.e / P), u1 = u1.slice(), o1 = c1 - r1, o1) {\n        for(p1 = o1 < 0, p1 ? (t1 = u1, o1 = -o1, s1 = d1.length) : (t1 = d1, r1 = c1, s1 = u1.length), n1 = Math.max(Math.ceil(a1 / P), s1) + 2, o1 > n1 && (o1 = n1, t1.length = 1), t1.reverse(), n1 = o1; n1--;)t1.push(0);\n        t1.reverse();\n    } else {\n        for(n1 = u1.length, s1 = d1.length, p1 = n1 < s1, p1 && (s1 = n1), n1 = 0; n1 < s1; n1++)if (u1[n1] != d1[n1]) {\n            p1 = u1[n1] < d1[n1];\n            break;\n        }\n        o1 = 0;\n    }\n    for(p1 && (t1 = u1, u1 = d1, d1 = t1, e1.s = -e1.s), s1 = u1.length, n1 = d1.length - s1; n1 > 0; --n1)u1[s1++] = 0;\n    for(n1 = d1.length; n1 > o1;){\n        if (u1[--n1] < d1[n1]) {\n            for(i1 = n1; i1 && u1[--i1] === 0;)u1[i1] = Ce - 1;\n            --u1[i1], u1[n1] += Ce;\n        }\n        u1[n1] -= d1[n1];\n    }\n    for(; u1[--s1] === 0;)u1.pop();\n    for(; u1[0] === 0; u1.shift())--r1;\n    return u1[0] ? (e1.d = u1, e1.e = Tn(u1, r1), T ? x(e1, a1, l1) : e1) : new y1(l1 === 3 ? -0 : 0);\n};\nm.modulo = m.mod = function(e1) {\n    var t1, r1 = this, n1 = r1.constructor;\n    return e1 = new n1(e1), !r1.d || !e1.s || e1.d && !e1.d[0] ? new n1(NaN) : !e1.d || r1.d && !r1.d[0] ? x(new n1(r1), n1.precision, n1.rounding) : (T = !1, n1.modulo == 9 ? (t1 = L(r1, e1.abs(), 0, 3, 1), t1.s *= e1.s) : t1 = L(r1, e1, 0, n1.modulo, 1), t1 = t1.times(e1), T = !0, r1.minus(t1));\n};\nm.naturalExponential = m.exp = function() {\n    return no(this);\n};\nm.naturalLogarithm = m.ln = function() {\n    return et(this);\n};\nm.negated = m.neg = function() {\n    var e1 = new this.constructor(this);\n    return e1.s = -e1.s, x(e1);\n};\nm.plus = m.add = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1, p1 = this, d1 = p1.constructor;\n    if (e1 = new d1(e1), !p1.d || !e1.d) return !p1.s || !e1.s ? e1 = new d1(NaN) : p1.d || (e1 = new d1(e1.d || p1.s === e1.s ? p1 : NaN)), e1;\n    if (p1.s != e1.s) return e1.s = -e1.s, p1.minus(e1);\n    if (u1 = p1.d, c1 = e1.d, a1 = d1.precision, l1 = d1.rounding, !u1[0] || !c1[0]) return c1[0] || (e1 = new d1(p1)), T ? x(e1, a1, l1) : e1;\n    if (o1 = ae(p1.e / P), n1 = ae(e1.e / P), u1 = u1.slice(), i1 = o1 - n1, i1) {\n        for(i1 < 0 ? (r1 = u1, i1 = -i1, s1 = c1.length) : (r1 = c1, n1 = o1, s1 = u1.length), o1 = Math.ceil(a1 / P), s1 = o1 > s1 ? o1 + 1 : s1 + 1, i1 > s1 && (i1 = s1, r1.length = 1), r1.reverse(); i1--;)r1.push(0);\n        r1.reverse();\n    }\n    for(s1 = u1.length, i1 = c1.length, s1 - i1 < 0 && (i1 = s1, r1 = c1, c1 = u1, u1 = r1), t1 = 0; i1;)t1 = (u1[--i1] = u1[i1] + c1[i1] + t1) / Ce | 0, u1[i1] %= Ce;\n    for(t1 && (u1.unshift(t1), ++n1), s1 = u1.length; u1[--s1] == 0;)u1.pop();\n    return e1.d = u1, e1.e = Tn(u1, n1), T ? x(e1, a1, l1) : e1;\n};\nm.precision = m.sd = function(e1) {\n    var t1, r1 = this;\n    if (e1 !== void 0 && e1 !== !!e1 && e1 !== 1 && e1 !== 0) throw Error(tt + e1);\n    return r1.d ? (t1 = pa(r1.d), e1 && r1.e + 1 > t1 && (t1 = r1.e + 1)) : t1 = NaN, t1;\n};\nm.round = function() {\n    var e1 = this, t1 = e1.constructor;\n    return x(new t1(e1), e1.e + 1, t1.rounding);\n};\nm.sine = m.sin = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.isFinite() ? r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + Math.max(r1.e, r1.sd()) + P, n1.rounding = 1, r1 = np(n1, ga(n1, r1)), n1.precision = e1, n1.rounding = t1, x(Ue > 2 ? r1.neg() : r1, e1, t1, !0)) : new n1(NaN);\n};\nm.squareRoot = m.sqrt = function() {\n    var e1, t1, r1, n1, i1, o1, s1 = this, a1 = s1.d, l1 = s1.e, u1 = s1.s, c1 = s1.constructor;\n    if (u1 !== 1 || !a1 || !a1[0]) return new c1(!u1 || u1 < 0 && (!a1 || a1[0]) ? NaN : a1 ? s1 : 1 / 0);\n    for(T = !1, u1 = Math.sqrt(+s1), u1 == 0 || u1 == 1 / 0 ? (t1 = te(a1), (t1.length + l1) % 2 == 0 && (t1 += \"0\"), u1 = Math.sqrt(t1), l1 = ae((l1 + 1) / 2) - (l1 < 0 || l1 % 2), u1 == 1 / 0 ? t1 = \"5e\" + l1 : (t1 = u1.toExponential(), t1 = t1.slice(0, t1.indexOf(\"e\") + 1) + l1), n1 = new c1(t1)) : n1 = new c1(u1.toString()), r1 = (l1 = c1.precision) + 3;;)if (o1 = n1, n1 = o1.plus(L(s1, o1, r1 + 2, 1)).times(.5), te(o1.d).slice(0, r1) === (t1 = te(n1.d)).slice(0, r1)) if (t1 = t1.slice(r1 - 3, r1 + 1), t1 == \"9999\" || !i1 && t1 == \"4999\") {\n        if (!i1 && (x(o1, l1 + 1, 0), o1.times(o1).eq(s1))) {\n            n1 = o1;\n            break;\n        }\n        r1 += 4, i1 = 1;\n    } else {\n        (!+t1 || !+t1.slice(1) && t1.charAt(0) == \"5\") && (x(n1, l1 + 1, 1), e1 = !n1.times(n1).eq(s1));\n        break;\n    }\n    return T = !0, x(n1, l1, c1.rounding, e1);\n};\nm.tangent = m.tan = function() {\n    var e1, t1, r1 = this, n1 = r1.constructor;\n    return r1.isFinite() ? r1.isZero() ? new n1(r1) : (e1 = n1.precision, t1 = n1.rounding, n1.precision = e1 + 10, n1.rounding = 1, r1 = r1.sin(), r1.s = 1, r1 = L(r1, new n1(1).minus(r1.times(r1)).sqrt(), e1 + 10, 0), n1.precision = e1, n1.rounding = t1, x(Ue == 2 || Ue == 4 ? r1.neg() : r1, e1, t1, !0)) : new n1(NaN);\n};\nm.times = m.mul = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1 = this, p1 = c1.constructor, d1 = c1.d, f1 = (e1 = new p1(e1)).d;\n    if (e1.s *= c1.s, !d1 || !d1[0] || !f1 || !f1[0]) return new p1(!e1.s || d1 && !d1[0] && !f1 || f1 && !f1[0] && !d1 ? NaN : !d1 || !f1 ? e1.s / 0 : e1.s * 0);\n    for(r1 = ae(c1.e / P) + ae(e1.e / P), l1 = d1.length, u1 = f1.length, l1 < u1 && (o1 = d1, d1 = f1, f1 = o1, s1 = l1, l1 = u1, u1 = s1), o1 = [], s1 = l1 + u1, n1 = s1; n1--;)o1.push(0);\n    for(n1 = u1; --n1 >= 0;){\n        for(t1 = 0, i1 = l1 + n1; i1 > n1;)a1 = o1[i1] + f1[n1] * d1[i1 - n1 - 1] + t1, o1[i1--] = a1 % Ce | 0, t1 = a1 / Ce | 0;\n        o1[i1] = (o1[i1] + t1) % Ce | 0;\n    }\n    for(; !o1[--s1];)o1.pop();\n    return t1 ? ++r1 : o1.shift(), e1.d = o1, e1.e = Tn(o1, r1), T ? x(e1, p1.precision, p1.rounding) : e1;\n};\nm.toBinary = function(e1, t1) {\n    return oo(this, 2, e1, t1);\n};\nm.toDecimalPlaces = m.toDP = function(e1, t1) {\n    var r1 = this, n1 = r1.constructor;\n    return r1 = new n1(r1), e1 === void 0 ? r1 : (ge(e1, 0, rt), t1 === void 0 ? t1 = n1.rounding : ge(t1, 0, 8), x(r1, e1 + r1.e + 1, t1));\n};\nm.toExponential = function(e1, t1) {\n    var r1, n1 = this, i1 = n1.constructor;\n    return e1 === void 0 ? r1 = De(n1, !0) : (ge(e1, 0, rt), t1 === void 0 ? t1 = i1.rounding : ge(t1, 0, 8), n1 = x(new i1(n1), e1 + 1, t1), r1 = De(n1, !0, e1 + 1)), n1.isNeg() && !n1.isZero() ? \"-\" + r1 : r1;\n};\nm.toFixed = function(e1, t1) {\n    var r1, n1, i1 = this, o1 = i1.constructor;\n    return e1 === void 0 ? r1 = De(i1) : (ge(e1, 0, rt), t1 === void 0 ? t1 = o1.rounding : ge(t1, 0, 8), n1 = x(new o1(i1), e1 + i1.e + 1, t1), r1 = De(n1, !1, e1 + n1.e + 1)), i1.isNeg() && !i1.isZero() ? \"-\" + r1 : r1;\n};\nm.toFraction = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = this, y1 = f1.d, g1 = f1.constructor;\n    if (!y1) return new g1(f1);\n    if (u1 = r1 = new g1(1), n1 = l1 = new g1(0), t1 = new g1(n1), o1 = t1.e = pa(y1) - f1.e - 1, s1 = o1 % P, t1.d[0] = J(10, s1 < 0 ? P + s1 : s1), e1 == null) e1 = o1 > 0 ? t1 : u1;\n    else {\n        if (a1 = new g1(e1), !a1.isInt() || a1.lt(u1)) throw Error(tt + a1);\n        e1 = a1.gt(t1) ? o1 > 0 ? t1 : u1 : a1;\n    }\n    for(T = !1, a1 = new g1(te(y1)), c1 = g1.precision, g1.precision = o1 = y1.length * P * 2; p1 = L(a1, t1, 0, 1, 1), i1 = r1.plus(p1.times(n1)), i1.cmp(e1) != 1;)r1 = n1, n1 = i1, i1 = u1, u1 = l1.plus(p1.times(i1)), l1 = i1, i1 = t1, t1 = a1.minus(p1.times(i1)), a1 = i1;\n    return i1 = L(e1.minus(r1), n1, 0, 1, 1), l1 = l1.plus(i1.times(u1)), r1 = r1.plus(i1.times(n1)), l1.s = u1.s = f1.s, d1 = L(u1, n1, o1, 1).minus(f1).abs().cmp(L(l1, r1, o1, 1).minus(f1).abs()) < 1 ? [\n        u1,\n        n1\n    ] : [\n        l1,\n        r1\n    ], g1.precision = c1, T = !0, d1;\n};\nm.toHexadecimal = m.toHex = function(e1, t1) {\n    return oo(this, 16, e1, t1);\n};\nm.toNearest = function(e1, t1) {\n    var r1 = this, n1 = r1.constructor;\n    if (r1 = new n1(r1), e1 == null) {\n        if (!r1.d) return r1;\n        e1 = new n1(1), t1 = n1.rounding;\n    } else {\n        if (e1 = new n1(e1), t1 === void 0 ? t1 = n1.rounding : ge(t1, 0, 8), !r1.d) return e1.s ? r1 : e1;\n        if (!e1.d) return e1.s && (e1.s = r1.s), e1;\n    }\n    return e1.d[0] ? (T = !1, r1 = L(r1, e1, 0, t1, 1).times(e1), T = !0, x(r1)) : (e1.s = r1.s, r1 = e1), r1;\n};\nm.toNumber = function() {\n    return +this;\n};\nm.toOctal = function(e1, t1) {\n    return oo(this, 8, e1, t1);\n};\nm.toPower = m.pow = function(e1) {\n    var t1, r1, n1, i1, o1, s1, a1 = this, l1 = a1.constructor, u1 = +(e1 = new l1(e1));\n    if (!a1.d || !e1.d || !a1.d[0] || !e1.d[0]) return new l1(J(+a1, u1));\n    if (a1 = new l1(a1), a1.eq(1)) return a1;\n    if (n1 = l1.precision, o1 = l1.rounding, e1.eq(1)) return x(a1, n1, o1);\n    if (t1 = ae(e1.e / P), t1 >= e1.d.length - 1 && (r1 = u1 < 0 ? -u1 : u1) <= Xc) return i1 = da(l1, a1, r1, n1), e1.s < 0 ? new l1(1).div(i1) : x(i1, n1, o1);\n    if (s1 = a1.s, s1 < 0) {\n        if (t1 < e1.d.length - 1) return new l1(NaN);\n        if (e1.d[t1] & 1 || (s1 = 1), a1.e == 0 && a1.d[0] == 1 && a1.d.length == 1) return a1.s = s1, a1;\n    }\n    return r1 = J(+a1, u1), t1 = r1 == 0 || !isFinite(r1) ? ae(u1 * (Math.log(\"0.\" + te(a1.d)) / Math.LN10 + a1.e + 1)) : new l1(r1 + \"\").e, t1 > l1.maxE + 1 || t1 < l1.minE - 1 ? new l1(t1 > 0 ? s1 / 0 : 0) : (T = !1, l1.rounding = a1.s = 1, r1 = Math.min(12, (t1 + \"\").length), i1 = no(e1.times(et(a1, n1 + r1)), n1), i1.d && (i1 = x(i1, n1 + 5, 1), br(i1.d, n1, o1) && (t1 = n1 + 10, i1 = x(no(e1.times(et(a1, t1 + r1)), t1), t1 + 5, 1), +te(i1.d).slice(n1 + 1, n1 + 15) + 1 == 1e14 && (i1 = x(i1, n1 + 1, 0)))), i1.s = s1, T = !0, l1.rounding = o1, x(i1, n1, o1));\n};\nm.toPrecision = function(e1, t1) {\n    var r1, n1 = this, i1 = n1.constructor;\n    return e1 === void 0 ? r1 = De(n1, n1.e <= i1.toExpNeg || n1.e >= i1.toExpPos) : (ge(e1, 1, rt), t1 === void 0 ? t1 = i1.rounding : ge(t1, 0, 8), n1 = x(new i1(n1), e1, t1), r1 = De(n1, e1 <= n1.e || n1.e <= i1.toExpNeg, e1)), n1.isNeg() && !n1.isZero() ? \"-\" + r1 : r1;\n};\nm.toSignificantDigits = m.toSD = function(e1, t1) {\n    var r1 = this, n1 = r1.constructor;\n    return e1 === void 0 ? (e1 = n1.precision, t1 = n1.rounding) : (ge(e1, 1, rt), t1 === void 0 ? t1 = n1.rounding : ge(t1, 0, 8)), x(new n1(r1), e1, t1);\n};\nm.toString = function() {\n    var e1 = this, t1 = e1.constructor, r1 = De(e1, e1.e <= t1.toExpNeg || e1.e >= t1.toExpPos);\n    return e1.isNeg() && !e1.isZero() ? \"-\" + r1 : r1;\n};\nm.truncated = m.trunc = function() {\n    return x(new this.constructor(this), this.e + 1, 1);\n};\nm.valueOf = m.toJSON = function() {\n    var e1 = this, t1 = e1.constructor, r1 = De(e1, e1.e <= t1.toExpNeg || e1.e >= t1.toExpPos);\n    return e1.isNeg() ? \"-\" + r1 : r1;\n};\nfunction te(e1) {\n    var t1, r1, n1, i1 = e1.length - 1, o1 = \"\", s1 = e1[0];\n    if (i1 > 0) {\n        for(o1 += s1, t1 = 1; t1 < i1; t1++)n1 = e1[t1] + \"\", r1 = P - n1.length, r1 && (o1 += Xe(r1)), o1 += n1;\n        s1 = e1[t1], n1 = s1 + \"\", r1 = P - n1.length, r1 && (o1 += Xe(r1));\n    } else if (s1 === 0) return \"0\";\n    for(; s1 % 10 === 0;)s1 /= 10;\n    return o1 + s1;\n}\nfunction ge(e1, t1, r1) {\n    if (e1 !== ~~e1 || e1 < t1 || e1 > r1) throw Error(tt + e1);\n}\nfunction br(e1, t1, r1, n1) {\n    var i1, o1, s1, a1;\n    for(o1 = e1[0]; o1 >= 10; o1 /= 10)--t1;\n    return --t1 < 0 ? (t1 += P, i1 = 0) : (i1 = Math.ceil((t1 + 1) / P), t1 %= P), o1 = J(10, P - t1), a1 = e1[i1] % o1 | 0, n1 == null ? t1 < 3 ? (t1 == 0 ? a1 = a1 / 100 | 0 : t1 == 1 && (a1 = a1 / 10 | 0), s1 = r1 < 4 && a1 == 99999 || r1 > 3 && a1 == 49999 || a1 == 5e4 || a1 == 0) : s1 = (r1 < 4 && a1 + 1 == o1 || r1 > 3 && a1 + 1 == o1 / 2) && (e1[i1 + 1] / o1 / 100 | 0) == J(10, t1 - 2) - 1 || (a1 == o1 / 2 || a1 == 0) && (e1[i1 + 1] / o1 / 100 | 0) == 0 : t1 < 4 ? (t1 == 0 ? a1 = a1 / 1e3 | 0 : t1 == 1 ? a1 = a1 / 100 | 0 : t1 == 2 && (a1 = a1 / 10 | 0), s1 = (n1 || r1 < 4) && a1 == 9999 || !n1 && r1 > 3 && a1 == 4999) : s1 = ((n1 || r1 < 4) && a1 + 1 == o1 || !n1 && r1 > 3 && a1 + 1 == o1 / 2) && (e1[i1 + 1] / o1 / 1e3 | 0) == J(10, t1 - 3) - 1, s1;\n}\nfunction xn(e1, t1, r1) {\n    for(var n1, i1 = [\n        0\n    ], o1, s1 = 0, a1 = e1.length; s1 < a1;){\n        for(o1 = i1.length; o1--;)i1[o1] *= t1;\n        for(i1[0] += eo.indexOf(e1.charAt(s1++)), n1 = 0; n1 < i1.length; n1++)i1[n1] > r1 - 1 && (i1[n1 + 1] === void 0 && (i1[n1 + 1] = 0), i1[n1 + 1] += i1[n1] / r1 | 0, i1[n1] %= r1);\n    }\n    return i1.reverse();\n}\nfunction tp(e1, t1) {\n    var r1, n1, i1;\n    if (t1.isZero()) return t1;\n    n1 = t1.d.length, n1 < 32 ? (r1 = Math.ceil(n1 / 3), i1 = (1 / _n(4, r1)).toString()) : (r1 = 16, i1 = \"2.3283064365386962890625e-10\"), e1.precision += r1, t1 = qt(e1, 1, t1.times(i1), new e1(1));\n    for(var o1 = r1; o1--;){\n        var s1 = t1.times(t1);\n        t1 = s1.times(s1).minus(s1).times(8).plus(1);\n    }\n    return e1.precision -= r1, t1;\n}\nvar L = function() {\n    function e1(n1, i1, o1) {\n        var s1, a1 = 0, l1 = n1.length;\n        for(n1 = n1.slice(); l1--;)s1 = n1[l1] * i1 + a1, n1[l1] = s1 % o1 | 0, a1 = s1 / o1 | 0;\n        return a1 && n1.unshift(a1), n1;\n    }\n    function t1(n1, i1, o1, s1) {\n        var a1, l1;\n        if (o1 != s1) l1 = o1 > s1 ? 1 : -1;\n        else for(a1 = l1 = 0; a1 < o1; a1++)if (n1[a1] != i1[a1]) {\n            l1 = n1[a1] > i1[a1] ? 1 : -1;\n            break;\n        }\n        return l1;\n    }\n    function r1(n1, i1, o1, s1) {\n        for(var a1 = 0; o1--;)n1[o1] -= a1, a1 = n1[o1] < i1[o1] ? 1 : 0, n1[o1] = a1 * s1 + n1[o1] - i1[o1];\n        for(; !n1[0] && n1.length > 1;)n1.shift();\n    }\n    return function(n1, i1, o1, s1, a1, l1) {\n        var u1, c1, p1, d1, f1, y1, g1, _1, A1, R1, E1, S1, we1, X1, ut1, K1, ne1, Be1, ie1, Tt1, Kr1 = n1.constructor, ai1 = n1.s == i1.s ? 1 : -1, oe1 = n1.d, N1 = i1.d;\n        if (!oe1 || !oe1[0] || !N1 || !N1[0]) return new Kr1(!n1.s || !i1.s || (oe1 ? N1 && oe1[0] == N1[0] : !N1) ? NaN : oe1 && oe1[0] == 0 || !N1 ? ai1 * 0 : ai1 / 0);\n        for(l1 ? (f1 = 1, c1 = n1.e - i1.e) : (l1 = Ce, f1 = P, c1 = ae(n1.e / f1) - ae(i1.e / f1)), ie1 = N1.length, ne1 = oe1.length, A1 = new Kr1(ai1), R1 = A1.d = [], p1 = 0; N1[p1] == (oe1[p1] || 0); p1++);\n        if (N1[p1] > (oe1[p1] || 0) && c1--, o1 == null ? (X1 = o1 = Kr1.precision, s1 = Kr1.rounding) : a1 ? X1 = o1 + (n1.e - i1.e) + 1 : X1 = o1, X1 < 0) R1.push(1), y1 = !0;\n        else {\n            if (X1 = X1 / f1 + 2 | 0, p1 = 0, ie1 == 1) {\n                for(d1 = 0, N1 = N1[0], X1++; (p1 < ne1 || d1) && X1--; p1++)ut1 = d1 * l1 + (oe1[p1] || 0), R1[p1] = ut1 / N1 | 0, d1 = ut1 % N1 | 0;\n                y1 = d1 || p1 < ne1;\n            } else {\n                for(d1 = l1 / (N1[0] + 1) | 0, d1 > 1 && (N1 = e1(N1, d1, l1), oe1 = e1(oe1, d1, l1), ie1 = N1.length, ne1 = oe1.length), K1 = ie1, E1 = oe1.slice(0, ie1), S1 = E1.length; S1 < ie1;)E1[S1++] = 0;\n                Tt1 = N1.slice(), Tt1.unshift(0), Be1 = N1[0], N1[1] >= l1 / 2 && ++Be1;\n                do d1 = 0, u1 = t1(N1, E1, ie1, S1), u1 < 0 ? (we1 = E1[0], ie1 != S1 && (we1 = we1 * l1 + (E1[1] || 0)), d1 = we1 / Be1 | 0, d1 > 1 ? (d1 >= l1 && (d1 = l1 - 1), g1 = e1(N1, d1, l1), _1 = g1.length, S1 = E1.length, u1 = t1(g1, E1, _1, S1), u1 == 1 && (d1--, r1(g1, ie1 < _1 ? Tt1 : N1, _1, l1))) : (d1 == 0 && (u1 = d1 = 1), g1 = N1.slice()), _1 = g1.length, _1 < S1 && g1.unshift(0), r1(E1, g1, S1, l1), u1 == -1 && (S1 = E1.length, u1 = t1(N1, E1, ie1, S1), u1 < 1 && (d1++, r1(E1, ie1 < S1 ? Tt1 : N1, S1, l1))), S1 = E1.length) : u1 === 0 && (d1++, E1 = [\n                    0\n                ]), R1[p1++] = d1, u1 && E1[0] ? E1[S1++] = oe1[K1] || 0 : (E1 = [\n                    oe1[K1]\n                ], S1 = 1);\n                while ((K1++ < ne1 || E1[0] !== void 0) && X1--);\n                y1 = E1[0] !== void 0;\n            }\n            R1[0] || R1.shift();\n        }\n        if (f1 == 1) A1.e = c1, sa = y1;\n        else {\n            for(p1 = 1, d1 = R1[0]; d1 >= 10; d1 /= 10)p1++;\n            A1.e = p1 + c1 * f1 - 1, x(A1, a1 ? o1 + A1.e + 1 : o1, s1, y1);\n        }\n        return A1;\n    };\n}();\nfunction x(e1, t1, r1, n1) {\n    var i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = e1.constructor;\n    e: if (t1 != null) {\n        if (p1 = e1.d, !p1) return e1;\n        for(i1 = 1, a1 = p1[0]; a1 >= 10; a1 /= 10)i1++;\n        if (o1 = t1 - i1, o1 < 0) o1 += P, s1 = t1, c1 = p1[d1 = 0], l1 = c1 / J(10, i1 - s1 - 1) % 10 | 0;\n        else if (d1 = Math.ceil((o1 + 1) / P), a1 = p1.length, d1 >= a1) if (n1) {\n            for(; a1++ <= d1;)p1.push(0);\n            c1 = l1 = 0, i1 = 1, o1 %= P, s1 = o1 - P + 1;\n        } else break e;\n        else {\n            for(c1 = a1 = p1[d1], i1 = 1; a1 >= 10; a1 /= 10)i1++;\n            o1 %= P, s1 = o1 - P + i1, l1 = s1 < 0 ? 0 : c1 / J(10, i1 - s1 - 1) % 10 | 0;\n        }\n        if (n1 = n1 || t1 < 0 || p1[d1 + 1] !== void 0 || (s1 < 0 ? c1 : c1 % J(10, i1 - s1 - 1)), u1 = r1 < 4 ? (l1 || n1) && (r1 == 0 || r1 == (e1.s < 0 ? 3 : 2)) : l1 > 5 || l1 == 5 && (r1 == 4 || n1 || r1 == 6 && (o1 > 0 ? s1 > 0 ? c1 / J(10, i1 - s1) : 0 : p1[d1 - 1]) % 10 & 1 || r1 == (e1.s < 0 ? 8 : 7)), t1 < 1 || !p1[0]) return p1.length = 0, u1 ? (t1 -= e1.e + 1, p1[0] = J(10, (P - t1 % P) % P), e1.e = -t1 || 0) : p1[0] = e1.e = 0, e1;\n        if (o1 == 0 ? (p1.length = d1, a1 = 1, d1--) : (p1.length = d1 + 1, a1 = J(10, P - o1), p1[d1] = s1 > 0 ? (c1 / J(10, i1 - s1) % J(10, s1) | 0) * a1 : 0), u1) for(;;)if (d1 == 0) {\n            for(o1 = 1, s1 = p1[0]; s1 >= 10; s1 /= 10)o1++;\n            for(s1 = p1[0] += a1, a1 = 1; s1 >= 10; s1 /= 10)a1++;\n            o1 != a1 && (e1.e++, p1[0] == Ce && (p1[0] = 1));\n            break;\n        } else {\n            if (p1[d1] += a1, p1[d1] != Ce) break;\n            p1[d1--] = 0, a1 = 1;\n        }\n        for(o1 = p1.length; p1[--o1] === 0;)p1.pop();\n    }\n    return T && (e1.e > f1.maxE ? (e1.d = null, e1.e = NaN) : e1.e < f1.minE && (e1.e = 0, e1.d = [\n        0\n    ])), e1;\n}\nfunction De(e1, t1, r1) {\n    if (!e1.isFinite()) return fa(e1);\n    var n1, i1 = e1.e, o1 = te(e1.d), s1 = o1.length;\n    return t1 ? (r1 && (n1 = r1 - s1) > 0 ? o1 = o1.charAt(0) + \".\" + o1.slice(1) + Xe(n1) : s1 > 1 && (o1 = o1.charAt(0) + \".\" + o1.slice(1)), o1 = o1 + (e1.e < 0 ? \"e\" : \"e+\") + e1.e) : i1 < 0 ? (o1 = \"0.\" + Xe(-i1 - 1) + o1, r1 && (n1 = r1 - s1) > 0 && (o1 += Xe(n1))) : i1 >= s1 ? (o1 += Xe(i1 + 1 - s1), r1 && (n1 = r1 - i1 - 1) > 0 && (o1 = o1 + \".\" + Xe(n1))) : ((n1 = i1 + 1) < s1 && (o1 = o1.slice(0, n1) + \".\" + o1.slice(n1)), r1 && (n1 = r1 - s1) > 0 && (i1 + 1 === s1 && (o1 += \".\"), o1 += Xe(n1))), o1;\n}\nfunction Tn(e1, t1) {\n    var r1 = e1[0];\n    for(t1 *= P; r1 >= 10; r1 /= 10)t1++;\n    return t1;\n}\nfunction Pn(e1, t1, r1) {\n    if (t1 > ep) throw T = !0, r1 && (e1.precision = r1), Error(aa);\n    return x(new e1(wn), t1, 1, !0);\n}\nfunction _e(e1, t1, r1) {\n    if (t1 > ro) throw Error(aa);\n    return x(new e1(En), t1, r1, !0);\n}\nfunction pa(e1) {\n    var t1 = e1.length - 1, r1 = t1 * P + 1;\n    if (t1 = e1[t1], t1) {\n        for(; t1 % 10 == 0; t1 /= 10)r1--;\n        for(t1 = e1[0]; t1 >= 10; t1 /= 10)r1++;\n    }\n    return r1;\n}\nfunction Xe(e1) {\n    for(var t1 = \"\"; e1--;)t1 += \"0\";\n    return t1;\n}\nfunction da(e1, t1, r1, n1) {\n    var i1, o1 = new e1(1), s1 = Math.ceil(n1 / P + 4);\n    for(T = !1;;){\n        if (r1 % 2 && (o1 = o1.times(t1), ia(o1.d, s1) && (i1 = !0)), r1 = ae(r1 / 2), r1 === 0) {\n            r1 = o1.d.length - 1, i1 && o1.d[r1] === 0 && ++o1.d[r1];\n            break;\n        }\n        t1 = t1.times(t1), ia(t1.d, s1);\n    }\n    return T = !0, o1;\n}\nfunction na(e1) {\n    return e1.d[e1.d.length - 1] & 1;\n}\nfunction ma(e1, t1, r1) {\n    for(var n1, i1 = new e1(t1[0]), o1 = 0; ++o1 < t1.length;)if (n1 = new e1(t1[o1]), n1.s) i1[r1](n1) && (i1 = n1);\n    else {\n        i1 = n1;\n        break;\n    }\n    return i1;\n}\nfunction no(e1, t1) {\n    var r1, n1, i1, o1, s1, a1, l1, u1 = 0, c1 = 0, p1 = 0, d1 = e1.constructor, f1 = d1.rounding, y1 = d1.precision;\n    if (!e1.d || !e1.d[0] || e1.e > 17) return new d1(e1.d ? e1.d[0] ? e1.s < 0 ? 0 : 1 / 0 : 1 : e1.s ? e1.s < 0 ? 0 : e1 : NaN);\n    for(t1 == null ? (T = !1, l1 = y1) : l1 = t1, a1 = new d1(.03125); e1.e > -2;)e1 = e1.times(a1), p1 += 5;\n    for(n1 = Math.log(J(2, p1)) / Math.LN10 * 2 + 5 | 0, l1 += n1, r1 = o1 = s1 = new d1(1), d1.precision = l1;;){\n        if (o1 = x(o1.times(e1), l1, 1), r1 = r1.times(++c1), a1 = s1.plus(L(o1, r1, l1, 1)), te(a1.d).slice(0, l1) === te(s1.d).slice(0, l1)) {\n            for(i1 = p1; i1--;)s1 = x(s1.times(s1), l1, 1);\n            if (t1 == null) if (u1 < 3 && br(s1.d, l1 - n1, f1, u1)) d1.precision = l1 += 10, r1 = o1 = a1 = new d1(1), c1 = 0, u1++;\n            else return x(s1, d1.precision = y1, f1, T = !0);\n            else return d1.precision = y1, s1;\n        }\n        s1 = a1;\n    }\n}\nfunction et(e1, t1) {\n    var r1, n1, i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = 1, y1 = 10, g1 = e1, _1 = g1.d, A1 = g1.constructor, R1 = A1.rounding, E1 = A1.precision;\n    if (g1.s < 0 || !_1 || !_1[0] || !g1.e && _1[0] == 1 && _1.length == 1) return new A1(_1 && !_1[0] ? -1 / 0 : g1.s != 1 ? NaN : _1 ? 0 : g1);\n    if (t1 == null ? (T = !1, c1 = E1) : c1 = t1, A1.precision = c1 += y1, r1 = te(_1), n1 = r1.charAt(0), Math.abs(o1 = g1.e) < 15e14) {\n        for(; n1 < 7 && n1 != 1 || n1 == 1 && r1.charAt(1) > 3;)g1 = g1.times(e1), r1 = te(g1.d), n1 = r1.charAt(0), f1++;\n        o1 = g1.e, n1 > 1 ? (g1 = new A1(\"0.\" + r1), o1++) : g1 = new A1(n1 + \".\" + r1.slice(1));\n    } else return u1 = Pn(A1, c1 + 2, E1).times(o1 + \"\"), g1 = et(new A1(n1 + \".\" + r1.slice(1)), c1 - y1).plus(u1), A1.precision = E1, t1 == null ? x(g1, E1, R1, T = !0) : g1;\n    for(p1 = g1, l1 = s1 = g1 = L(g1.minus(1), g1.plus(1), c1, 1), d1 = x(g1.times(g1), c1, 1), i1 = 3;;){\n        if (s1 = x(s1.times(d1), c1, 1), u1 = l1.plus(L(s1, new A1(i1), c1, 1)), te(u1.d).slice(0, c1) === te(l1.d).slice(0, c1)) if (l1 = l1.times(2), o1 !== 0 && (l1 = l1.plus(Pn(A1, c1 + 2, E1).times(o1 + \"\"))), l1 = L(l1, new A1(f1), c1, 1), t1 == null) if (br(l1.d, c1 - y1, R1, a1)) A1.precision = c1 += y1, u1 = s1 = g1 = L(p1.minus(1), p1.plus(1), c1, 1), d1 = x(g1.times(g1), c1, 1), i1 = a1 = 1;\n        else return x(l1, A1.precision = E1, R1, T = !0);\n        else return A1.precision = E1, l1;\n        l1 = u1, i1 += 2;\n    }\n}\nfunction fa(e1) {\n    return String(e1.s * e1.s / 0);\n}\nfunction io(e1, t1) {\n    var r1, n1, i1;\n    for((r1 = t1.indexOf(\".\")) > -1 && (t1 = t1.replace(\".\", \"\")), (n1 = t1.search(/e/i)) > 0 ? (r1 < 0 && (r1 = n1), r1 += +t1.slice(n1 + 1), t1 = t1.substring(0, n1)) : r1 < 0 && (r1 = t1.length), n1 = 0; t1.charCodeAt(n1) === 48; n1++);\n    for(i1 = t1.length; t1.charCodeAt(i1 - 1) === 48; --i1);\n    if (t1 = t1.slice(n1, i1), t1) {\n        if (i1 -= n1, e1.e = r1 = r1 - n1 - 1, e1.d = [], n1 = (r1 + 1) % P, r1 < 0 && (n1 += P), n1 < i1) {\n            for(n1 && e1.d.push(+t1.slice(0, n1)), i1 -= P; n1 < i1;)e1.d.push(+t1.slice(n1, n1 += P));\n            t1 = t1.slice(n1), n1 = P - t1.length;\n        } else n1 -= i1;\n        for(; n1--;)t1 += \"0\";\n        e1.d.push(+t1), T && (e1.e > e1.constructor.maxE ? (e1.d = null, e1.e = NaN) : e1.e < e1.constructor.minE && (e1.e = 0, e1.d = [\n            0\n        ]));\n    } else e1.e = 0, e1.d = [\n        0\n    ];\n    return e1;\n}\nfunction rp(e1, t1) {\n    var r1, n1, i1, o1, s1, a1, l1, u1, c1;\n    if (t1.indexOf(\"_\") > -1) {\n        if (t1 = t1.replace(/(\\d)_(?=\\d)/g, \"$1\"), ca.test(t1)) return io(e1, t1);\n    } else if (t1 === \"Infinity\" || t1 === \"NaN\") return +t1 || (e1.s = NaN), e1.e = NaN, e1.d = null, e1;\n    if (Yc.test(t1)) r1 = 16, t1 = t1.toLowerCase();\n    else if (zc.test(t1)) r1 = 2;\n    else if (Zc.test(t1)) r1 = 8;\n    else throw Error(tt + t1);\n    for(o1 = t1.search(/p/i), o1 > 0 ? (l1 = +t1.slice(o1 + 1), t1 = t1.substring(2, o1)) : t1 = t1.slice(2), o1 = t1.indexOf(\".\"), s1 = o1 >= 0, n1 = e1.constructor, s1 && (t1 = t1.replace(\".\", \"\"), a1 = t1.length, o1 = a1 - o1, i1 = da(n1, new n1(r1), o1, o1 * 2)), u1 = xn(t1, r1, Ce), c1 = u1.length - 1, o1 = c1; u1[o1] === 0; --o1)u1.pop();\n    return o1 < 0 ? new n1(e1.s * 0) : (e1.e = Tn(u1, c1), e1.d = u1, T = !1, s1 && (e1 = L(e1, i1, a1 * 4)), l1 && (e1 = e1.times(Math.abs(l1) < 54 ? J(2, l1) : xt.pow(2, l1))), T = !0, e1);\n}\nfunction np(e1, t1) {\n    var r1, n1 = t1.d.length;\n    if (n1 < 3) return t1.isZero() ? t1 : qt(e1, 2, t1, t1);\n    r1 = 1.4 * Math.sqrt(n1), r1 = r1 > 16 ? 16 : r1 | 0, t1 = t1.times(1 / _n(5, r1)), t1 = qt(e1, 2, t1, t1);\n    for(var i1, o1 = new e1(5), s1 = new e1(16), a1 = new e1(20); r1--;)i1 = t1.times(t1), t1 = t1.times(o1.plus(i1.times(s1.times(i1).minus(a1))));\n    return t1;\n}\nfunction qt(e1, t1, r1, n1, i1) {\n    var o1, s1, a1, l1, u1 = 1, c1 = e1.precision, p1 = Math.ceil(c1 / P);\n    for(T = !1, l1 = r1.times(r1), a1 = new e1(n1);;){\n        if (s1 = L(a1.times(l1), new e1(t1++ * t1++), c1, 1), a1 = i1 ? n1.plus(s1) : n1.minus(s1), n1 = L(s1.times(l1), new e1(t1++ * t1++), c1, 1), s1 = a1.plus(n1), s1.d[p1] !== void 0) {\n            for(o1 = p1; s1.d[o1] === a1.d[o1] && o1--;);\n            if (o1 == -1) break;\n        }\n        o1 = a1, a1 = n1, n1 = s1, s1 = o1, u1++;\n    }\n    return T = !0, s1.d.length = p1 + 1, s1;\n}\nfunction _n(e1, t1) {\n    for(var r1 = e1; --t1;)r1 *= e1;\n    return r1;\n}\nfunction ga(e1, t1) {\n    var r1, n1 = t1.s < 0, i1 = _e(e1, e1.precision, 1), o1 = i1.times(.5);\n    if (t1 = t1.abs(), t1.lte(o1)) return Ue = n1 ? 4 : 1, t1;\n    if (r1 = t1.divToInt(i1), r1.isZero()) Ue = n1 ? 3 : 2;\n    else {\n        if (t1 = t1.minus(r1.times(i1)), t1.lte(o1)) return Ue = na(r1) ? n1 ? 2 : 3 : n1 ? 4 : 1, t1;\n        Ue = na(r1) ? n1 ? 1 : 4 : n1 ? 3 : 2;\n    }\n    return t1.minus(i1).abs();\n}\nfunction oo(e1, t1, r1, n1) {\n    var i1, o1, s1, a1, l1, u1, c1, p1, d1, f1 = e1.constructor, y1 = r1 !== void 0;\n    if (y1 ? (ge(r1, 1, rt), n1 === void 0 ? n1 = f1.rounding : ge(n1, 0, 8)) : (r1 = f1.precision, n1 = f1.rounding), !e1.isFinite()) c1 = fa(e1);\n    else {\n        for(c1 = De(e1), s1 = c1.indexOf(\".\"), y1 ? (i1 = 2, t1 == 16 ? r1 = r1 * 4 - 3 : t1 == 8 && (r1 = r1 * 3 - 2)) : i1 = t1, s1 >= 0 && (c1 = c1.replace(\".\", \"\"), d1 = new f1(1), d1.e = c1.length - s1, d1.d = xn(De(d1), 10, i1), d1.e = d1.d.length), p1 = xn(c1, 10, i1), o1 = l1 = p1.length; p1[--l1] == 0;)p1.pop();\n        if (!p1[0]) c1 = y1 ? \"0p+0\" : \"0\";\n        else {\n            if (s1 < 0 ? o1-- : (e1 = new f1(e1), e1.d = p1, e1.e = o1, e1 = L(e1, d1, r1, n1, 0, i1), p1 = e1.d, o1 = e1.e, u1 = sa), s1 = p1[r1], a1 = i1 / 2, u1 = u1 || p1[r1 + 1] !== void 0, u1 = n1 < 4 ? (s1 !== void 0 || u1) && (n1 === 0 || n1 === (e1.s < 0 ? 3 : 2)) : s1 > a1 || s1 === a1 && (n1 === 4 || u1 || n1 === 6 && p1[r1 - 1] & 1 || n1 === (e1.s < 0 ? 8 : 7)), p1.length = r1, u1) for(; ++p1[--r1] > i1 - 1;)p1[r1] = 0, r1 || (++o1, p1.unshift(1));\n            for(l1 = p1.length; !p1[l1 - 1]; --l1);\n            for(s1 = 0, c1 = \"\"; s1 < l1; s1++)c1 += eo.charAt(p1[s1]);\n            if (y1) {\n                if (l1 > 1) if (t1 == 16 || t1 == 8) {\n                    for(s1 = t1 == 16 ? 4 : 3, --l1; l1 % s1; l1++)c1 += \"0\";\n                    for(p1 = xn(c1, i1, t1), l1 = p1.length; !p1[l1 - 1]; --l1);\n                    for(s1 = 1, c1 = \"1.\"; s1 < l1; s1++)c1 += eo.charAt(p1[s1]);\n                } else c1 = c1.charAt(0) + \".\" + c1.slice(1);\n                c1 = c1 + (o1 < 0 ? \"p\" : \"p+\") + o1;\n            } else if (o1 < 0) {\n                for(; ++o1;)c1 = \"0\" + c1;\n                c1 = \"0.\" + c1;\n            } else if (++o1 > l1) for(o1 -= l1; o1--;)c1 += \"0\";\n            else o1 < l1 && (c1 = c1.slice(0, o1) + \".\" + c1.slice(o1));\n        }\n        c1 = (t1 == 16 ? \"0x\" : t1 == 2 ? \"0b\" : t1 == 8 ? \"0o\" : \"\") + c1;\n    }\n    return e1.s < 0 ? \"-\" + c1 : c1;\n}\nfunction ia(e1, t1) {\n    if (e1.length > t1) return e1.length = t1, !0;\n}\nfunction ip(e1) {\n    return new this(e1).abs();\n}\nfunction op(e1) {\n    return new this(e1).acos();\n}\nfunction sp(e1) {\n    return new this(e1).acosh();\n}\nfunction ap(e1, t1) {\n    return new this(e1).plus(t1);\n}\nfunction lp(e1) {\n    return new this(e1).asin();\n}\nfunction up(e1) {\n    return new this(e1).asinh();\n}\nfunction cp(e1) {\n    return new this(e1).atan();\n}\nfunction pp(e1) {\n    return new this(e1).atanh();\n}\nfunction dp(e1, t1) {\n    e1 = new this(e1), t1 = new this(t1);\n    var r1, n1 = this.precision, i1 = this.rounding, o1 = n1 + 4;\n    return !e1.s || !t1.s ? r1 = new this(NaN) : !e1.d && !t1.d ? (r1 = _e(this, o1, 1).times(t1.s > 0 ? .25 : .75), r1.s = e1.s) : !t1.d || e1.isZero() ? (r1 = t1.s < 0 ? _e(this, n1, i1) : new this(0), r1.s = e1.s) : !e1.d || t1.isZero() ? (r1 = _e(this, o1, 1).times(.5), r1.s = e1.s) : t1.s < 0 ? (this.precision = o1, this.rounding = 1, r1 = this.atan(L(e1, t1, o1, 1)), t1 = _e(this, o1, 1), this.precision = n1, this.rounding = i1, r1 = e1.s < 0 ? r1.minus(t1) : r1.plus(t1)) : r1 = this.atan(L(e1, t1, o1, 1)), r1;\n}\nfunction mp(e1) {\n    return new this(e1).cbrt();\n}\nfunction fp(e1) {\n    return x(e1 = new this(e1), e1.e + 1, 2);\n}\nfunction gp(e1, t1, r1) {\n    return new this(e1).clamp(t1, r1);\n}\nfunction yp(e1) {\n    if (!e1 || typeof e1 != \"object\") throw Error(vn + \"Object expected\");\n    var t1, r1, n1, i1 = e1.defaults === !0, o1 = [\n        \"precision\",\n        1,\n        rt,\n        \"rounding\",\n        0,\n        8,\n        \"toExpNeg\",\n        -$t,\n        0,\n        \"toExpPos\",\n        0,\n        $t,\n        \"maxE\",\n        0,\n        $t,\n        \"minE\",\n        -$t,\n        0,\n        \"modulo\",\n        0,\n        9\n    ];\n    for(t1 = 0; t1 < o1.length; t1 += 3)if (r1 = o1[t1], i1 && (this[r1] = to[r1]), (n1 = e1[r1]) !== void 0) if (ae(n1) === n1 && n1 >= o1[t1 + 1] && n1 <= o1[t1 + 2]) this[r1] = n1;\n    else throw Error(tt + r1 + \": \" + n1);\n    if (r1 = \"crypto\", i1 && (this[r1] = to[r1]), (n1 = e1[r1]) !== void 0) if (n1 === !0 || n1 === !1 || n1 === 0 || n1 === 1) if (n1) if (typeof crypto < \"u\" && crypto && (crypto.getRandomValues || crypto.randomBytes)) this[r1] = !0;\n    else throw Error(la);\n    else this[r1] = !1;\n    else throw Error(tt + r1 + \": \" + n1);\n    return this;\n}\nfunction hp(e1) {\n    return new this(e1).cos();\n}\nfunction bp(e1) {\n    return new this(e1).cosh();\n}\nfunction ya(e1) {\n    var t1, r1, n1;\n    function i1(o1) {\n        var s1, a1, l1, u1 = this;\n        if (!(u1 instanceof i1)) return new i1(o1);\n        if (u1.constructor = i1, oa(o1)) {\n            u1.s = o1.s, T ? !o1.d || o1.e > i1.maxE ? (u1.e = NaN, u1.d = null) : o1.e < i1.minE ? (u1.e = 0, u1.d = [\n                0\n            ]) : (u1.e = o1.e, u1.d = o1.d.slice()) : (u1.e = o1.e, u1.d = o1.d ? o1.d.slice() : o1.d);\n            return;\n        }\n        if (l1 = typeof o1, l1 === \"number\") {\n            if (o1 === 0) {\n                u1.s = 1 / o1 < 0 ? -1 : 1, u1.e = 0, u1.d = [\n                    0\n                ];\n                return;\n            }\n            if (o1 < 0 ? (o1 = -o1, u1.s = -1) : u1.s = 1, o1 === ~~o1 && o1 < 1e7) {\n                for(s1 = 0, a1 = o1; a1 >= 10; a1 /= 10)s1++;\n                T ? s1 > i1.maxE ? (u1.e = NaN, u1.d = null) : s1 < i1.minE ? (u1.e = 0, u1.d = [\n                    0\n                ]) : (u1.e = s1, u1.d = [\n                    o1\n                ]) : (u1.e = s1, u1.d = [\n                    o1\n                ]);\n                return;\n            } else if (o1 * 0 !== 0) {\n                o1 || (u1.s = NaN), u1.e = NaN, u1.d = null;\n                return;\n            }\n            return io(u1, o1.toString());\n        } else if (l1 !== \"string\") throw Error(tt + o1);\n        return (a1 = o1.charCodeAt(0)) === 45 ? (o1 = o1.slice(1), u1.s = -1) : (a1 === 43 && (o1 = o1.slice(1)), u1.s = 1), ca.test(o1) ? io(u1, o1) : rp(u1, o1);\n    }\n    if (i1.prototype = m, i1.ROUND_UP = 0, i1.ROUND_DOWN = 1, i1.ROUND_CEIL = 2, i1.ROUND_FLOOR = 3, i1.ROUND_HALF_UP = 4, i1.ROUND_HALF_DOWN = 5, i1.ROUND_HALF_EVEN = 6, i1.ROUND_HALF_CEIL = 7, i1.ROUND_HALF_FLOOR = 8, i1.EUCLID = 9, i1.config = i1.set = yp, i1.clone = ya, i1.isDecimal = oa, i1.abs = ip, i1.acos = op, i1.acosh = sp, i1.add = ap, i1.asin = lp, i1.asinh = up, i1.atan = cp, i1.atanh = pp, i1.atan2 = dp, i1.cbrt = mp, i1.ceil = fp, i1.clamp = gp, i1.cos = hp, i1.cosh = bp, i1.div = xp, i1.exp = wp, i1.floor = Ep, i1.hypot = Pp, i1.ln = vp, i1.log = Tp, i1.log10 = Cp, i1.log2 = _p, i1.max = Ap, i1.min = Rp, i1.mod = Mp, i1.mul = Sp, i1.pow = Ip, i1.random = kp, i1.round = Fp, i1.sign = Op, i1.sin = Dp, i1.sinh = Np, i1.sqrt = Lp, i1.sub = $p, i1.sum = qp, i1.tan = Bp, i1.tanh = jp, i1.trunc = Vp, e1 === void 0 && (e1 = {}), e1 && e1.defaults !== !0) for(n1 = [\n        \"precision\",\n        \"rounding\",\n        \"toExpNeg\",\n        \"toExpPos\",\n        \"maxE\",\n        \"minE\",\n        \"modulo\",\n        \"crypto\"\n    ], t1 = 0; t1 < n1.length;)e1.hasOwnProperty(r1 = n1[t1++]) || (e1[r1] = this[r1]);\n    return i1.config(e1), i1;\n}\nfunction xp(e1, t1) {\n    return new this(e1).div(t1);\n}\nfunction wp(e1) {\n    return new this(e1).exp();\n}\nfunction Ep(e1) {\n    return x(e1 = new this(e1), e1.e + 1, 3);\n}\nfunction Pp() {\n    var e1, t1, r1 = new this(0);\n    for(T = !1, e1 = 0; e1 < arguments.length;)if (t1 = new this(arguments[e1++]), t1.d) r1.d && (r1 = r1.plus(t1.times(t1)));\n    else {\n        if (t1.s) return T = !0, new this(1 / 0);\n        r1 = t1;\n    }\n    return T = !0, r1.sqrt();\n}\nfunction oa(e1) {\n    return e1 instanceof xt || e1 && e1.toStringTag === ua || !1;\n}\nfunction vp(e1) {\n    return new this(e1).ln();\n}\nfunction Tp(e1, t1) {\n    return new this(e1).log(t1);\n}\nfunction _p(e1) {\n    return new this(e1).log(2);\n}\nfunction Cp(e1) {\n    return new this(e1).log(10);\n}\nfunction Ap() {\n    return ma(this, arguments, \"lt\");\n}\nfunction Rp() {\n    return ma(this, arguments, \"gt\");\n}\nfunction Mp(e1, t1) {\n    return new this(e1).mod(t1);\n}\nfunction Sp(e1, t1) {\n    return new this(e1).mul(t1);\n}\nfunction Ip(e1, t1) {\n    return new this(e1).pow(t1);\n}\nfunction kp(e1) {\n    var t1, r1, n1, i1, o1 = 0, s1 = new this(1), a1 = [];\n    if (e1 === void 0 ? e1 = this.precision : ge(e1, 1, rt), n1 = Math.ceil(e1 / P), this.crypto) if (crypto.getRandomValues) for(t1 = crypto.getRandomValues(new Uint32Array(n1)); o1 < n1;)i1 = t1[o1], i1 >= 429e7 ? t1[o1] = crypto.getRandomValues(new Uint32Array(1))[0] : a1[o1++] = i1 % 1e7;\n    else if (crypto.randomBytes) {\n        for(t1 = crypto.randomBytes(n1 *= 4); o1 < n1;)i1 = t1[o1] + (t1[o1 + 1] << 8) + (t1[o1 + 2] << 16) + ((t1[o1 + 3] & 127) << 24), i1 >= 214e7 ? crypto.randomBytes(4).copy(t1, o1) : (a1.push(i1 % 1e7), o1 += 4);\n        o1 = n1 / 4;\n    } else throw Error(la);\n    else for(; o1 < n1;)a1[o1++] = Math.random() * 1e7 | 0;\n    for(n1 = a1[--o1], e1 %= P, n1 && e1 && (i1 = J(10, P - e1), a1[o1] = (n1 / i1 | 0) * i1); a1[o1] === 0; o1--)a1.pop();\n    if (o1 < 0) r1 = 0, a1 = [\n        0\n    ];\n    else {\n        for(r1 = -1; a1[0] === 0; r1 -= P)a1.shift();\n        for(n1 = 1, i1 = a1[0]; i1 >= 10; i1 /= 10)n1++;\n        n1 < P && (r1 -= P - n1);\n    }\n    return s1.e = r1, s1.d = a1, s1;\n}\nfunction Fp(e1) {\n    return x(e1 = new this(e1), e1.e + 1, this.rounding);\n}\nfunction Op(e1) {\n    return e1 = new this(e1), e1.d ? e1.d[0] ? e1.s : 0 * e1.s : e1.s || NaN;\n}\nfunction Dp(e1) {\n    return new this(e1).sin();\n}\nfunction Np(e1) {\n    return new this(e1).sinh();\n}\nfunction Lp(e1) {\n    return new this(e1).sqrt();\n}\nfunction $p(e1, t1) {\n    return new this(e1).sub(t1);\n}\nfunction qp() {\n    var e1 = 0, t1 = arguments, r1 = new this(t1[e1]);\n    for(T = !1; r1.s && ++e1 < t1.length;)r1 = r1.plus(t1[e1]);\n    return T = !0, x(r1, this.precision, this.rounding);\n}\nfunction Bp(e1) {\n    return new this(e1).tan();\n}\nfunction jp(e1) {\n    return new this(e1).tanh();\n}\nfunction Vp(e1) {\n    return x(e1 = new this(e1), e1.e + 1, 1);\n}\nm[Symbol.for(\"nodejs.util.inspect.custom\")] = m.toString;\nm[Symbol.toStringTag] = \"Decimal\";\nvar xt = m.constructor = ya(to);\nwn = new xt(wn);\nEn = new xt(En);\nvar Ne = xt;\nfunction Bt(e1) {\n    return xt.isDecimal(e1) ? !0 : e1 !== null && typeof e1 == \"object\" && typeof e1.s == \"number\" && typeof e1.e == \"number\" && typeof e1.toFixed == \"function\" && Array.isArray(e1.d);\n}\nvar xr = class {\n    constructor(t1, r1, n1, i1, o1){\n        this.modelName = t1, this.name = r1, this.typeName = n1, this.isList = i1, this.isEnum = o1;\n    }\n    _toGraphQLInputType() {\n        let t1 = this.isList ? \"List\" : \"\", r1 = this.isEnum ? \"Enum\" : \"\";\n        return `${t1}${r1}${this.typeName}FieldRefInput<${this.modelName}>`;\n    }\n};\nfunction jt(e1) {\n    return e1 instanceof xr;\n}\nvar Cn = class {\n    constructor(t1){\n        this.value = t1;\n    }\n    write(t1) {\n        t1.write(this.value);\n    }\n    markAsError() {\n        this.value.markAsError();\n    }\n};\nvar An = (e1)=>e1, Rn = {\n    bold: An,\n    red: An,\n    green: An,\n    dim: An,\n    enabled: !1\n}, ha = {\n    bold: de,\n    red: ve,\n    green: pt,\n    dim: He,\n    enabled: !0\n}, Vt = {\n    write (e1) {\n        e1.writeLine(\",\");\n    }\n};\nvar Le = class {\n    constructor(t1){\n        this.contents = t1;\n        this.isUnderlined = !1;\n        this.color = (t1)=>t1;\n    }\n    underline() {\n        return this.isUnderlined = !0, this;\n    }\n    setColor(t1) {\n        return this.color = t1, this;\n    }\n    write(t1) {\n        let r1 = t1.getCurrentLineLength();\n        t1.write(this.color(this.contents)), this.isUnderlined && t1.afterNextNewline(()=>{\n            t1.write(\" \".repeat(r1)).writeLine(this.color(\"~\".repeat(this.contents.length)));\n        });\n    }\n};\nvar nt = class {\n    constructor(){\n        this.hasError = !1;\n    }\n    markAsError() {\n        return this.hasError = !0, this;\n    }\n};\nvar Ut = class extends nt {\n    constructor(){\n        super(...arguments);\n        this.items = [];\n    }\n    addItem(r1) {\n        return this.items.push(new Cn(r1)), this;\n    }\n    getField(r1) {\n        return this.items[r1];\n    }\n    getPrintWidth() {\n        return this.items.length === 0 ? 2 : Math.max(...this.items.map((n1)=>n1.value.getPrintWidth())) + 2;\n    }\n    write(r1) {\n        if (this.items.length === 0) {\n            this.writeEmpty(r1);\n            return;\n        }\n        this.writeWithItems(r1);\n    }\n    writeEmpty(r1) {\n        let n1 = new Le(\"[]\");\n        this.hasError && n1.setColor(r1.context.colors.red).underline(), r1.write(n1);\n    }\n    writeWithItems(r1) {\n        let { colors: n1 } = r1.context;\n        r1.writeLine(\"[\").withIndent(()=>r1.writeJoined(Vt, this.items).newLine()).write(\"]\"), this.hasError && r1.afterNextNewline(()=>{\n            r1.writeLine(n1.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n};\nvar ba = \": \", Mn = class {\n    constructor(t1, r1){\n        this.name = t1;\n        this.value = r1;\n        this.hasError = !1;\n    }\n    markAsError() {\n        this.hasError = !0;\n    }\n    getPrintWidth() {\n        return this.name.length + this.value.getPrintWidth() + ba.length;\n    }\n    write(t1) {\n        let r1 = new Le(this.name);\n        this.hasError && r1.underline().setColor(t1.context.colors.red), t1.write(r1).write(ba).write(this.value);\n    }\n};\nvar z = class e extends nt {\n    constructor(){\n        super(...arguments);\n        this.fields = {};\n        this.suggestions = [];\n    }\n    addField(r1) {\n        this.fields[r1.name] = r1;\n    }\n    addSuggestion(r1) {\n        this.suggestions.push(r1);\n    }\n    getField(r1) {\n        return this.fields[r1];\n    }\n    getDeepField(r1) {\n        let [n1, ...i1] = r1, o1 = this.getField(n1);\n        if (!o1) return;\n        let s1 = o1;\n        for (let a1 of i1){\n            let l1;\n            if (s1.value instanceof e ? l1 = s1.value.getField(a1) : s1.value instanceof Ut && (l1 = s1.value.getField(Number(a1))), !l1) return;\n            s1 = l1;\n        }\n        return s1;\n    }\n    getDeepFieldValue(r1) {\n        return r1.length === 0 ? this : this.getDeepField(r1)?.value;\n    }\n    hasField(r1) {\n        return !!this.getField(r1);\n    }\n    removeAllFields() {\n        this.fields = {};\n    }\n    removeField(r1) {\n        delete this.fields[r1];\n    }\n    getFields() {\n        return this.fields;\n    }\n    isEmpty() {\n        return Object.keys(this.fields).length === 0;\n    }\n    getFieldValue(r1) {\n        return this.getField(r1)?.value;\n    }\n    getDeepSubSelectionValue(r1) {\n        let n1 = this;\n        for (let i1 of r1){\n            if (!(n1 instanceof e)) return;\n            let o1 = n1.getSubSelectionValue(i1);\n            if (!o1) return;\n            n1 = o1;\n        }\n        return n1;\n    }\n    getDeepSelectionParent(r1) {\n        let n1 = this.getSelectionParent();\n        if (!n1) return;\n        let i1 = n1;\n        for (let o1 of r1){\n            let s1 = i1.value.getFieldValue(o1);\n            if (!s1 || !(s1 instanceof e)) return;\n            let a1 = s1.getSelectionParent();\n            if (!a1) return;\n            i1 = a1;\n        }\n        return i1;\n    }\n    getSelectionParent() {\n        let r1 = this.getField(\"select\");\n        if (r1?.value instanceof e) return {\n            kind: \"select\",\n            value: r1.value\n        };\n        let n1 = this.getField(\"include\");\n        if (n1?.value instanceof e) return {\n            kind: \"include\",\n            value: n1.value\n        };\n    }\n    getSubSelectionValue(r1) {\n        return this.getSelectionParent()?.value.fields[r1].value;\n    }\n    getPrintWidth() {\n        let r1 = Object.values(this.fields);\n        return r1.length == 0 ? 2 : Math.max(...r1.map((i1)=>i1.getPrintWidth())) + 2;\n    }\n    write(r1) {\n        let n1 = Object.values(this.fields);\n        if (n1.length === 0 && this.suggestions.length === 0) {\n            this.writeEmpty(r1);\n            return;\n        }\n        this.writeWithContents(r1, n1);\n    }\n    writeEmpty(r1) {\n        let n1 = new Le(\"{}\");\n        this.hasError && n1.setColor(r1.context.colors.red).underline(), r1.write(n1);\n    }\n    writeWithContents(r1, n1) {\n        r1.writeLine(\"{\").withIndent(()=>{\n            r1.writeJoined(Vt, [\n                ...n1,\n                ...this.suggestions\n            ]).newLine();\n        }), r1.write(\"}\"), this.hasError && r1.afterNextNewline(()=>{\n            r1.writeLine(r1.context.colors.red(\"~\".repeat(this.getPrintWidth())));\n        });\n    }\n};\nvar Y = class extends nt {\n    constructor(r1){\n        super();\n        this.text = r1;\n    }\n    getPrintWidth() {\n        return this.text.length;\n    }\n    write(r1) {\n        let n1 = new Le(this.text);\n        this.hasError && n1.underline().setColor(r1.context.colors.red), r1.write(n1);\n    }\n};\nvar so = class {\n    constructor(t1){\n        this.errorMessages = [];\n        this.arguments = t1;\n    }\n    write(t1) {\n        t1.write(this.arguments);\n    }\n    addErrorMessage(t1) {\n        this.errorMessages.push(t1);\n    }\n    renderAllMessages(t1) {\n        return this.errorMessages.map((r1)=>r1(t1)).join(`\n`);\n    }\n};\nfunction Sn(e1) {\n    return new so(xa(e1));\n}\nfunction xa(e1) {\n    let t1 = new z;\n    for (let [r1, n1] of Object.entries(e1)){\n        let i1 = new Mn(r1, wa(n1));\n        t1.addField(i1);\n    }\n    return t1;\n}\nfunction wa(e1) {\n    if (typeof e1 == \"string\") return new Y(JSON.stringify(e1));\n    if (typeof e1 == \"number\" || typeof e1 == \"boolean\") return new Y(String(e1));\n    if (typeof e1 == \"bigint\") return new Y(`${e1}n`);\n    if (e1 === null) return new Y(\"null\");\n    if (e1 === void 0) return new Y(\"undefined\");\n    if (Bt(e1)) return new Y(`new Prisma.Decimal(\"${e1.toFixed()}\")`);\n    if (e1 instanceof Uint8Array) return Buffer.isBuffer(e1) ? new Y(`Buffer.alloc(${e1.byteLength})`) : new Y(`new Uint8Array(${e1.byteLength})`);\n    if (e1 instanceof Date) {\n        let t1 = bn(e1) ? e1.toISOString() : \"Invalid Date\";\n        return new Y(`new Date(\"${t1}\")`);\n    }\n    return e1 instanceof ke ? new Y(`Prisma.${e1._getName()}`) : jt(e1) ? new Y(`prisma.${Ho(e1.modelName)}.$fields.${e1.name}`) : Array.isArray(e1) ? Kp(e1) : typeof e1 == \"object\" ? xa(e1) : new Y(Object.prototype.toString.call(e1));\n}\nfunction Kp(e1) {\n    let t1 = new Ut;\n    for (let r1 of e1)t1.addItem(wa(r1));\n    return t1;\n}\nfunction Ea(e1) {\n    if (e1 === void 0) return \"\";\n    let t1 = Sn(e1);\n    return new Nt(0, {\n        colors: Rn\n    }).write(t1).toString();\n}\nvar wr = \"<unknown>\";\nfunction Pa(e1) {\n    var t1 = e1.split(`\n`);\n    return t1.reduce(function(r1, n1) {\n        var i1 = Gp(n1) || Wp(n1) || Zp(n1) || rd(n1) || ed(n1);\n        return i1 && r1.push(i1), r1;\n    }, []);\n}\nvar Qp = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\\/|[a-z]:\\\\|\\\\\\\\).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i, Jp = /\\((\\S*)(?::(\\d+))(?::(\\d+))\\)/;\nfunction Gp(e1) {\n    var t1 = Qp.exec(e1);\n    if (!t1) return null;\n    var r1 = t1[2] && t1[2].indexOf(\"native\") === 0, n1 = t1[2] && t1[2].indexOf(\"eval\") === 0, i1 = Jp.exec(t1[2]);\n    return n1 && i1 != null && (t1[2] = i1[1], t1[3] = i1[2], t1[4] = i1[3]), {\n        file: r1 ? null : t1[2],\n        methodName: t1[1] || wr,\n        arguments: r1 ? [\n            t1[2]\n        ] : [],\n        lineNumber: t1[3] ? +t1[3] : null,\n        column: t1[4] ? +t1[4] : null\n    };\n}\nvar Hp = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction Wp(e1) {\n    var t1 = Hp.exec(e1);\n    return t1 ? {\n        file: t1[2],\n        methodName: t1[1] || wr,\n        arguments: [],\n        lineNumber: +t1[3],\n        column: t1[4] ? +t1[4] : null\n    } : null;\n}\nvar zp = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\\[native).*?|[^@]*bundle)(?::(\\d+))?(?::(\\d+))?\\s*$/i, Yp = /(\\S+) line (\\d+)(?: > eval line \\d+)* > eval/i;\nfunction Zp(e1) {\n    var t1 = zp.exec(e1);\n    if (!t1) return null;\n    var r1 = t1[3] && t1[3].indexOf(\" > eval\") > -1, n1 = Yp.exec(t1[3]);\n    return r1 && n1 != null && (t1[3] = n1[1], t1[4] = n1[2], t1[5] = null), {\n        file: t1[3],\n        methodName: t1[1] || wr,\n        arguments: t1[2] ? t1[2].split(\",\") : [],\n        lineNumber: t1[4] ? +t1[4] : null,\n        column: t1[5] ? +t1[5] : null\n    };\n}\nvar Xp = /^\\s*(?:([^@]*)(?:\\((.*?)\\))?@)?(\\S.*?):(\\d+)(?::(\\d+))?\\s*$/i;\nfunction ed(e1) {\n    var t1 = Xp.exec(e1);\n    return t1 ? {\n        file: t1[3],\n        methodName: t1[1] || wr,\n        arguments: [],\n        lineNumber: +t1[4],\n        column: t1[5] ? +t1[5] : null\n    } : null;\n}\nvar td = /^\\s*at (?:((?:\\[object object\\])?[^\\\\/]+(?: \\[as \\S+\\])?) )?\\(?(.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i;\nfunction rd(e1) {\n    var t1 = td.exec(e1);\n    return t1 ? {\n        file: t1[2],\n        methodName: t1[1] || wr,\n        arguments: [],\n        lineNumber: +t1[3],\n        column: t1[4] ? +t1[4] : null\n    } : null;\n}\nvar ao = class {\n    getLocation() {\n        return null;\n    }\n}, lo = class {\n    constructor(){\n        this._error = new Error;\n    }\n    getLocation() {\n        let t1 = this._error.stack;\n        if (!t1) return null;\n        let n1 = Pa(t1).find((i1)=>{\n            if (!i1.file) return !1;\n            let o1 = Li(i1.file);\n            return o1 !== \"<anonymous>\" && !o1.includes(\"@prisma\") && !o1.includes(\"/packages/client/src/runtime/\") && !o1.endsWith(\"/runtime/binary.js\") && !o1.endsWith(\"/runtime/library.js\") && !o1.endsWith(\"/runtime/edge.js\") && !o1.endsWith(\"/runtime/edge-esm.js\") && !o1.startsWith(\"internal/\") && !i1.methodName.includes(\"new \") && !i1.methodName.includes(\"getCallSite\") && !i1.methodName.includes(\"Proxy.\") && i1.methodName.split(\".\").length < 4;\n        });\n        return !n1 || !n1.file ? null : {\n            fileName: n1.file,\n            lineNumber: n1.lineNumber,\n            columnNumber: n1.column\n        };\n    }\n};\nfunction it(e1) {\n    return e1 === \"minimal\" ? new ao : new lo;\n}\nvar va = {\n    _avg: !0,\n    _count: !0,\n    _sum: !0,\n    _min: !0,\n    _max: !0\n};\nfunction Kt(e1 = {}) {\n    let t1 = id(e1);\n    return Object.entries(t1).reduce((n1, [i1, o1])=>(va[i1] !== void 0 ? n1.select[i1] = {\n            select: o1\n        } : n1[i1] = o1, n1), {\n        select: {}\n    });\n}\nfunction id(e1 = {}) {\n    return typeof e1._count == \"boolean\" ? {\n        ...e1,\n        _count: {\n            _all: e1._count\n        }\n    } : e1;\n}\nfunction In(e1 = {}) {\n    return (t1)=>(typeof e1._count == \"boolean\" && (t1._count = t1._count._all), t1);\n}\nfunction Ta(e1, t1) {\n    let r1 = In(e1);\n    return t1({\n        action: \"aggregate\",\n        unpacker: r1,\n        argsMapper: Kt\n    })(e1);\n}\nfunction od(e1 = {}) {\n    let { select: t1, ...r1 } = e1;\n    return typeof t1 == \"object\" ? Kt({\n        ...r1,\n        _count: t1\n    }) : Kt({\n        ...r1,\n        _count: {\n            _all: !0\n        }\n    });\n}\nfunction sd(e1 = {}) {\n    return typeof e1.select == \"object\" ? (t1)=>In(e1)(t1)._count : (t1)=>In(e1)(t1)._count._all;\n}\nfunction _a(e1, t1) {\n    return t1({\n        action: \"count\",\n        unpacker: sd(e1),\n        argsMapper: od\n    })(e1);\n}\nfunction ad(e1 = {}) {\n    let t1 = Kt(e1);\n    if (Array.isArray(t1.by)) for (let r1 of t1.by)typeof r1 == \"string\" && (t1.select[r1] = !0);\n    else typeof t1.by == \"string\" && (t1.select[t1.by] = !0);\n    return t1;\n}\nfunction ld(e1 = {}) {\n    return (t1)=>(typeof e1?._count == \"boolean\" && t1.forEach((r1)=>{\n            r1._count = r1._count._all;\n        }), t1);\n}\nfunction Ca(e1, t1) {\n    return t1({\n        action: \"groupBy\",\n        unpacker: ld(e1),\n        argsMapper: ad\n    })(e1);\n}\nfunction Aa(e1, t1, r1) {\n    if (t1 === \"aggregate\") return (n1)=>Ta(n1, r1);\n    if (t1 === \"count\") return (n1)=>_a(n1, r1);\n    if (t1 === \"groupBy\") return (n1)=>Ca(n1, r1);\n}\nfunction Ra(e1, t1) {\n    let r1 = t1.fields.filter((i1)=>!i1.relationName), n1 = Ki(r1, (i1)=>i1.name);\n    return new Proxy({}, {\n        get (i1, o1) {\n            if (o1 in i1 || typeof o1 == \"symbol\") return i1[o1];\n            let s1 = n1[o1];\n            if (s1) return new xr(e1, o1, s1.type, s1.isList, s1.kind === \"enum\");\n        },\n        ...hn(Object.keys(n1))\n    });\n}\nvar Ma = (e1)=>Array.isArray(e1) ? e1 : e1.split(\".\"), uo = (e1, t1)=>Ma(t1).reduce((r1, n1)=>r1 && r1[n1], e1), Sa = (e1, t1, r1)=>Ma(t1).reduceRight((n1, i1, o1, s1)=>Object.assign({}, uo(e1, s1.slice(0, o1)), {\n            [i1]: n1\n        }), r1);\nfunction ud(e1, t1) {\n    return e1 === void 0 || t1 === void 0 ? [] : [\n        ...t1,\n        \"select\",\n        e1\n    ];\n}\nfunction cd(e1, t1, r1) {\n    return t1 === void 0 ? e1 ?? {} : Sa(t1, r1, e1 || !0);\n}\nfunction co(e1, t1, r1, n1, i1, o1) {\n    let a1 = e1._runtimeDataModel.models[t1].fields.reduce((l1, u1)=>({\n            ...l1,\n            [u1.name]: u1\n        }), {});\n    return (l1)=>{\n        let u1 = it(e1._errorFormat), c1 = ud(n1, i1), p1 = cd(l1, o1, c1), d1 = r1({\n            dataPath: c1,\n            callsite: u1\n        })(p1), f1 = pd(e1, t1);\n        return new Proxy(d1, {\n            get (y1, g1) {\n                if (!f1.includes(g1)) return y1[g1];\n                let A1 = [\n                    a1[g1].type,\n                    r1,\n                    g1\n                ], R1 = [\n                    c1,\n                    p1\n                ];\n                return co(e1, ...A1, ...R1);\n            },\n            ...hn([\n                ...f1,\n                ...Object.getOwnPropertyNames(d1)\n            ])\n        });\n    };\n}\nfunction pd(e1, t1) {\n    return e1._runtimeDataModel.models[t1].fields.filter((r1)=>r1.kind === \"object\").map((r1)=>r1.name);\n}\nvar Na = F($i());\nvar Da = F(__webpack_require__(/*! fs */ \"fs\"));\nvar Ia = {\n    keyword: We,\n    entity: We,\n    value: (e1)=>de(Mt(e1)),\n    punctuation: Mt,\n    directive: We,\n    function: We,\n    variable: (e1)=>de(Mt(e1)),\n    string: (e1)=>de(pt(e1)),\n    boolean: Re,\n    number: We,\n    comment: Zr\n};\nvar dd = (e1)=>e1, kn = {}, md = 0, C = {\n    manual: kn.Prism && kn.Prism.manual,\n    disableWorkerMessageHandler: kn.Prism && kn.Prism.disableWorkerMessageHandler,\n    util: {\n        encode: function(e1) {\n            if (e1 instanceof Ae) {\n                let t1 = e1;\n                return new Ae(t1.type, C.util.encode(t1.content), t1.alias);\n            } else return Array.isArray(e1) ? e1.map(C.util.encode) : e1.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/\\u00a0/g, \" \");\n        },\n        type: function(e1) {\n            return Object.prototype.toString.call(e1).slice(8, -1);\n        },\n        objId: function(e1) {\n            return e1.__id || Object.defineProperty(e1, \"__id\", {\n                value: ++md\n            }), e1.__id;\n        },\n        clone: function e1(t1, r1) {\n            let n1, i1, o1 = C.util.type(t1);\n            switch(r1 = r1 || {}, o1){\n                case \"Object\":\n                    if (i1 = C.util.objId(t1), r1[i1]) return r1[i1];\n                    n1 = {}, r1[i1] = n1;\n                    for(let s1 in t1)t1.hasOwnProperty(s1) && (n1[s1] = e1(t1[s1], r1));\n                    return n1;\n                case \"Array\":\n                    return i1 = C.util.objId(t1), r1[i1] ? r1[i1] : (n1 = [], r1[i1] = n1, t1.forEach(function(s1, a1) {\n                        n1[a1] = e1(s1, r1);\n                    }), n1);\n                default:\n                    return t1;\n            }\n        }\n    },\n    languages: {\n        extend: function(e1, t1) {\n            let r1 = C.util.clone(C.languages[e1]);\n            for(let n1 in t1)r1[n1] = t1[n1];\n            return r1;\n        },\n        insertBefore: function(e1, t1, r1, n1) {\n            n1 = n1 || C.languages;\n            let i1 = n1[e1], o1 = {};\n            for(let a1 in i1)if (i1.hasOwnProperty(a1)) {\n                if (a1 == t1) for(let l1 in r1)r1.hasOwnProperty(l1) && (o1[l1] = r1[l1]);\n                r1.hasOwnProperty(a1) || (o1[a1] = i1[a1]);\n            }\n            let s1 = n1[e1];\n            return n1[e1] = o1, C.languages.DFS(C.languages, function(a1, l1) {\n                l1 === s1 && a1 != e1 && (this[a1] = o1);\n            }), o1;\n        },\n        DFS: function e1(t1, r1, n1, i1) {\n            i1 = i1 || {};\n            let o1 = C.util.objId;\n            for(let s1 in t1)if (t1.hasOwnProperty(s1)) {\n                r1.call(t1, s1, t1[s1], n1 || s1);\n                let a1 = t1[s1], l1 = C.util.type(a1);\n                l1 === \"Object\" && !i1[o1(a1)] ? (i1[o1(a1)] = !0, e1(a1, r1, null, i1)) : l1 === \"Array\" && !i1[o1(a1)] && (i1[o1(a1)] = !0, e1(a1, r1, s1, i1));\n            }\n        }\n    },\n    plugins: {},\n    highlight: function(e1, t1, r1) {\n        let n1 = {\n            code: e1,\n            grammar: t1,\n            language: r1\n        };\n        return C.hooks.run(\"before-tokenize\", n1), n1.tokens = C.tokenize(n1.code, n1.grammar), C.hooks.run(\"after-tokenize\", n1), Ae.stringify(C.util.encode(n1.tokens), n1.language);\n    },\n    matchGrammar: function(e1, t1, r1, n1, i1, o1, s1) {\n        for(let g1 in r1){\n            if (!r1.hasOwnProperty(g1) || !r1[g1]) continue;\n            if (g1 == s1) return;\n            let _1 = r1[g1];\n            _1 = C.util.type(_1) === \"Array\" ? _1 : [\n                _1\n            ];\n            for(let A1 = 0; A1 < _1.length; ++A1){\n                let R1 = _1[A1], E1 = R1.inside, S1 = !!R1.lookbehind, we1 = !!R1.greedy, X1 = 0, ut1 = R1.alias;\n                if (we1 && !R1.pattern.global) {\n                    let K1 = R1.pattern.toString().match(/[imuy]*$/)[0];\n                    R1.pattern = RegExp(R1.pattern.source, K1 + \"g\");\n                }\n                R1 = R1.pattern || R1;\n                for(let K1 = n1, ne1 = i1; K1 < t1.length; ne1 += t1[K1].length, ++K1){\n                    let Be1 = t1[K1];\n                    if (t1.length > e1.length) return;\n                    if (Be1 instanceof Ae) continue;\n                    if (we1 && K1 != t1.length - 1) {\n                        R1.lastIndex = ne1;\n                        var p1 = R1.exec(e1);\n                        if (!p1) break;\n                        var c1 = p1.index + (S1 ? p1[1].length : 0), d1 = p1.index + p1[0].length, a1 = K1, l1 = ne1;\n                        for(let N1 = t1.length; a1 < N1 && (l1 < d1 || !t1[a1].type && !t1[a1 - 1].greedy); ++a1)l1 += t1[a1].length, c1 >= l1 && (++K1, ne1 = l1);\n                        if (t1[K1] instanceof Ae) continue;\n                        u1 = a1 - K1, Be1 = e1.slice(ne1, l1), p1.index -= ne1;\n                    } else {\n                        R1.lastIndex = 0;\n                        var p1 = R1.exec(Be1), u1 = 1;\n                    }\n                    if (!p1) {\n                        if (o1) break;\n                        continue;\n                    }\n                    S1 && (X1 = p1[1] ? p1[1].length : 0);\n                    var c1 = p1.index + X1, p1 = p1[0].slice(X1), d1 = c1 + p1.length, f1 = Be1.slice(0, c1), y1 = Be1.slice(d1);\n                    let ie1 = [\n                        K1,\n                        u1\n                    ];\n                    f1 && (++K1, ne1 += f1.length, ie1.push(f1));\n                    let Tt1 = new Ae(g1, E1 ? C.tokenize(p1, E1) : p1, ut1, p1, we1);\n                    if (ie1.push(Tt1), y1 && ie1.push(y1), Array.prototype.splice.apply(t1, ie1), u1 != 1 && C.matchGrammar(e1, t1, r1, K1, ne1, !0, g1), o1) break;\n                }\n            }\n        }\n    },\n    tokenize: function(e1, t1) {\n        let r1 = [\n            e1\n        ], n1 = t1.rest;\n        if (n1) {\n            for(let i1 in n1)t1[i1] = n1[i1];\n            delete t1.rest;\n        }\n        return C.matchGrammar(e1, r1, t1, 0, 0, !1), r1;\n    },\n    hooks: {\n        all: {},\n        add: function(e1, t1) {\n            let r1 = C.hooks.all;\n            r1[e1] = r1[e1] || [], r1[e1].push(t1);\n        },\n        run: function(e1, t1) {\n            let r1 = C.hooks.all[e1];\n            if (!(!r1 || !r1.length)) for(var n1 = 0, i1; i1 = r1[n1++];)i1(t1);\n        }\n    },\n    Token: Ae\n};\nC.languages.clike = {\n    comment: [\n        {\n            pattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^\\\\:])\\/\\/.*/,\n            lookbehind: !0,\n            greedy: !0\n        }\n    ],\n    string: {\n        pattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n        greedy: !0\n    },\n    \"class-name\": {\n        pattern: /((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,\n        lookbehind: !0,\n        inside: {\n            punctuation: /[.\\\\]/\n        }\n    },\n    keyword: /\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,\n    boolean: /\\b(?:true|false)\\b/,\n    function: /\\w+(?=\\()/,\n    number: /\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n    operator: /--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,\n    punctuation: /[{}[\\];(),.:]/\n};\nC.languages.javascript = C.languages.extend(\"clike\", {\n    \"class-name\": [\n        C.languages.clike[\"class-name\"],\n        {\n            pattern: /(^|[^$\\w\\xA0-\\uFFFF])[_$A-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\.(?:prototype|constructor))/,\n            lookbehind: !0\n        }\n    ],\n    keyword: [\n        {\n            pattern: /((?:^|})\\s*)(?:catch|finally)\\b/,\n            lookbehind: !0\n        },\n        {\n            pattern: /(^|[^.])\\b(?:as|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n            lookbehind: !0\n        }\n    ],\n    number: /\\b(?:(?:0[xX](?:[\\dA-Fa-f](?:_[\\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\\d(?:_\\d)?)+n|NaN|Infinity)\\b|(?:\\b(?:\\d(?:_\\d)?)+\\.?(?:\\d(?:_\\d)?)*|\\B\\.(?:\\d(?:_\\d)?)+)(?:[Ee][+-]?(?:\\d(?:_\\d)?)+)?/,\n    function: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n    operator: /-[-=]?|\\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\\|[|=]?|\\*\\*?=?|\\/=?|~|\\^=?|%=?|\\?|\\.{3}/\n});\nC.languages.javascript[\"class-name\"][0].pattern = /(\\b(?:class|interface|extends|implements|instanceof|new)\\s+)[\\w.\\\\]+/;\nC.languages.insertBefore(\"javascript\", \"keyword\", {\n    regex: {\n        pattern: /((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s])\\s*)\\/(\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[gimyus]{0,6}(?=\\s*($|[\\r\\n,.;})\\]]))/,\n        lookbehind: !0,\n        greedy: !0\n    },\n    \"function-variable\": {\n        pattern: /[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|[_$a-zA-Z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)\\s*=>))/,\n        alias: \"function\"\n    },\n    parameter: [\n        {\n            pattern: /(function(?:\\s+[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*)?\\s*\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\))/,\n            lookbehind: !0,\n            inside: C.languages.javascript\n        },\n        {\n            pattern: /[_$a-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*(?=\\s*=>)/i,\n            inside: C.languages.javascript\n        },\n        {\n            pattern: /(\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*=>)/,\n            lookbehind: !0,\n            inside: C.languages.javascript\n        },\n        {\n            pattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:[_$A-Za-z\\xA0-\\uFFFF][$\\w\\xA0-\\uFFFF]*\\s*)\\(\\s*)(?!\\s)(?:[^()]|\\([^()]*\\))+?(?=\\s*\\)\\s*\\{)/,\n            lookbehind: !0,\n            inside: C.languages.javascript\n        }\n    ],\n    constant: /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\nC.languages.markup && C.languages.markup.tag.addInlined(\"script\", \"javascript\");\nC.languages.js = C.languages.javascript;\nC.languages.typescript = C.languages.extend(\"javascript\", {\n    keyword: /\\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\\b/,\n    builtin: /\\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\\b/\n});\nC.languages.ts = C.languages.typescript;\nfunction Ae(e1, t1, r1, n1, i1) {\n    this.type = e1, this.content = t1, this.alias = r1, this.length = (n1 || \"\").length | 0, this.greedy = !!i1;\n}\nAe.stringify = function(e1, t1) {\n    return typeof e1 == \"string\" ? e1 : Array.isArray(e1) ? e1.map(function(r1) {\n        return Ae.stringify(r1, t1);\n    }).join(\"\") : fd(e1.type)(e1.content);\n};\nfunction fd(e1) {\n    return Ia[e1] || dd;\n}\nfunction ka(e1) {\n    return gd(e1, C.languages.javascript);\n}\nfunction gd(e1, t1) {\n    return C.tokenize(e1, t1).map((n1)=>Ae.stringify(n1)).join(\"\");\n}\nvar Fa = F(qs());\nfunction Oa(e1) {\n    return (0, Fa.default)(e1);\n}\nvar Fn = class e {\n    static read(t1) {\n        let r1;\n        try {\n            r1 = Da.default.readFileSync(t1, \"utf-8\");\n        } catch  {\n            return null;\n        }\n        return e.fromContent(r1);\n    }\n    static fromContent(t1) {\n        let r1 = t1.split(/\\r?\\n/);\n        return new e(1, r1);\n    }\n    constructor(t1, r1){\n        this.firstLineNumber = t1, this.lines = r1;\n    }\n    get lastLineNumber() {\n        return this.firstLineNumber + this.lines.length - 1;\n    }\n    mapLineAt(t1, r1) {\n        if (t1 < this.firstLineNumber || t1 > this.lines.length + this.firstLineNumber) return this;\n        let n1 = t1 - this.firstLineNumber, i1 = [\n            ...this.lines\n        ];\n        return i1[n1] = r1(i1[n1]), new e(this.firstLineNumber, i1);\n    }\n    mapLines(t1) {\n        return new e(this.firstLineNumber, this.lines.map((r1, n1)=>t1(r1, this.firstLineNumber + n1)));\n    }\n    lineAt(t1) {\n        return this.lines[t1 - this.firstLineNumber];\n    }\n    prependSymbolAt(t1, r1) {\n        return this.mapLines((n1, i1)=>i1 === t1 ? `${r1} ${n1}` : `  ${n1}`);\n    }\n    slice(t1, r1) {\n        let n1 = this.lines.slice(t1 - 1, r1).join(`\n`);\n        return new e(t1, Oa(n1).split(`\n`));\n    }\n    highlight() {\n        let t1 = ka(this.toString());\n        return new e(this.firstLineNumber, t1.split(`\n`));\n    }\n    toString() {\n        return this.lines.join(`\n`);\n    }\n};\nvar yd = {\n    red: ve,\n    gray: Zr,\n    dim: He,\n    bold: de,\n    underline: ue,\n    highlightSource: (e1)=>e1.highlight()\n}, hd = {\n    red: (e1)=>e1,\n    gray: (e1)=>e1,\n    dim: (e1)=>e1,\n    bold: (e1)=>e1,\n    underline: (e1)=>e1,\n    highlightSource: (e1)=>e1\n};\nfunction bd({ callsite: e1, message: t1, originalMethod: r1, isPanic: n1, callArguments: i1 }, o1) {\n    let s1 = {\n        functionName: `prisma.${r1}()`,\n        message: t1,\n        isPanic: n1 ?? !1,\n        callArguments: i1\n    };\n    if (!e1 || \"undefined\" < \"u\" || \"development\" === \"production\") return s1;\n    let a1 = e1.getLocation();\n    if (!a1 || !a1.lineNumber || !a1.columnNumber) return s1;\n    let l1 = Math.max(1, a1.lineNumber - 3), u1 = Fn.read(a1.fileName)?.slice(l1, a1.lineNumber), c1 = u1?.lineAt(a1.lineNumber);\n    if (u1 && c1) {\n        let p1 = wd(c1), d1 = xd(c1);\n        if (!d1) return s1;\n        s1.functionName = `${d1.code})`, s1.location = a1, n1 || (u1 = u1.mapLineAt(a1.lineNumber, (y1)=>y1.slice(0, d1.openingBraceIndex))), u1 = o1.highlightSource(u1);\n        let f1 = String(u1.lastLineNumber).length;\n        if (s1.contextLines = u1.mapLines((y1, g1)=>o1.gray(String(g1).padStart(f1)) + \" \" + y1).mapLines((y1)=>o1.dim(y1)).prependSymbolAt(a1.lineNumber, o1.bold(o1.red(\"→\"))), i1) {\n            let y1 = p1 + f1 + 1;\n            y1 += 2, s1.callArguments = (0, Na.default)(i1, y1).slice(y1);\n        }\n    }\n    return s1;\n}\nfunction xd(e1) {\n    let t1 = Object.keys(Ee.ModelAction).join(\"|\"), n1 = new RegExp(String.raw`\\.(${t1})\\(`).exec(e1);\n    if (n1) {\n        let i1 = n1.index + n1[0].length, o1 = e1.lastIndexOf(\" \", n1.index) + 1;\n        return {\n            code: e1.slice(o1, i1),\n            openingBraceIndex: i1\n        };\n    }\n    return null;\n}\nfunction wd(e1) {\n    let t1 = 0;\n    for(let r1 = 0; r1 < e1.length; r1++){\n        if (e1.charAt(r1) !== \" \") return t1;\n        t1++;\n    }\n    return t1;\n}\nfunction Ed({ functionName: e1, location: t1, message: r1, isPanic: n1, contextLines: i1, callArguments: o1 }, s1) {\n    let a1 = [\n        \"\"\n    ], l1 = t1 ? \" in\" : \":\";\n    if (n1 ? (a1.push(s1.red(`Oops, an unknown error occurred! This is ${s1.bold(\"on us\")}, you did nothing wrong.`)), a1.push(s1.red(`It occurred in the ${s1.bold(`\\`${e1}\\``)} invocation${l1}`))) : a1.push(s1.red(`Invalid ${s1.bold(`\\`${e1}\\``)} invocation${l1}`)), t1 && a1.push(s1.underline(Pd(t1))), i1) {\n        a1.push(\"\");\n        let u1 = [\n            i1.toString()\n        ];\n        o1 && (u1.push(o1), u1.push(s1.dim(\")\"))), a1.push(u1.join(\"\")), o1 && a1.push(\"\");\n    } else a1.push(\"\"), o1 && a1.push(o1), a1.push(\"\");\n    return a1.push(r1), a1.join(`\n`);\n}\nfunction Pd(e1) {\n    let t1 = [\n        e1.fileName\n    ];\n    return e1.lineNumber && t1.push(String(e1.lineNumber)), e1.columnNumber && t1.push(String(e1.columnNumber)), t1.join(\":\");\n}\nfunction Qt(e1) {\n    let t1 = e1.showColors ? yd : hd, r1 = bd(e1, t1);\n    return Ed(r1, t1);\n}\nfunction La(e1, t1, r1, n1) {\n    return e1 === Ee.ModelAction.findFirstOrThrow || e1 === Ee.ModelAction.findUniqueOrThrow ? vd(t1, r1, n1) : n1;\n}\nfunction vd(e1, t1, r1) {\n    return async (n1)=>{\n        if (\"rejectOnNotFound\" in n1.args) {\n            let o1 = Qt({\n                originalMethod: n1.clientMethod,\n                callsite: n1.callsite,\n                message: \"'rejectOnNotFound' option is not supported\"\n            });\n            throw new se(o1, {\n                clientVersion: t1\n            });\n        }\n        return await r1(n1).catch((o1)=>{\n            throw o1 instanceof H && o1.code === \"P2025\" ? new Ve(`No ${e1} found`, t1) : o1;\n        });\n    };\n}\nfunction $e(e1) {\n    return e1.replace(/^./, (t1)=>t1.toLowerCase());\n}\nvar Td = [\n    \"findUnique\",\n    \"findUniqueOrThrow\",\n    \"findFirst\",\n    \"findFirstOrThrow\",\n    \"create\",\n    \"update\",\n    \"upsert\",\n    \"delete\"\n], _d = [\n    \"aggregate\",\n    \"count\",\n    \"groupBy\"\n];\nfunction po(e1, t1) {\n    let r1 = e1._extensions.getAllModelExtensions(t1) ?? {}, n1 = [\n        Cd(e1, t1),\n        Rd(e1, t1),\n        yr(r1),\n        ce(\"name\", ()=>t1),\n        ce(\"$name\", ()=>t1),\n        ce(\"$parent\", ()=>e1._appliedParent)\n    ];\n    return Oe({}, n1);\n}\nfunction Cd(e1, t1) {\n    let r1 = $e(t1), n1 = Object.keys(Ee.ModelAction).concat(\"count\");\n    return {\n        getKeys () {\n            return n1;\n        },\n        getPropertyValue (i1) {\n            let o1 = i1, s1 = (l1)=>e1._request(l1);\n            s1 = La(o1, t1, e1._clientVersion, s1);\n            let a1 = (l1)=>(u1)=>{\n                    let c1 = it(e1._errorFormat);\n                    return e1._createPrismaPromise((p1)=>{\n                        let d1 = {\n                            args: u1,\n                            dataPath: [],\n                            action: o1,\n                            model: t1,\n                            clientMethod: `${r1}.${i1}`,\n                            jsModelName: r1,\n                            transaction: p1,\n                            callsite: c1\n                        };\n                        return s1({\n                            ...d1,\n                            ...l1\n                        });\n                    });\n                };\n            return Td.includes(o1) ? co(e1, t1, a1) : Ad(i1) ? Aa(e1, i1, a1) : a1({});\n        }\n    };\n}\nfunction Ad(e1) {\n    return _d.includes(e1);\n}\nfunction Rd(e1, t1) {\n    return bt(ce(\"fields\", ()=>{\n        let r1 = e1._runtimeDataModel.models[t1];\n        return Ra(t1, r1);\n    }));\n}\nfunction $a(e1) {\n    return e1.replace(/^./, (t1)=>t1.toUpperCase());\n}\nvar mo = Symbol();\nfunction Er(e1) {\n    let t1 = [\n        Md(e1),\n        ce(mo, ()=>e1),\n        ce(\"$parent\", ()=>e1._appliedParent)\n    ], r1 = e1._extensions.getAllClientExtensions();\n    return r1 && t1.push(yr(r1)), Oe(e1, t1);\n}\nfunction Md(e1) {\n    let t1 = Object.keys(e1._runtimeDataModel.models), r1 = t1.map($e), n1 = [\n        ...new Set(t1.concat(r1))\n    ];\n    return bt({\n        getKeys () {\n            return n1;\n        },\n        getPropertyValue (i1) {\n            let o1 = $a(i1);\n            if (e1._runtimeDataModel.models[o1] !== void 0) return po(e1, o1);\n            if (e1._runtimeDataModel.models[i1] !== void 0) return po(e1, i1);\n        },\n        getPropertyDescriptor (i1) {\n            if (!r1.includes(i1)) return {\n                enumerable: !1\n            };\n        }\n    });\n}\nfunction On(e1) {\n    return e1[mo] ? e1[mo] : e1;\n}\nfunction qa(e1) {\n    if (typeof e1 == \"function\") return e1(this);\n    let t1 = On(this), r1 = Object.create(t1, {\n        _extensions: {\n            value: this._extensions.append(e1)\n        },\n        _appliedParent: {\n            value: this,\n            configurable: !0\n        },\n        $use: {\n            value: void 0\n        },\n        $on: {\n            value: void 0\n        }\n    });\n    return Er(r1);\n}\nfunction Ba({ result: e1, modelName: t1, select: r1, extensions: n1 }) {\n    let i1 = n1.getAllComputedFields(t1);\n    if (!i1) return e1;\n    let o1 = [], s1 = [];\n    for (let a1 of Object.values(i1)){\n        if (r1) {\n            if (!r1[a1.name]) continue;\n            let l1 = a1.needs.filter((u1)=>!r1[u1]);\n            l1.length > 0 && s1.push(hr(l1));\n        }\n        Sd(e1, a1.needs) && o1.push(Id(a1, Oe(e1, o1)));\n    }\n    return o1.length > 0 || s1.length > 0 ? Oe(e1, [\n        ...o1,\n        ...s1\n    ]) : e1;\n}\nfunction Sd(e1, t1) {\n    return t1.every((r1)=>Ui(e1, r1));\n}\nfunction Id(e1, t1) {\n    return bt(ce(e1.name, ()=>e1.compute(t1)));\n}\nfunction Dn({ visitor: e1, result: t1, args: r1, runtimeDataModel: n1, modelName: i1 }) {\n    if (Array.isArray(t1)) {\n        for(let s1 = 0; s1 < t1.length; s1++)t1[s1] = Dn({\n            result: t1[s1],\n            args: r1,\n            modelName: i1,\n            runtimeDataModel: n1,\n            visitor: e1\n        });\n        return t1;\n    }\n    let o1 = e1(t1, i1, r1) ?? t1;\n    return r1.include && ja({\n        includeOrSelect: r1.include,\n        result: o1,\n        parentModelName: i1,\n        runtimeDataModel: n1,\n        visitor: e1\n    }), r1.select && ja({\n        includeOrSelect: r1.select,\n        result: o1,\n        parentModelName: i1,\n        runtimeDataModel: n1,\n        visitor: e1\n    }), o1;\n}\nfunction ja({ includeOrSelect: e1, result: t1, parentModelName: r1, runtimeDataModel: n1, visitor: i1 }) {\n    for (let [o1, s1] of Object.entries(e1)){\n        if (!s1 || t1[o1] == null) continue;\n        let l1 = n1.models[r1].fields.find((c1)=>c1.name === o1);\n        if (!l1 || l1.kind !== \"object\" || !l1.relationName) continue;\n        let u1 = typeof s1 == \"object\" ? s1 : {};\n        t1[o1] = Dn({\n            visitor: i1,\n            result: t1[o1],\n            args: u1,\n            modelName: l1.type,\n            runtimeDataModel: n1\n        });\n    }\n}\nfunction Va({ result: e1, modelName: t1, args: r1, extensions: n1, runtimeDataModel: i1 }) {\n    return n1.isEmpty() || e1 == null || typeof e1 != \"object\" || !i1.models[t1] ? e1 : Dn({\n        result: e1,\n        args: r1 ?? {},\n        modelName: t1,\n        runtimeDataModel: i1,\n        visitor: (s1, a1, l1)=>Ba({\n                result: s1,\n                modelName: $e(a1),\n                select: l1.select,\n                extensions: n1\n            })\n    });\n}\nfunction Ua(e1) {\n    if (e1 instanceof fe) return kd(e1);\n    if (Array.isArray(e1)) {\n        let r1 = [\n            e1[0]\n        ];\n        for(let n1 = 1; n1 < e1.length; n1++)r1[n1] = Pr(e1[n1]);\n        return r1;\n    }\n    let t1 = {};\n    for(let r1 in e1)t1[r1] = Pr(e1[r1]);\n    return t1;\n}\nfunction kd(e1) {\n    return new fe(e1.strings, e1.values);\n}\nfunction Pr(e1) {\n    if (typeof e1 != \"object\" || e1 == null || e1 instanceof ke || jt(e1)) return e1;\n    if (Bt(e1)) return new Ne(e1.toFixed());\n    if (Lt(e1)) return new Date(+e1);\n    if (ArrayBuffer.isView(e1)) return e1.slice(0);\n    if (Array.isArray(e1)) {\n        let t1 = e1.length, r1;\n        for(r1 = Array(t1); t1--;)r1[t1] = Pr(e1[t1]);\n        return r1;\n    }\n    if (typeof e1 == \"object\") {\n        let t1 = {};\n        for(let r1 in e1)r1 === \"__proto__\" ? Object.defineProperty(t1, r1, {\n            value: Pr(e1[r1]),\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n        }) : t1[r1] = Pr(e1[r1]);\n        return t1;\n    }\n    yt(e1, \"Unknown value\");\n}\nfunction Qa(e1, t1, r1, n1 = 0) {\n    return e1._createPrismaPromise((i1)=>{\n        let o1 = t1.customDataProxyFetch;\n        return \"transaction\" in t1 && i1 !== void 0 && (t1.transaction?.kind === \"batch\" && t1.transaction.lock.then(), t1.transaction = i1), n1 === r1.length ? e1._executeRequest(t1) : r1[n1]({\n            model: t1.model,\n            operation: t1.model ? t1.action : t1.clientMethod,\n            args: Ua(t1.args ?? {}),\n            __internalParams: t1,\n            query: (s1, a1 = t1)=>{\n                let l1 = a1.customDataProxyFetch;\n                return a1.customDataProxyFetch = Wa(o1, l1), a1.args = s1, Qa(e1, a1, r1, n1 + 1);\n            }\n        });\n    });\n}\nfunction Ja(e1, t1) {\n    let { jsModelName: r1, action: n1, clientMethod: i1 } = t1, o1 = r1 ? n1 : i1;\n    if (e1._extensions.isEmpty()) return e1._executeRequest(t1);\n    let s1 = e1._extensions.getAllQueryCallbacks(r1 ?? \"$none\", o1);\n    return Qa(e1, t1, s1);\n}\nfunction Ga(e1) {\n    return (t1)=>{\n        let r1 = {\n            requests: t1\n        }, n1 = t1[0].extensions.getAllBatchQueryCallbacks();\n        return n1.length ? Ha(r1, n1, 0, e1) : e1(r1);\n    };\n}\nfunction Ha(e1, t1, r1, n1) {\n    if (r1 === t1.length) return n1(e1);\n    let i1 = e1.customDataProxyFetch, o1 = e1.requests[0].transaction;\n    return t1[r1]({\n        args: {\n            queries: e1.requests.map((s1)=>({\n                    model: s1.modelName,\n                    operation: s1.action,\n                    args: s1.args\n                })),\n            transaction: o1 ? {\n                isolationLevel: o1.kind === \"batch\" ? o1.isolationLevel : void 0\n            } : void 0\n        },\n        __internalParams: e1,\n        query (s1, a1 = e1) {\n            let l1 = a1.customDataProxyFetch;\n            return a1.customDataProxyFetch = Wa(i1, l1), Ha(a1, t1, r1 + 1, n1);\n        }\n    });\n}\nvar Ka = (e1)=>e1;\nfunction Wa(e1 = Ka, t1 = Ka) {\n    return (r1)=>e1(t1(r1));\n}\nfunction Ya(e1, t1, r1) {\n    let n1 = $e(r1);\n    return !t1.result || !(t1.result.$allModels || t1.result[n1]) ? e1 : Fd({\n        ...e1,\n        ...za(t1.name, e1, t1.result.$allModels),\n        ...za(t1.name, e1, t1.result[n1])\n    });\n}\nfunction Fd(e1) {\n    let t1 = new Fe, r1 = (n1, i1)=>t1.getOrCreate(n1, ()=>i1.has(n1) ? [\n                n1\n            ] : (i1.add(n1), e1[n1] ? e1[n1].needs.flatMap((o1)=>r1(o1, i1)) : [\n                n1\n            ]));\n    return Ot(e1, (n1)=>({\n            ...n1,\n            needs: r1(n1.name, new Set)\n        }));\n}\nfunction za(e1, t1, r1) {\n    return r1 ? Ot(r1, ({ needs: n1, compute: i1 }, o1)=>({\n            name: o1,\n            needs: n1 ? Object.keys(n1).filter((s1)=>n1[s1]) : [],\n            compute: Od(t1, o1, i1)\n        })) : {};\n}\nfunction Od(e1, t1, r1) {\n    let n1 = e1?.[t1]?.compute;\n    return n1 ? (i1)=>r1({\n            ...i1,\n            [t1]: n1(i1)\n        }) : r1;\n}\nfunction Za(e1, t1) {\n    if (!t1) return e1;\n    let r1 = {\n        ...e1\n    };\n    for (let n1 of Object.values(t1))if (e1[n1.name]) for (let i1 of n1.needs)r1[i1] = !0;\n    return r1;\n}\nvar Nn = class {\n    constructor(t1, r1){\n        this.extension = t1;\n        this.previous = r1;\n        this.computedFieldsCache = new Fe;\n        this.modelExtensionsCache = new Fe;\n        this.queryCallbacksCache = new Fe;\n        this.clientExtensions = cr(()=>this.extension.client ? {\n                ...this.previous?.getAllClientExtensions(),\n                ...this.extension.client\n            } : this.previous?.getAllClientExtensions());\n        this.batchCallbacks = cr(()=>{\n            let t1 = this.previous?.getAllBatchQueryCallbacks() ?? [], r1 = this.extension.query?.$__internalBatch;\n            return r1 ? t1.concat(r1) : t1;\n        });\n    }\n    getAllComputedFields(t1) {\n        return this.computedFieldsCache.getOrCreate(t1, ()=>Ya(this.previous?.getAllComputedFields(t1), this.extension, t1));\n    }\n    getAllClientExtensions() {\n        return this.clientExtensions.get();\n    }\n    getAllModelExtensions(t1) {\n        return this.modelExtensionsCache.getOrCreate(t1, ()=>{\n            let r1 = $e(t1);\n            return !this.extension.model || !(this.extension.model[r1] || this.extension.model.$allModels) ? this.previous?.getAllModelExtensions(t1) : {\n                ...this.previous?.getAllModelExtensions(t1),\n                ...this.extension.model.$allModels,\n                ...this.extension.model[r1]\n            };\n        });\n    }\n    getAllQueryCallbacks(t1, r1) {\n        return this.queryCallbacksCache.getOrCreate(`${t1}:${r1}`, ()=>{\n            let n1 = this.previous?.getAllQueryCallbacks(t1, r1) ?? [], i1 = [], o1 = this.extension.query;\n            return !o1 || !(o1[t1] || o1.$allModels || o1[r1] || o1.$allOperations) ? n1 : (o1[t1] !== void 0 && (o1[t1][r1] !== void 0 && i1.push(o1[t1][r1]), o1[t1].$allOperations !== void 0 && i1.push(o1[t1].$allOperations)), t1 !== \"$none\" && o1.$allModels !== void 0 && (o1.$allModels[r1] !== void 0 && i1.push(o1.$allModels[r1]), o1.$allModels.$allOperations !== void 0 && i1.push(o1.$allModels.$allOperations)), o1[r1] !== void 0 && i1.push(o1[r1]), o1.$allOperations !== void 0 && i1.push(o1.$allOperations), n1.concat(i1));\n        });\n    }\n    getAllBatchQueryCallbacks() {\n        return this.batchCallbacks.get();\n    }\n}, Ln = class e {\n    constructor(t1){\n        this.head = t1;\n    }\n    static empty() {\n        return new e;\n    }\n    static single(t1) {\n        return new e(new Nn(t1));\n    }\n    isEmpty() {\n        return this.head === void 0;\n    }\n    append(t1) {\n        return new e(new Nn(t1, this.head));\n    }\n    getAllComputedFields(t1) {\n        return this.head?.getAllComputedFields(t1);\n    }\n    getAllClientExtensions() {\n        return this.head?.getAllClientExtensions();\n    }\n    getAllModelExtensions(t1) {\n        return this.head?.getAllModelExtensions(t1);\n    }\n    getAllQueryCallbacks(t1, r1) {\n        return this.head?.getAllQueryCallbacks(t1, r1) ?? [];\n    }\n    getAllBatchQueryCallbacks() {\n        return this.head?.getAllBatchQueryCallbacks() ?? [];\n    }\n};\nvar Xa = $(\"prisma:client\"), el = {\n    Vercel: \"vercel\",\n    \"Netlify CI\": \"netlify\"\n};\nfunction tl({ postinstall: e1, ciName: t1, clientVersion: r1 }) {\n    if (Xa(\"checkPlatformCaching:postinstall\", e1), Xa(\"checkPlatformCaching:ciName\", t1), e1 === !0 && t1 && t1 in el) {\n        let n1 = `Prisma has detected that this project was built on ${t1}, which caches dependencies. This leads to an outdated Prisma Client because Prisma's auto-generation isn't triggered. To fix this, make sure to run the \\`prisma generate\\` command during the build process.\n\nLearn how: https://pris.ly/d/${el[t1]}-build`;\n        throw console.error(n1), new k(n1, r1);\n    }\n}\nfunction rl(e1, t1) {\n    return e1 ? e1.datasources ? e1.datasources : e1.datasourceUrl ? {\n        [t1[0]]: {\n            url: e1.datasourceUrl\n        }\n    } : {} : {};\n}\nfunction vr({ error: e1, user_facing_error: t1 }, r1) {\n    return t1.error_code ? new H(t1.message, {\n        code: t1.error_code,\n        clientVersion: r1,\n        meta: t1.meta,\n        batchRequestIdx: t1.batch_request_idx\n    }) : new W(e1, {\n        clientVersion: r1,\n        batchRequestIdx: t1.batch_request_idx\n    });\n}\nvar Jt = class {\n};\nvar al = F(__webpack_require__(/*! fs */ \"fs\")), Tr = F(__webpack_require__(/*! path */ \"path\"));\nfunction $n(e1) {\n    let { runtimeBinaryTarget: t1 } = e1;\n    return `Add \"${t1}\" to \\`binaryTargets\\` in the \"schema.prisma\" file and run \\`prisma generate\\` after saving it:\n\n${Dd(e1)}`;\n}\nfunction Dd(e1) {\n    let { generator: t1, generatorBinaryTargets: r1, runtimeBinaryTarget: n1 } = e1, i1 = {\n        fromEnvVar: null,\n        value: n1\n    }, o1 = [\n        ...r1,\n        i1\n    ];\n    return Bi({\n        ...t1,\n        binaryTargets: o1\n    });\n}\nfunction ot(e1) {\n    let { runtimeBinaryTarget: t1 } = e1;\n    return `Prisma Client could not locate the Query Engine for runtime \"${t1}\".`;\n}\nfunction st(e1) {\n    let { searchedLocations: t1 } = e1;\n    return `The following locations have been searched:\n${[\n        ...new Set(t1)\n    ].map((i1)=>`  ${i1}`).join(`\n`)}`;\n}\nfunction nl(e1) {\n    let { runtimeBinaryTarget: t1 } = e1;\n    return `${ot(e1)}\n\nThis happened because \\`binaryTargets\\` have been pinned, but the actual deployment also required \"${t1}\".\n${$n(e1)}\n\n${st(e1)}`;\n}\nfunction qn(e1) {\n    return `We would appreciate if you could take the time to share some information with us.\nPlease help us by answering a few questions: https://pris.ly/${e1}`;\n}\nfunction Bn(e1) {\n    let { errorStack: t1 } = e1;\n    return t1?.match(/\\/\\.next|\\/next@|\\/next\\//) ? `\n\nWe detected that you are using Next.js, learn how to fix this: https://pris.ly/d/engine-not-found-nextjs.` : \"\";\n}\nfunction il(e1) {\n    let { queryEngineName: t1 } = e1;\n    return `${ot(e1)}${Bn(e1)}\n\nThis is likely caused by a bundler that has not copied \"${t1}\" next to the resulting bundle.\nEnsure that \"${t1}\" has been copied next to the bundle or in \"${e1.expectedLocation}\".\n\n${qn(\"engine-not-found-bundler-investigation\")}\n\n${st(e1)}`;\n}\nfunction ol(e1) {\n    let { runtimeBinaryTarget: t1, generatorBinaryTargets: r1 } = e1, n1 = r1.find((i1)=>i1.native);\n    return `${ot(e1)}\n\nThis happened because Prisma Client was generated for \"${n1?.value ?? \"unknown\"}\", but the actual deployment required \"${t1}\".\n${$n(e1)}\n\n${st(e1)}`;\n}\nfunction sl(e1) {\n    let { queryEngineName: t1 } = e1;\n    return `${ot(e1)}${Bn(e1)}\n\nThis is likely caused by tooling that has not copied \"${t1}\" to the deployment folder.\nEnsure that you ran \\`prisma generate\\` and that \"${t1}\" has been copied to \"${e1.expectedLocation}\".\n\n${qn(\"engine-not-found-tooling-investigation\")}\n\n${st(e1)}`;\n}\nvar Nd = $(\"prisma:client:engines:resolveEnginePath\"), Ld = ()=>new RegExp(\"runtime[\\\\\\\\/]library\\\\.m?js$\");\nasync function ll(e1, t1) {\n    let r1 = {\n        binary: process.env.PRISMA_QUERY_ENGINE_BINARY,\n        library: process.env.PRISMA_QUERY_ENGINE_LIBRARY\n    }[e1] ?? t1.prismaPath;\n    if (r1 !== void 0) return r1;\n    let { enginePath: n1, searchedLocations: i1 } = await $d(e1, t1);\n    if (Nd(\"enginePath\", n1), n1 !== void 0 && e1 === \"binary\" && Di(n1), n1 !== void 0) return t1.prismaPath = n1;\n    let o1 = await ft(), s1 = t1.generator?.binaryTargets ?? [], a1 = s1.some((d1)=>d1.native), l1 = !s1.some((d1)=>d1.value === o1), u1 = __filename.match(Ld()) === null, c1 = {\n        searchedLocations: i1,\n        generatorBinaryTargets: s1,\n        generator: t1.generator,\n        runtimeBinaryTarget: o1,\n        queryEngineName: ul(e1, o1),\n        expectedLocation: Tr.default.relative(process.cwd(), t1.dirname),\n        errorStack: new Error().stack\n    }, p1;\n    throw a1 && l1 ? p1 = ol(c1) : l1 ? p1 = nl(c1) : u1 ? p1 = il(c1) : p1 = sl(c1), new k(p1, t1.clientVersion);\n}\nasync function $d(engineType, config) {\n    let binaryTarget = await ft(), searchedLocations = [], dirname = eval(\"__dirname\"), searchLocations = [\n        config.dirname,\n        Tr.default.resolve(dirname, \"..\"),\n        config.generator?.output?.value ?? dirname,\n        Tr.default.resolve(dirname, \"../../../.prisma/client\"),\n        \"/tmp/prisma-engines\",\n        config.cwd\n    ];\n    __filename.includes(\"resolveEnginePath\") && searchLocations.push(js());\n    for (let e of searchLocations){\n        let t = ul(engineType, binaryTarget), r = Tr.default.join(e, t);\n        if (searchedLocations.push(e), al.default.existsSync(r)) return {\n            enginePath: r,\n            searchedLocations\n        };\n    }\n    return {\n        enginePath: void 0,\n        searchedLocations\n    };\n}\nfunction ul(e1, t1) {\n    return e1 === \"library\" ? en(t1, \"fs\") : `query-engine-${t1}${t1 === \"windows\" ? \".exe\" : \"\"}`;\n}\nfunction jn(e1, t1) {\n    return {\n        batch: e1,\n        transaction: t1?.kind === \"batch\" ? {\n            isolationLevel: t1.options.isolationLevel\n        } : void 0\n    };\n}\nvar fo = F(Vi());\nfunction cl(e1) {\n    return e1 ? e1.replace(/\".*\"/g, '\"X\"').replace(/[\\s:\\[]([+-]?([0-9]*[.])?[0-9]+)/g, (t1)=>`${t1[0]}5`) : \"\";\n}\nfunction pl(e1) {\n    return e1.split(`\n`).map((t1)=>t1.replace(/^\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\\s*/, \"\").replace(/\\+\\d+\\s*ms$/, \"\")).join(`\n`);\n}\nvar dl = F(Ws());\nfunction ml({ title: e1, user: t1 = \"prisma\", repo: r1 = \"prisma\", template: n1 = \"bug_report.yml\", body: i1 }) {\n    return (0, dl.default)({\n        user: t1,\n        repo: r1,\n        template: n1,\n        title: e1,\n        body: i1\n    });\n}\nfunction fl({ version: e1, binaryTarget: t1, title: r1, description: n1, engineVersion: i1, database: o1, query: s1 }) {\n    let a1 = os(6e3 - (s1?.length ?? 0)), l1 = pl((0, fo.default)(a1)), u1 = n1 ? `# Description\n\\`\\`\\`\n${n1}\n\\`\\`\\`` : \"\", c1 = (0, fo.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:\n## Versions\n\n| Name            | Version            |\n|-----------------|--------------------|\n| Node            | ${process.version?.padEnd(19)}| \n| OS              | ${t1?.padEnd(19)}|\n| Prisma Client   | ${e1?.padEnd(19)}|\n| Query Engine    | ${i1?.padEnd(19)}|\n| Database        | ${o1?.padEnd(19)}|\n\n${u1}\n\n## Logs\n\\`\\`\\`\n${l1}\n\\`\\`\\`\n\n## Client Snippet\n\\`\\`\\`ts\n// PLEASE FILL YOUR CODE SNIPPET HERE\n\\`\\`\\`\n\n## Schema\n\\`\\`\\`prisma\n// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE\n\\`\\`\\`\n\n## Prisma Engine Query\n\\`\\`\\`\n${s1 ? cl(s1) : \"\"}\n\\`\\`\\`\n`), p1 = ml({\n        title: r1,\n        body: c1\n    });\n    return `${r1}\n\nThis is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.\n\n${ue(p1)}\n\nIf you want the Prisma team to look into it, please open the link above \\u{1F64F}\nTo increase the chance of success, please post your schema and a snippet of\nhow you used Prisma Client in the issue. \n`;\n}\nvar qd = \"Cloudflare-Workers\", Bd = \"node\";\nfunction gl() {\n    return typeof Netlify == \"object\" ? \"netlify\" : typeof EdgeRuntime == \"string\" ? \"edge-light\" : globalThis.navigator?.userAgent === qd ? \"workerd\" : globalThis.Deno ? \"deno\" : globalThis.__lagon__ ? \"lagon\" : globalThis.process?.release?.name === Bd ? \"node\" : globalThis.Bun ? \"bun\" : globalThis.fastly ? \"fastly\" : \"unknown\";\n}\nfunction Vn({ inlineDatasources: e1, overrideDatasources: t1, env: r1, clientVersion: n1 }) {\n    let i1, o1 = Object.keys(e1)[0], s1 = e1[o1]?.url, a1 = t1[o1]?.url;\n    if (o1 === void 0 ? i1 = void 0 : a1 ? i1 = a1 : s1?.value ? i1 = s1.value : s1?.fromEnvVar && (i1 = r1[s1.fromEnvVar]), s1?.fromEnvVar !== void 0 && i1 === void 0) throw new k(`error: Environment variable not found: ${s1.fromEnvVar}.`, n1);\n    if (i1 === void 0) throw new k(\"error: Missing URL environment variable, value, or override.\", n1);\n    return i1;\n}\nvar Un = class extends Error {\n    constructor(t1, r1){\n        super(t1), this.clientVersion = r1.clientVersion, this.cause = r1.cause;\n    }\n    get [Symbol.toStringTag]() {\n        return this.name;\n    }\n};\nvar ye = class extends Un {\n    constructor(t1, r1){\n        super(t1, r1), this.isRetryable = r1.isRetryable ?? !0;\n    }\n};\nfunction I(e1, t1) {\n    return {\n        ...e1,\n        isRetryable: t1\n    };\n}\nvar Gt = class extends ye {\n    constructor(r1){\n        super(\"This request must be retried\", I(r1, !0));\n        this.name = \"ForcedRetryError\";\n        this.code = \"P5001\";\n    }\n};\nv(Gt, \"ForcedRetryError\");\nvar wt = class extends ye {\n    constructor(r1, n1){\n        super(r1, I(n1, !1));\n        this.name = \"InvalidDatasourceError\";\n        this.code = \"P6001\";\n    }\n};\nv(wt, \"InvalidDatasourceError\");\nvar Et = class extends ye {\n    constructor(r1, n1){\n        super(r1, I(n1, !1));\n        this.name = \"NotImplementedYetError\";\n        this.code = \"P5004\";\n    }\n};\nv(Et, \"NotImplementedYetError\");\nvar j = class extends ye {\n    constructor(t1, r1){\n        super(t1, r1), this.response = r1.response;\n        let n1 = this.response.headers.get(\"prisma-request-id\");\n        if (n1) {\n            let i1 = `(The request id was: ${n1})`;\n            this.message = this.message + \" \" + i1;\n        }\n    }\n};\nvar Pt = class extends j {\n    constructor(r1){\n        super(\"Schema needs to be uploaded\", I(r1, !0));\n        this.name = \"SchemaMissingError\";\n        this.code = \"P5005\";\n    }\n};\nv(Pt, \"SchemaMissingError\");\nvar go = \"This request could not be understood by the server\", _r = class extends j {\n    constructor(r1, n1, i1){\n        super(n1 || go, I(r1, !1));\n        this.name = \"BadRequestError\";\n        this.code = \"P5000\";\n        i1 && (this.code = i1);\n    }\n};\nv(_r, \"BadRequestError\");\nvar Cr = class extends j {\n    constructor(r1, n1){\n        super(\"Engine not started: healthcheck timeout\", I(r1, !0));\n        this.name = \"HealthcheckTimeoutError\";\n        this.code = \"P5013\";\n        this.logs = n1;\n    }\n};\nv(Cr, \"HealthcheckTimeoutError\");\nvar Ar = class extends j {\n    constructor(r1, n1, i1){\n        super(n1, I(r1, !0));\n        this.name = \"EngineStartupError\";\n        this.code = \"P5014\";\n        this.logs = i1;\n    }\n};\nv(Ar, \"EngineStartupError\");\nvar Rr = class extends j {\n    constructor(r1){\n        super(\"Engine version is not supported\", I(r1, !1));\n        this.name = \"EngineVersionNotSupportedError\";\n        this.code = \"P5012\";\n    }\n};\nv(Rr, \"EngineVersionNotSupportedError\");\nvar yo = \"Request timed out\", Mr = class extends j {\n    constructor(r1, n1 = yo){\n        super(n1, I(r1, !1));\n        this.name = \"GatewayTimeoutError\";\n        this.code = \"P5009\";\n    }\n};\nv(Mr, \"GatewayTimeoutError\");\nvar jd = \"Interactive transaction error\", Sr = class extends j {\n    constructor(r1, n1 = jd){\n        super(n1, I(r1, !1));\n        this.name = \"InteractiveTransactionError\";\n        this.code = \"P5015\";\n    }\n};\nv(Sr, \"InteractiveTransactionError\");\nvar Vd = \"Request parameters are invalid\", Ir = class extends j {\n    constructor(r1, n1 = Vd){\n        super(n1, I(r1, !1));\n        this.name = \"InvalidRequestError\";\n        this.code = \"P5011\";\n    }\n};\nv(Ir, \"InvalidRequestError\");\nvar ho = \"Requested resource does not exist\", kr = class extends j {\n    constructor(r1, n1 = ho){\n        super(n1, I(r1, !1));\n        this.name = \"NotFoundError\";\n        this.code = \"P5003\";\n    }\n};\nv(kr, \"NotFoundError\");\nvar bo = \"Unknown server error\", Ht = class extends j {\n    constructor(r1, n1, i1){\n        super(n1 || bo, I(r1, !0));\n        this.name = \"ServerError\";\n        this.code = \"P5006\";\n        this.logs = i1;\n    }\n};\nv(Ht, \"ServerError\");\nvar xo = \"Unauthorized, check your connection string\", Fr = class extends j {\n    constructor(r1, n1 = xo){\n        super(n1, I(r1, !1));\n        this.name = \"UnauthorizedError\";\n        this.code = \"P5007\";\n    }\n};\nv(Fr, \"UnauthorizedError\");\nvar wo = \"Usage exceeded, retry again later\", Or = class extends j {\n    constructor(r1, n1 = wo){\n        super(n1, I(r1, !0));\n        this.name = \"UsageExceededError\";\n        this.code = \"P5008\";\n    }\n};\nv(Or, \"UsageExceededError\");\nasync function Ud(e1) {\n    let t1;\n    try {\n        t1 = await e1.text();\n    } catch  {\n        return {\n            type: \"EmptyError\"\n        };\n    }\n    try {\n        let r1 = JSON.parse(t1);\n        if (typeof r1 == \"string\") switch(r1){\n            case \"InternalDataProxyError\":\n                return {\n                    type: \"DataProxyError\",\n                    body: r1\n                };\n            default:\n                return {\n                    type: \"UnknownTextError\",\n                    body: r1\n                };\n        }\n        if (typeof r1 == \"object\" && r1 !== null) {\n            if (\"is_panic\" in r1 && \"message\" in r1 && \"error_code\" in r1) return {\n                type: \"QueryEngineError\",\n                body: r1\n            };\n            if (\"EngineNotStarted\" in r1 || \"InteractiveTransactionMisrouted\" in r1 || \"InvalidRequestError\" in r1) {\n                let n1 = Object.values(r1)[0].reason;\n                return typeof n1 == \"string\" && ![\n                    \"SchemaMissing\",\n                    \"EngineVersionNotSupported\"\n                ].includes(n1) ? {\n                    type: \"UnknownJsonError\",\n                    body: r1\n                } : {\n                    type: \"DataProxyError\",\n                    body: r1\n                };\n            }\n        }\n        return {\n            type: \"UnknownJsonError\",\n            body: r1\n        };\n    } catch  {\n        return t1 === \"\" ? {\n            type: \"EmptyError\"\n        } : {\n            type: \"UnknownTextError\",\n            body: t1\n        };\n    }\n}\nasync function Dr(e1, t1) {\n    if (e1.ok) return;\n    let r1 = {\n        clientVersion: t1,\n        response: e1\n    }, n1 = await Ud(e1);\n    if (n1.type === \"QueryEngineError\") throw new H(n1.body.message, {\n        code: n1.body.error_code,\n        clientVersion: t1\n    });\n    if (n1.type === \"DataProxyError\") {\n        if (n1.body === \"InternalDataProxyError\") throw new Ht(r1, \"Internal Data Proxy error\");\n        if (\"EngineNotStarted\" in n1.body) {\n            if (n1.body.EngineNotStarted.reason === \"SchemaMissing\") return new Pt(r1);\n            if (n1.body.EngineNotStarted.reason === \"EngineVersionNotSupported\") throw new Rr(r1);\n            if (\"EngineStartupError\" in n1.body.EngineNotStarted.reason) {\n                let { msg: i1, logs: o1 } = n1.body.EngineNotStarted.reason.EngineStartupError;\n                throw new Ar(r1, i1, o1);\n            }\n            if (\"KnownEngineStartupError\" in n1.body.EngineNotStarted.reason) {\n                let { msg: i1, error_code: o1 } = n1.body.EngineNotStarted.reason.KnownEngineStartupError;\n                throw new k(i1, t1, o1);\n            }\n            if (\"HealthcheckTimeout\" in n1.body.EngineNotStarted.reason) {\n                let { logs: i1 } = n1.body.EngineNotStarted.reason.HealthcheckTimeout;\n                throw new Cr(r1, i1);\n            }\n        }\n        if (\"InteractiveTransactionMisrouted\" in n1.body) {\n            let i1 = {\n                IDParseError: \"Could not parse interactive transaction ID\",\n                NoQueryEngineFoundError: \"Could not find Query Engine for the specified host and transaction ID\",\n                TransactionStartError: \"Could not start interactive transaction\"\n            };\n            throw new Sr(r1, i1[n1.body.InteractiveTransactionMisrouted.reason]);\n        }\n        if (\"InvalidRequestError\" in n1.body) throw new Ir(r1, n1.body.InvalidRequestError.reason);\n    }\n    if (e1.status === 401 || e1.status === 403) throw new Fr(r1, Wt(xo, n1));\n    if (e1.status === 404) return new kr(r1, Wt(ho, n1));\n    if (e1.status === 429) throw new Or(r1, Wt(wo, n1));\n    if (e1.status === 504) throw new Mr(r1, Wt(yo, n1));\n    if (e1.status >= 500) throw new Ht(r1, Wt(bo, n1));\n    if (e1.status >= 400) throw new _r(r1, Wt(go, n1));\n}\nfunction Wt(e1, t1) {\n    return t1.type === \"EmptyError\" ? e1 : `${e1}: ${JSON.stringify(t1)}`;\n}\nfunction yl(e1) {\n    let t1 = Math.pow(2, e1) * 50, r1 = Math.ceil(Math.random() * t1) - Math.ceil(t1 / 2), n1 = t1 + r1;\n    return new Promise((i1)=>setTimeout(()=>i1(n1), n1));\n}\nfunction hl(e1) {\n    if (!!e1.generator?.previewFeatures.some((r1)=>r1.toLowerCase().includes(\"metrics\"))) throw new k(\"The `metrics` preview feature is not yet available with Accelerate.\\nPlease remove `metrics` from the `previewFeatures` in your schema.\\n\\nMore information about Accelerate: https://pris.ly/d/accelerate\", e1.clientVersion);\n}\nfunction Kd(e1) {\n    return e1[0] * 1e3 + e1[1] / 1e6;\n}\nfunction bl(e1) {\n    return new Date(Kd(e1));\n}\nvar xl = {\n    \"@prisma/debug\": \"workspace:*\",\n    \"@prisma/engines-version\": \"5.8.0-37.0a83d8541752d7582de2ebc1ece46519ce72a848\",\n    \"@prisma/fetch-engine\": \"workspace:*\",\n    \"@prisma/get-platform\": \"workspace:*\"\n};\nvar Nr = class extends ye {\n    constructor(r1, n1){\n        super(`Cannot fetch data from service:\n${r1}`, I(n1, !0));\n        this.name = \"RequestError\";\n        this.code = \"P5010\";\n    }\n};\nv(Nr, \"RequestError\");\nasync function vt(e1, t1, r1 = (n1)=>n1) {\n    let n1 = t1.clientVersion;\n    try {\n        return typeof fetch == \"function\" ? await r1(fetch)(e1, t1) : await r1(Eo)(e1, t1);\n    } catch (i1) {\n        let o1 = i1.message ?? \"Unknown error\";\n        throw new Nr(o1, {\n            clientVersion: n1\n        });\n    }\n}\nfunction Jd(e1) {\n    return {\n        ...e1.headers,\n        \"Content-Type\": \"application/json\"\n    };\n}\nfunction Gd(e1) {\n    return {\n        method: e1.method,\n        headers: Jd(e1)\n    };\n}\nfunction Hd(e1, t1) {\n    return {\n        text: ()=>Promise.resolve(Buffer.concat(e1).toString()),\n        json: ()=>Promise.resolve().then(()=>JSON.parse(Buffer.concat(e1).toString())),\n        ok: t1.statusCode >= 200 && t1.statusCode <= 299,\n        status: t1.statusCode,\n        url: t1.url,\n        headers: new Po(t1.headers)\n    };\n}\nasync function Eo(e1, t1 = {}) {\n    let r1 = Wd(\"https\"), n1 = Gd(t1), i1 = [], { origin: o1 } = new URL(e1);\n    return new Promise((s1, a1)=>{\n        let l1 = r1.request(e1, n1, (u1)=>{\n            let { statusCode: c1, headers: { location: p1 } } = u1;\n            c1 >= 301 && c1 <= 399 && p1 && (p1.startsWith(\"http\") === !1 ? s1(Eo(`${o1}${p1}`, t1)) : s1(Eo(p1, t1))), u1.on(\"data\", (d1)=>i1.push(d1)), u1.on(\"end\", ()=>s1(Hd(i1, u1))), u1.on(\"error\", a1);\n        });\n        l1.on(\"error\", a1), l1.end(t1.body ?? \"\");\n    });\n}\nvar Wd = undefined, Po = class {\n    constructor(t1 = {}){\n        this.headers = new Map;\n        for (let [r1, n1] of Object.entries(t1))if (typeof n1 == \"string\") this.headers.set(r1, n1);\n        else if (Array.isArray(n1)) for (let i1 of n1)this.headers.set(r1, i1);\n    }\n    append(t1, r1) {\n        this.headers.set(t1, r1);\n    }\n    delete(t1) {\n        this.headers.delete(t1);\n    }\n    get(t1) {\n        return this.headers.get(t1) ?? null;\n    }\n    has(t1) {\n        return this.headers.has(t1);\n    }\n    set(t1, r1) {\n        this.headers.set(t1, r1);\n    }\n    forEach(t1, r1) {\n        for (let [n1, i1] of this.headers)t1.call(r1, i1, n1, this);\n    }\n};\nvar zd = /^[1-9][0-9]*\\.[0-9]+\\.[0-9]+$/, wl = $(\"prisma:client:dataproxyEngine\");\nasync function Yd(e1, t1) {\n    let r1 = xl[\"@prisma/engines-version\"], n1 = t1.clientVersion ?? \"unknown\";\n    if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;\n    if (e1.includes(\"accelerate\") && n1 !== \"0.0.0\" && n1 !== \"in-memory\") return n1;\n    let [i1, o1] = n1?.split(\"-\") ?? [];\n    if (o1 === void 0 && zd.test(i1)) return i1;\n    if (o1 !== void 0 || n1 === \"0.0.0\" || n1 === \"in-memory\") {\n        if (e1.startsWith(\"localhost\") || e1.startsWith(\"127.0.0.1\")) return \"0.0.0\";\n        let [s1] = r1.split(\"-\") ?? [], [a1, l1, u1] = s1.split(\".\"), c1 = Zd(`<=${a1}.${l1}.${u1}`), p1 = await vt(c1, {\n            clientVersion: n1\n        });\n        if (!p1.ok) throw new Error(`Failed to fetch stable Prisma version, unpkg.com status ${p1.status} ${p1.statusText}, response body: ${await p1.text() || \"<empty body>\"}`);\n        let d1 = await p1.text();\n        wl(\"length of body fetched from unpkg.com\", d1.length);\n        let f1;\n        try {\n            f1 = JSON.parse(d1);\n        } catch (y1) {\n            throw console.error(\"JSON.parse error: body fetched from unpkg.com: \", d1), y1;\n        }\n        return f1.version;\n    }\n    throw new Et(\"Only `major.minor.patch` versions are supported by Accelerate.\", {\n        clientVersion: n1\n    });\n}\nasync function El(e1, t1) {\n    let r1 = await Yd(e1, t1);\n    return wl(\"version\", r1), r1;\n}\nfunction Zd(e1) {\n    return encodeURI(`https://unpkg.com/prisma@${e1}/package.json`);\n}\nvar Pl = 3, vo = $(\"prisma:client:dataproxyEngine\"), To = class {\n    constructor({ apiKey: t1, tracingHelper: r1, logLevel: n1, logQueries: i1, engineHash: o1 }){\n        this.apiKey = t1, this.tracingHelper = r1, this.logLevel = n1, this.logQueries = i1, this.engineHash = o1;\n    }\n    build({ traceparent: t1, interactiveTransaction: r1 } = {}) {\n        let n1 = {\n            Authorization: `Bearer ${this.apiKey}`,\n            \"Prisma-Engine-Hash\": this.engineHash\n        };\n        this.tracingHelper.isEnabled() && (n1.traceparent = t1 ?? this.tracingHelper.getTraceParent()), r1 && (n1[\"X-transaction-id\"] = r1.id);\n        let i1 = this.buildCaptureSettings();\n        return i1.length > 0 && (n1[\"X-capture-telemetry\"] = i1.join(\", \")), n1;\n    }\n    buildCaptureSettings() {\n        let t1 = [];\n        return this.tracingHelper.isEnabled() && t1.push(\"tracing\"), this.logLevel && t1.push(this.logLevel), this.logQueries && t1.push(\"query\"), t1;\n    }\n}, Lr = class extends Jt {\n    constructor(t1){\n        super(), hl(t1), this.config = t1, this.env = {\n            ...this.config.env,\n            ...process.env\n        }, this.inlineSchema = t1.inlineSchema, this.inlineDatasources = t1.inlineDatasources, this.inlineSchemaHash = t1.inlineSchemaHash, this.clientVersion = t1.clientVersion, this.engineHash = t1.engineVersion, this.logEmitter = t1.logEmitter, this.tracingHelper = this.config.tracingHelper;\n    }\n    apiKey() {\n        return this.headerBuilder.apiKey;\n    }\n    version() {\n        return this.engineHash;\n    }\n    async start() {\n        this.startPromise !== void 0 && await this.startPromise, this.startPromise = (async ()=>{\n            let [t1, r1] = this.extractHostAndApiKey();\n            this.host = t1, this.headerBuilder = new To({\n                apiKey: r1,\n                tracingHelper: this.tracingHelper,\n                logLevel: this.config.logLevel,\n                logQueries: this.config.logQueries,\n                engineHash: this.engineHash\n            }), this.remoteClientVersion = await El(t1, this.config), vo(\"host\", this.host);\n        })(), await this.startPromise;\n    }\n    async stop() {}\n    propagateResponseExtensions(t1) {\n        t1?.logs?.length && t1.logs.forEach((r1)=>{\n            switch(r1.level){\n                case \"debug\":\n                case \"error\":\n                case \"trace\":\n                case \"warn\":\n                case \"info\":\n                    break;\n                case \"query\":\n                    {\n                        let n1 = typeof r1.attributes.query == \"string\" ? r1.attributes.query : \"\";\n                        if (!this.tracingHelper.isEnabled()) {\n                            let [i1] = n1.split(\"/* traceparent\");\n                            n1 = i1;\n                        }\n                        this.logEmitter.emit(\"query\", {\n                            query: n1,\n                            timestamp: bl(r1.timestamp),\n                            duration: Number(r1.attributes.duration_ms),\n                            params: r1.attributes.params,\n                            target: r1.attributes.target\n                        });\n                    }\n            }\n        }), t1?.traces?.length && this.tracingHelper.createEngineSpan({\n            span: !0,\n            spans: t1.traces\n        });\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the remote query engine');\n    }\n    async url(t1) {\n        return await this.start(), `https://${this.host}/${this.remoteClientVersion}/${this.inlineSchemaHash}/${t1}`;\n    }\n    async uploadSchema() {\n        let t1 = {\n            name: \"schemaUpload\",\n            internal: !0\n        };\n        return this.tracingHelper.runInChildSpan(t1, async ()=>{\n            let r1 = await vt(await this.url(\"schema\"), {\n                method: \"PUT\",\n                headers: this.headerBuilder.build(),\n                body: this.inlineSchema,\n                clientVersion: this.clientVersion\n            });\n            r1.ok || vo(\"schema response status\", r1.status);\n            let n1 = await Dr(r1, this.clientVersion);\n            if (n1) throw this.logEmitter.emit(\"warn\", {\n                message: `Error while uploading schema: ${n1.message}`,\n                timestamp: new Date,\n                target: \"\"\n            }), n1;\n            this.logEmitter.emit(\"info\", {\n                message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`,\n                timestamp: new Date,\n                target: \"\"\n            });\n        });\n    }\n    request(t1, { traceparent: r1, interactiveTransaction: n1, customDataProxyFetch: i1 }) {\n        return this.requestInternal({\n            body: t1,\n            traceparent: r1,\n            interactiveTransaction: n1,\n            customDataProxyFetch: i1\n        });\n    }\n    async requestBatch(t1, { traceparent: r1, transaction: n1, customDataProxyFetch: i1 }) {\n        let o1 = n1?.kind === \"itx\" ? n1.options : void 0, s1 = jn(t1, n1), { batchResult: a1, elapsed: l1 } = await this.requestInternal({\n            body: s1,\n            customDataProxyFetch: i1,\n            interactiveTransaction: o1,\n            traceparent: r1\n        });\n        return a1.map((u1)=>\"errors\" in u1 && u1.errors.length > 0 ? vr(u1.errors[0], this.clientVersion) : {\n                data: u1,\n                elapsed: l1\n            });\n    }\n    requestInternal({ body: t1, traceparent: r1, customDataProxyFetch: n1, interactiveTransaction: i1 }) {\n        return this.withRetry({\n            actionGerund: \"querying\",\n            callback: async ({ logHttpCall: o1 })=>{\n                let s1 = i1 ? `${i1.payload.endpoint}/graphql` : await this.url(\"graphql\");\n                o1(s1);\n                let a1 = await vt(s1, {\n                    method: \"POST\",\n                    headers: this.headerBuilder.build({\n                        traceparent: r1,\n                        interactiveTransaction: i1\n                    }),\n                    body: JSON.stringify(t1),\n                    clientVersion: this.clientVersion\n                }, n1);\n                a1.ok || vo(\"graphql response status\", a1.status), await this.handleError(await Dr(a1, this.clientVersion));\n                let l1 = await a1.json(), u1 = l1.extensions;\n                if (u1 && this.propagateResponseExtensions(u1), l1.errors) throw l1.errors.length === 1 ? vr(l1.errors[0], this.config.clientVersion) : new W(l1.errors, {\n                    clientVersion: this.config.clientVersion\n                });\n                return l1;\n            }\n        });\n    }\n    async transaction(t1, r1, n1) {\n        let i1 = {\n            start: \"starting\",\n            commit: \"committing\",\n            rollback: \"rolling back\"\n        };\n        return this.withRetry({\n            actionGerund: `${i1[t1]} transaction`,\n            callback: async ({ logHttpCall: o1 })=>{\n                if (t1 === \"start\") {\n                    let s1 = JSON.stringify({\n                        max_wait: n1?.maxWait ?? 2e3,\n                        timeout: n1?.timeout ?? 5e3,\n                        isolation_level: n1?.isolationLevel\n                    }), a1 = await this.url(\"transaction/start\");\n                    o1(a1);\n                    let l1 = await vt(a1, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: r1.traceparent\n                        }),\n                        body: s1,\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Dr(l1, this.clientVersion));\n                    let u1 = await l1.json(), c1 = u1.extensions;\n                    c1 && this.propagateResponseExtensions(c1);\n                    let p1 = u1.id, d1 = u1[\"data-proxy\"].endpoint;\n                    return {\n                        id: p1,\n                        payload: {\n                            endpoint: d1\n                        }\n                    };\n                } else {\n                    let s1 = `${n1.payload.endpoint}/${t1}`;\n                    o1(s1);\n                    let a1 = await vt(s1, {\n                        method: \"POST\",\n                        headers: this.headerBuilder.build({\n                            traceparent: r1.traceparent\n                        }),\n                        clientVersion: this.clientVersion\n                    });\n                    await this.handleError(await Dr(a1, this.clientVersion));\n                    let u1 = (await a1.json()).extensions;\n                    u1 && this.propagateResponseExtensions(u1);\n                    return;\n                }\n            }\n        });\n    }\n    extractHostAndApiKey() {\n        let t1 = {\n            clientVersion: this.clientVersion\n        }, r1 = Object.keys(this.inlineDatasources)[0], n1 = Vn({\n            inlineDatasources: this.inlineDatasources,\n            overrideDatasources: this.config.overrideDatasources,\n            clientVersion: this.clientVersion,\n            env: this.env\n        }), i1;\n        try {\n            i1 = new URL(n1);\n        } catch  {\n            throw new wt(`Error validating datasource \\`${r1}\\`: the URL must start with the protocol \\`prisma://\\``, t1);\n        }\n        let { protocol: o1, host: s1, searchParams: a1 } = i1;\n        if (o1 !== \"prisma:\") throw new wt(`Error validating datasource \\`${r1}\\`: the URL must start with the protocol \\`prisma://\\``, t1);\n        let l1 = a1.get(\"api_key\");\n        if (l1 === null || l1.length < 1) throw new wt(`Error validating datasource \\`${r1}\\`: the URL must contain a valid API key`, t1);\n        return [\n            s1,\n            l1\n        ];\n    }\n    metrics() {\n        throw new Et(\"Metrics are not yet supported for Accelerate\", {\n            clientVersion: this.clientVersion\n        });\n    }\n    async withRetry(t1) {\n        for(let r1 = 0;; r1++){\n            let n1 = (i1)=>{\n                this.logEmitter.emit(\"info\", {\n                    message: `Calling ${i1} (n=${r1})`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            };\n            try {\n                return await t1.callback({\n                    logHttpCall: n1\n                });\n            } catch (i1) {\n                if (!(i1 instanceof ye) || !i1.isRetryable) throw i1;\n                if (r1 >= Pl) throw i1 instanceof Gt ? i1.cause : i1;\n                this.logEmitter.emit(\"warn\", {\n                    message: `Attempt ${r1 + 1}/${Pl} failed for ${t1.actionGerund}: ${i1.message ?? \"(unknown)\"}`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n                let o1 = await yl(r1);\n                this.logEmitter.emit(\"warn\", {\n                    message: `Retrying after ${o1}ms`,\n                    timestamp: new Date,\n                    target: \"\"\n                });\n            }\n        }\n    }\n    async handleError(t1) {\n        if (t1 instanceof Pt) throw await this.uploadSchema(), new Gt({\n            clientVersion: this.clientVersion,\n            cause: t1\n        });\n        if (t1) throw t1;\n    }\n};\nfunction vl(e1) {\n    if (e1?.kind === \"itx\") return e1.options.id;\n}\nvar Co = F(__webpack_require__(/*! os */ \"os\")), Tl = F(__webpack_require__(/*! path */ \"path\"));\nvar _o = Symbol(\"PrismaLibraryEngineCache\");\nfunction Xd() {\n    let e1 = globalThis;\n    return e1[_o] === void 0 && (e1[_o] = {}), e1[_o];\n}\nfunction em(e1) {\n    let t1 = Xd();\n    if (t1[e1] !== void 0) return t1[e1];\n    let r1 = Tl.default.toNamespacedPath(e1), n1 = {\n        exports: {}\n    }, i1 = 0;\n    return process.platform !== \"win32\" && (i1 = Co.default.constants.dlopen.RTLD_LAZY | Co.default.constants.dlopen.RTLD_DEEPBIND), process.dlopen(n1, r1, i1), t1[e1] = n1.exports, n1.exports;\n}\nvar _l = {\n    async loadLibrary (e1) {\n        let t1 = await Mi(), r1 = await ll(\"library\", e1);\n        try {\n            return e1.tracingHelper.runInChildSpan({\n                name: \"loadLibrary\",\n                internal: !0\n            }, ()=>em(r1));\n        } catch (n1) {\n            let i1 = Ni({\n                e: n1,\n                platformInfo: t1,\n                id: r1\n            });\n            throw new k(i1, e1.clientVersion);\n        }\n    }\n};\nvar Mo = {};\n_t(Mo, {\n    QueryEngine: ()=>qr,\n    __wbg_String_88810dfeb4021902: ()=>tf,\n    __wbg_buffer_344d9b41efe96da7: ()=>lf,\n    __wbg_call_53fc3abd42e24ec8: ()=>gm,\n    __wbg_call_669127b9d730c650: ()=>Pf,\n    __wbg_crypto_58f13aa23ffcb166: ()=>pf,\n    __wbg_done_bc26bf4ada718266: ()=>wf,\n    __wbg_entries_6d727b73ee02b7ce: ()=>Of,\n    __wbg_getRandomValues_504510b5564925af: ()=>sf,\n    __wbg_getTime_ed6ee333b702f8fc: ()=>_m,\n    __wbg_get_2aff440840bb6202: ()=>rf,\n    __wbg_get_4a9aa5157afeb382: ()=>Um,\n    __wbg_get_94990005bd6ca07c: ()=>nf,\n    __wbg_getwithrefkey_5e6d9547403deab8: ()=>ef,\n    __wbg_globalThis_17eff828815f7d84: ()=>Cf,\n    __wbg_global_46f939f6541643c5: ()=>Af,\n    __wbg_has_cdf8b85f6e903c80: ()=>Pm,\n    __wbg_instanceof_ArrayBuffer_c7cc317e5c29cc0d: ()=>Ff,\n    __wbg_instanceof_Promise_cfbcc42300367513: ()=>Zm,\n    __wbg_instanceof_Uint8Array_19e6f142a5e7e1e1: ()=>kf,\n    __wbg_isArray_38525be7442aa21e: ()=>Lm,\n    __wbg_isSafeInteger_c38b0a16d0c7cef7: ()=>Fm,\n    __wbg_iterator_7ee1a391d310f8e4: ()=>qm,\n    __wbg_length_a5587d6cd79ab197: ()=>If,\n    __wbg_length_cace2e0b3ddc0502: ()=>Vm,\n    __wbg_msCrypto_abcb1295e768d1f2: ()=>hf,\n    __wbg_new0_ad75dd38f92424e2: ()=>Tm,\n    __wbg_new_08236689f0afb357: ()=>Km,\n    __wbg_new_1b94180eeb48f2a2: ()=>Gm,\n    __wbg_new_c728d68b8b34487e: ()=>Hm,\n    __wbg_new_d8a000788389a31e: ()=>Mf,\n    __wbg_new_feb65b865d980ae2: ()=>dm,\n    __wbg_newnoargs_ccdcae30fd002262: ()=>Rf,\n    __wbg_newwithbyteoffsetandlength_2dc04d99088b15e3: ()=>uf,\n    __wbg_newwithlength_13b5319ab422dcf6: ()=>bf,\n    __wbg_next_15da6a3df9290720: ()=>vf,\n    __wbg_next_1989a20442400aaa: ()=>xf,\n    __wbg_node_523d7bd03ef69fba: ()=>ff,\n    __wbg_now_4579335d3581594c: ()=>Rm,\n    __wbg_now_8ed1a4454e40ecd1: ()=>Am,\n    __wbg_parse_3f0cb48976ca4123: ()=>vm,\n    __wbg_process_5b786e71d465a513: ()=>df,\n    __wbg_randomFillSync_a0d98aa11c81fe89: ()=>cf,\n    __wbg_require_2784e593a4674877: ()=>gf,\n    __wbg_resolve_a3252b2860f0a09e: ()=>Bf,\n    __wbg_self_3fad056edded10bd: ()=>Tf,\n    __wbg_setTimeout_631fe61f31fa2fad: ()=>hm,\n    __wbg_set_0ac78a2bc07da03c: ()=>Jm,\n    __wbg_set_3355b9f2d3092e3b: ()=>Wm,\n    __wbg_set_841ac57cff3d672b: ()=>Ym,\n    __wbg_set_dcfd613a3420f908: ()=>Sf,\n    __wbg_set_wasm: ()=>Ro,\n    __wbg_static_accessor_PERFORMANCE_1a325848eb3ce65a: ()=>Cm,\n    __wbg_stringify_4039297315a25b00: ()=>Em,\n    __wbg_subarray_6ca5cfa7fbb9abbe: ()=>of,\n    __wbg_then_1bbc9edafd859b06: ()=>qf,\n    __wbg_then_89e1c559530b85cf: ()=>$f,\n    __wbg_valueOf_ff4b62641803432a: ()=>Xm,\n    __wbg_value_0570714ff7d75f35: ()=>Ef,\n    __wbg_versions_c2ab80650590b6a2: ()=>mf,\n    __wbg_window_a4f46c98a61d4089: ()=>_f,\n    __wbindgen_bigint_from_i64: ()=>Dm,\n    __wbindgen_bigint_from_u64: ()=>jm,\n    __wbindgen_bigint_get_as_i64: ()=>Om,\n    __wbindgen_boolean_get: ()=>Sm,\n    __wbindgen_cb_drop: ()=>Lf,\n    __wbindgen_closure_wrapper5578: ()=>jf,\n    __wbindgen_debug_string: ()=>Df,\n    __wbindgen_error_new: ()=>bm,\n    __wbindgen_in: ()=>Bm,\n    __wbindgen_is_bigint: ()=>Im,\n    __wbindgen_is_function: ()=>yf,\n    __wbindgen_is_object: ()=>$m,\n    __wbindgen_is_string: ()=>zm,\n    __wbindgen_is_undefined: ()=>wm,\n    __wbindgen_jsval_eq: ()=>Nm,\n    __wbindgen_jsval_loose_eq: ()=>Mm,\n    __wbindgen_memory: ()=>af,\n    __wbindgen_number_get: ()=>km,\n    __wbindgen_number_new: ()=>Qm,\n    __wbindgen_object_clone_ref: ()=>xm,\n    __wbindgen_object_drop_ref: ()=>mm,\n    __wbindgen_string_get: ()=>ym,\n    __wbindgen_string_new: ()=>fm,\n    __wbindgen_throw: ()=>Nf,\n    debug_panic: ()=>cm,\n    getBuildTimeInfo: ()=>um\n});\nvar b;\nfunction Ro(e1) {\n    b = e1;\n}\nvar Ke = new Array(128).fill(void 0);\nKe.push(void 0, null, !0, !1);\nfunction h(e1) {\n    return Ke[e1];\n}\nvar $r = Ke.length;\nfunction tm(e1) {\n    e1 < 132 || (Ke[e1] = $r, $r = e1);\n}\nfunction re(e1) {\n    let t1 = h(e1);\n    return tm(e1), t1;\n}\nvar rm = typeof TextDecoder > \"u\" ? (0, module.require)(\"util\").TextDecoder : TextDecoder, Cl = new rm(\"utf-8\", {\n    ignoreBOM: !0,\n    fatal: !0\n});\nCl.decode();\nvar Kn = null;\nfunction Hn() {\n    return (Kn === null || Kn.byteLength === 0) && (Kn = new Uint8Array(b.memory.buffer)), Kn;\n}\nfunction Br(e1, t1) {\n    return e1 = e1 >>> 0, Cl.decode(Hn().subarray(e1, e1 + t1));\n}\nfunction w(e1) {\n    $r === Ke.length && Ke.push(Ke.length + 1);\n    let t1 = $r;\n    return $r = Ke[t1], Ke[t1] = e1, t1;\n}\nvar Z = 0, nm = typeof TextEncoder > \"u\" ? (0, module.require)(\"util\").TextEncoder : TextEncoder, Wn = new nm(\"utf-8\"), im = typeof Wn.encodeInto == \"function\" ? function(e1, t1) {\n    return Wn.encodeInto(e1, t1);\n} : function(e1, t1) {\n    let r1 = Wn.encode(e1);\n    return t1.set(r1), {\n        read: e1.length,\n        written: r1.length\n    };\n};\nfunction le(e1, t1, r1) {\n    if (r1 === void 0) {\n        let a1 = Wn.encode(e1), l1 = t1(a1.length, 1) >>> 0;\n        return Hn().subarray(l1, l1 + a1.length).set(a1), Z = a1.length, l1;\n    }\n    let n1 = e1.length, i1 = t1(n1, 1) >>> 0, o1 = Hn(), s1 = 0;\n    for(; s1 < n1; s1++){\n        let a1 = e1.charCodeAt(s1);\n        if (a1 > 127) break;\n        o1[i1 + s1] = a1;\n    }\n    if (s1 !== n1) {\n        s1 !== 0 && (e1 = e1.slice(s1)), i1 = r1(i1, n1, n1 = s1 + e1.length * 3, 1) >>> 0;\n        let a1 = Hn().subarray(i1 + s1, i1 + n1), l1 = im(e1, a1);\n        s1 += l1.written;\n    }\n    return Z = s1, i1;\n}\nfunction at(e1) {\n    return e1 == null;\n}\nvar Qn = null;\nfunction xe() {\n    return (Qn === null || Qn.byteLength === 0) && (Qn = new Int32Array(b.memory.buffer)), Qn;\n}\nvar Jn = null;\nfunction om() {\n    return (Jn === null || Jn.byteLength === 0) && (Jn = new Float64Array(b.memory.buffer)), Jn;\n}\nvar Gn = null;\nfunction sm() {\n    return (Gn === null || Gn.byteLength === 0) && (Gn = new BigInt64Array(b.memory.buffer)), Gn;\n}\nfunction Ao(e1) {\n    let t1 = typeof e1;\n    if (t1 == \"number\" || t1 == \"boolean\" || e1 == null) return `${e1}`;\n    if (t1 == \"string\") return `\"${e1}\"`;\n    if (t1 == \"symbol\") {\n        let i1 = e1.description;\n        return i1 == null ? \"Symbol\" : `Symbol(${i1})`;\n    }\n    if (t1 == \"function\") {\n        let i1 = e1.name;\n        return typeof i1 == \"string\" && i1.length > 0 ? `Function(${i1})` : \"Function\";\n    }\n    if (Array.isArray(e1)) {\n        let i1 = e1.length, o1 = \"[\";\n        i1 > 0 && (o1 += Ao(e1[0]));\n        for(let s1 = 1; s1 < i1; s1++)o1 += \", \" + Ao(e1[s1]);\n        return o1 += \"]\", o1;\n    }\n    let r1 = /\\[object ([^\\]]+)\\]/.exec(toString.call(e1)), n1;\n    if (r1.length > 1) n1 = r1[1];\n    else return toString.call(e1);\n    if (n1 == \"Object\") try {\n        return \"Object(\" + JSON.stringify(e1) + \")\";\n    } catch  {\n        return \"Object\";\n    }\n    return e1 instanceof Error ? `${e1.name}: ${e1.message}\n${e1.stack}` : n1;\n}\nfunction am(e1, t1, r1, n1) {\n    let i1 = {\n        a: e1,\n        b: t1,\n        cnt: 1,\n        dtor: r1\n    }, o1 = (...s1)=>{\n        i1.cnt++;\n        let a1 = i1.a;\n        i1.a = 0;\n        try {\n            return n1(a1, i1.b, ...s1);\n        } finally{\n            --i1.cnt === 0 ? b.__wbindgen_export_2.get(i1.dtor)(a1, i1.b) : i1.a = a1;\n        }\n    };\n    return o1.original = i1, o1;\n}\nfunction lm(e1, t1, r1) {\n    b.wasm_bindgen__convert__closures__invoke1_mut__ha9d1cfee20bed753(e1, t1, w(r1));\n}\nfunction um() {\n    let e1 = b.getBuildTimeInfo();\n    return re(e1);\n}\nfunction cm(e1) {\n    try {\n        let o1 = b.__wbindgen_add_to_stack_pointer(-16);\n        var t1 = at(e1) ? 0 : le(e1, b.__wbindgen_malloc, b.__wbindgen_realloc), r1 = Z;\n        b.debug_panic(o1, t1, r1);\n        var n1 = xe()[o1 / 4 + 0], i1 = xe()[o1 / 4 + 1];\n        if (i1) throw re(n1);\n    } finally{\n        b.__wbindgen_add_to_stack_pointer(16);\n    }\n}\nfunction pe(e1, t1) {\n    try {\n        return e1.apply(this, t1);\n    } catch (r1) {\n        b.__wbindgen_exn_store(w(r1));\n    }\n}\nfunction pm(e1, t1, r1, n1) {\n    b.wasm_bindgen__convert__closures__invoke2_mut__h3b98f66135a9eb56(e1, t1, w(r1), w(n1));\n}\nvar qr = class {\n    __destroy_into_raw() {\n        let t1 = this.__wbg_ptr;\n        return this.__wbg_ptr = 0, t1;\n    }\n    free() {\n        let t1 = this.__destroy_into_raw();\n        b.__wbg_queryengine_free(t1);\n    }\n    constructor(t1, r1, n1){\n        try {\n            let a1 = b.__wbindgen_add_to_stack_pointer(-16);\n            b.queryengine_new(a1, w(t1), w(r1), w(n1));\n            var i1 = xe()[a1 / 4 + 0], o1 = xe()[a1 / 4 + 1], s1 = xe()[a1 / 4 + 2];\n            if (s1) throw re(o1);\n            return this.__wbg_ptr = i1 >>> 0, this;\n        } finally{\n            b.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    connect(t1) {\n        let r1 = le(t1, b.__wbindgen_malloc, b.__wbindgen_realloc), n1 = Z, i1 = b.queryengine_connect(this.__wbg_ptr, r1, n1);\n        return re(i1);\n    }\n    disconnect(t1) {\n        let r1 = le(t1, b.__wbindgen_malloc, b.__wbindgen_realloc), n1 = Z, i1 = b.queryengine_disconnect(this.__wbg_ptr, r1, n1);\n        return re(i1);\n    }\n    query(t1, r1, n1) {\n        let i1 = le(t1, b.__wbindgen_malloc, b.__wbindgen_realloc), o1 = Z, s1 = le(r1, b.__wbindgen_malloc, b.__wbindgen_realloc), a1 = Z;\n        var l1 = at(n1) ? 0 : le(n1, b.__wbindgen_malloc, b.__wbindgen_realloc), u1 = Z;\n        let c1 = b.queryengine_query(this.__wbg_ptr, i1, o1, s1, a1, l1, u1);\n        return re(c1);\n    }\n    startTransaction(t1, r1) {\n        let n1 = le(t1, b.__wbindgen_malloc, b.__wbindgen_realloc), i1 = Z, o1 = le(r1, b.__wbindgen_malloc, b.__wbindgen_realloc), s1 = Z, a1 = b.queryengine_startTransaction(this.__wbg_ptr, n1, i1, o1, s1);\n        return re(a1);\n    }\n    commitTransaction(t1, r1) {\n        let n1 = le(t1, b.__wbindgen_malloc, b.__wbindgen_realloc), i1 = Z, o1 = le(r1, b.__wbindgen_malloc, b.__wbindgen_realloc), s1 = Z, a1 = b.queryengine_commitTransaction(this.__wbg_ptr, n1, i1, o1, s1);\n        return re(a1);\n    }\n    rollbackTransaction(t1, r1) {\n        let n1 = le(t1, b.__wbindgen_malloc, b.__wbindgen_realloc), i1 = Z, o1 = le(r1, b.__wbindgen_malloc, b.__wbindgen_realloc), s1 = Z, a1 = b.queryengine_rollbackTransaction(this.__wbg_ptr, n1, i1, o1, s1);\n        return re(a1);\n    }\n    metrics(t1) {\n        let r1 = le(t1, b.__wbindgen_malloc, b.__wbindgen_realloc), n1 = Z, i1 = b.queryengine_metrics(this.__wbg_ptr, r1, n1);\n        return re(i1);\n    }\n};\nfunction dm(e1, t1) {\n    try {\n        var r1 = {\n            a: e1,\n            b: t1\n        }, n1 = (o1, s1)=>{\n            let a1 = r1.a;\n            r1.a = 0;\n            try {\n                return pm(a1, r1.b, o1, s1);\n            } finally{\n                r1.a = a1;\n            }\n        };\n        let i1 = new Promise(n1);\n        return w(i1);\n    } finally{\n        r1.a = r1.b = 0;\n    }\n}\nfunction mm(e1) {\n    re(e1);\n}\nfunction fm(e1, t1) {\n    let r1 = Br(e1, t1);\n    return w(r1);\n}\nfunction gm() {\n    return pe(function(e1, t1, r1) {\n        let n1 = h(e1).call(h(t1), h(r1));\n        return w(n1);\n    }, arguments);\n}\nfunction ym(e1, t1) {\n    let r1 = h(t1), n1 = typeof r1 == \"string\" ? r1 : void 0;\n    var i1 = at(n1) ? 0 : le(n1, b.__wbindgen_malloc, b.__wbindgen_realloc), o1 = Z;\n    xe()[e1 / 4 + 1] = o1, xe()[e1 / 4 + 0] = i1;\n}\nfunction hm(e1, t1) {\n    return setTimeout(h(e1), t1 >>> 0);\n}\nfunction bm(e1, t1) {\n    let r1 = new Error(Br(e1, t1));\n    return w(r1);\n}\nfunction xm(e1) {\n    let t1 = h(e1);\n    return w(t1);\n}\nfunction wm(e1) {\n    return h(e1) === void 0;\n}\nfunction Em() {\n    return pe(function(e1) {\n        let t1 = JSON.stringify(h(e1));\n        return w(t1);\n    }, arguments);\n}\nfunction Pm() {\n    return pe(function(e1, t1) {\n        return Reflect.has(h(e1), h(t1));\n    }, arguments);\n}\nfunction vm() {\n    return pe(function(e1, t1) {\n        let r1 = JSON.parse(Br(e1, t1));\n        return w(r1);\n    }, arguments);\n}\nfunction Tm() {\n    return w(new Date);\n}\nfunction _m(e1) {\n    return h(e1).getTime();\n}\nfunction Cm() {\n    let e1 = performance;\n    return at(e1) ? 0 : w(e1);\n}\nfunction Am(e1) {\n    return h(e1).now();\n}\nfunction Rm() {\n    return Date.now();\n}\nfunction Mm(e1, t1) {\n    return h(e1) == h(t1);\n}\nfunction Sm(e1) {\n    let t1 = h(e1);\n    return typeof t1 == \"boolean\" ? t1 ? 1 : 0 : 2;\n}\nfunction Im(e1) {\n    return typeof h(e1) == \"bigint\";\n}\nfunction km(e1, t1) {\n    let r1 = h(t1), n1 = typeof r1 == \"number\" ? r1 : void 0;\n    om()[e1 / 8 + 1] = at(n1) ? 0 : n1, xe()[e1 / 4 + 0] = !at(n1);\n}\nfunction Fm(e1) {\n    return Number.isSafeInteger(h(e1));\n}\nfunction Om(e1, t1) {\n    let r1 = h(t1), n1 = typeof r1 == \"bigint\" ? r1 : void 0;\n    sm()[e1 / 8 + 1] = at(n1) ? BigInt(0) : n1, xe()[e1 / 4 + 0] = !at(n1);\n}\nfunction Dm(e1) {\n    return w(e1);\n}\nfunction Nm(e1, t1) {\n    return h(e1) === h(t1);\n}\nfunction Lm(e1) {\n    return Array.isArray(h(e1));\n}\nfunction $m(e1) {\n    let t1 = h(e1);\n    return typeof t1 == \"object\" && t1 !== null;\n}\nfunction qm() {\n    return w(Symbol.iterator);\n}\nfunction Bm(e1, t1) {\n    return h(e1) in h(t1);\n}\nfunction jm(e1) {\n    let t1 = BigInt.asUintN(64, e1);\n    return w(t1);\n}\nfunction Vm(e1) {\n    return h(e1).length;\n}\nfunction Um(e1, t1) {\n    let r1 = h(e1)[t1 >>> 0];\n    return w(r1);\n}\nfunction Km() {\n    let e1 = new Array;\n    return w(e1);\n}\nfunction Qm(e1) {\n    return w(e1);\n}\nfunction Jm(e1, t1, r1) {\n    h(e1)[t1 >>> 0] = re(r1);\n}\nfunction Gm() {\n    return w(new Map);\n}\nfunction Hm() {\n    let e1 = new Object;\n    return w(e1);\n}\nfunction Wm(e1, t1, r1) {\n    let n1 = h(e1).set(h(t1), h(r1));\n    return w(n1);\n}\nfunction zm(e1) {\n    return typeof h(e1) == \"string\";\n}\nfunction Ym(e1, t1, r1) {\n    h(e1)[re(t1)] = re(r1);\n}\nfunction Zm(e1) {\n    let t1;\n    try {\n        t1 = h(e1) instanceof Promise;\n    } catch  {\n        t1 = !1;\n    }\n    return t1;\n}\nfunction Xm(e1) {\n    return h(e1).valueOf();\n}\nfunction ef(e1, t1) {\n    let r1 = h(e1)[h(t1)];\n    return w(r1);\n}\nfunction tf(e1, t1) {\n    let r1 = String(h(t1)), n1 = le(r1, b.__wbindgen_malloc, b.__wbindgen_realloc), i1 = Z;\n    xe()[e1 / 4 + 1] = i1, xe()[e1 / 4 + 0] = n1;\n}\nfunction rf() {\n    return pe(function(e1, t1) {\n        let r1 = Reflect.get(h(e1), h(t1));\n        return w(r1);\n    }, arguments);\n}\nfunction nf() {\n    return pe(function(e1, t1) {\n        let r1 = h(e1)[re(t1)];\n        return w(r1);\n    }, arguments);\n}\nfunction of(e1, t1, r1) {\n    let n1 = h(e1).subarray(t1 >>> 0, r1 >>> 0);\n    return w(n1);\n}\nfunction sf() {\n    return pe(function(e1, t1) {\n        h(e1).getRandomValues(h(t1));\n    }, arguments);\n}\nfunction af() {\n    let e1 = b.memory;\n    return w(e1);\n}\nfunction lf(e1) {\n    let t1 = h(e1).buffer;\n    return w(t1);\n}\nfunction uf(e1, t1, r1) {\n    let n1 = new Uint8Array(h(e1), t1 >>> 0, r1 >>> 0);\n    return w(n1);\n}\nfunction cf() {\n    return pe(function(e1, t1) {\n        h(e1).randomFillSync(re(t1));\n    }, arguments);\n}\nfunction pf(e1) {\n    let t1 = h(e1).crypto;\n    return w(t1);\n}\nfunction df(e1) {\n    let t1 = h(e1).process;\n    return w(t1);\n}\nfunction mf(e1) {\n    let t1 = h(e1).versions;\n    return w(t1);\n}\nfunction ff(e1) {\n    let t1 = h(e1).node;\n    return w(t1);\n}\nfunction gf() {\n    return pe(function() {\n        let e1 = module.require;\n        return w(e1);\n    }, arguments);\n}\nfunction yf(e1) {\n    return typeof h(e1) == \"function\";\n}\nfunction hf(e1) {\n    let t1 = h(e1).msCrypto;\n    return w(t1);\n}\nfunction bf(e1) {\n    let t1 = new Uint8Array(e1 >>> 0);\n    return w(t1);\n}\nfunction xf() {\n    return pe(function(e1) {\n        let t1 = h(e1).next();\n        return w(t1);\n    }, arguments);\n}\nfunction wf(e1) {\n    return h(e1).done;\n}\nfunction Ef(e1) {\n    let t1 = h(e1).value;\n    return w(t1);\n}\nfunction Pf() {\n    return pe(function(e1, t1) {\n        let r1 = h(e1).call(h(t1));\n        return w(r1);\n    }, arguments);\n}\nfunction vf(e1) {\n    let t1 = h(e1).next;\n    return w(t1);\n}\nfunction Tf() {\n    return pe(function() {\n        let e1 = self.self;\n        return w(e1);\n    }, arguments);\n}\nfunction _f() {\n    return pe(function() {\n        let e1 = window.window;\n        return w(e1);\n    }, arguments);\n}\nfunction Cf() {\n    return pe(function() {\n        let e1 = globalThis.globalThis;\n        return w(e1);\n    }, arguments);\n}\nfunction Af() {\n    return pe(function() {\n        let e1 = global.global;\n        return w(e1);\n    }, arguments);\n}\nfunction Rf(e1, t1) {\n    let r1 = new Function(Br(e1, t1));\n    return w(r1);\n}\nfunction Mf(e1) {\n    let t1 = new Uint8Array(h(e1));\n    return w(t1);\n}\nfunction Sf(e1, t1, r1) {\n    h(e1).set(h(t1), r1 >>> 0);\n}\nfunction If(e1) {\n    return h(e1).length;\n}\nfunction kf(e1) {\n    let t1;\n    try {\n        t1 = h(e1) instanceof Uint8Array;\n    } catch  {\n        t1 = !1;\n    }\n    return t1;\n}\nfunction Ff(e1) {\n    let t1;\n    try {\n        t1 = h(e1) instanceof ArrayBuffer;\n    } catch  {\n        t1 = !1;\n    }\n    return t1;\n}\nfunction Of(e1) {\n    let t1 = Object.entries(h(e1));\n    return w(t1);\n}\nfunction Df(e1, t1) {\n    let r1 = Ao(h(t1)), n1 = le(r1, b.__wbindgen_malloc, b.__wbindgen_realloc), i1 = Z;\n    xe()[e1 / 4 + 1] = i1, xe()[e1 / 4 + 0] = n1;\n}\nfunction Nf(e1, t1) {\n    throw new Error(Br(e1, t1));\n}\nfunction Lf(e1) {\n    let t1 = re(e1).original;\n    return t1.cnt-- == 1 ? (t1.a = 0, !0) : !1;\n}\nfunction $f(e1, t1) {\n    let r1 = h(e1).then(h(t1));\n    return w(r1);\n}\nfunction qf(e1, t1, r1) {\n    let n1 = h(e1).then(h(t1), h(r1));\n    return w(n1);\n}\nfunction Bf(e1) {\n    let t1 = Promise.resolve(h(e1));\n    return w(t1);\n}\nfunction jf(e1, t1, r1) {\n    let n1 = am(e1, t1, 275, lm);\n    return w(n1);\n}\nvar So, Al = {\n    async loadLibrary (e1) {\n        let { generator: t1, clientVersion: r1, adapter: n1 } = e1;\n        if (t1?.previewFeatures.includes(\"driverAdapters\") === void 0) throw new k('The `driverAdapters` preview feature is required with `engineType=\"wasm\"`', r1);\n        if (n1 === void 0) throw new k('The `adapter` option for `PrismaClient` is required with `engineType=\"wasm\"`', r1);\n        if (So === void 0) {\n            let i1 = await e1.getQueryEngineWasmModule?.();\n            if (i1 == null) throw new k(\"The loaded wasm module was unexpectedly `undefined` or `null` once loaded\", r1);\n            So = new WebAssembly.Instance(i1, {\n                \"./query_engine_bg.js\": Mo\n            }).exports, Ro(So);\n        }\n        return {\n            debugPanic () {\n                return Promise.reject(\"{}\");\n            },\n            dmmf () {\n                return Promise.resolve(\"{}\");\n            },\n            version () {\n                return {\n                    commit: \"unknown\",\n                    version: \"unknown\"\n                };\n            },\n            QueryEngine: qr\n        };\n    }\n};\nvar Vf = \"P2036\", qe = $(\"prisma:client:libraryEngine\");\nfunction Uf(e1) {\n    return e1.item_type === \"query\" && \"query\" in e1;\n}\nfunction Kf(e1) {\n    return \"level\" in e1 ? e1.level === \"error\" && e1.message === \"PANIC\" : !1;\n}\nvar Rl = [\n    ...Ei,\n    \"native\"\n], Ml = 0, zt = class extends Jt {\n    constructor(t1, r1){\n        super(), gt(t1.generator) === \"wasm\" ? this.libraryLoader = r1 ?? Al : this.libraryLoader = r1 ?? _l, this.config = t1, this.libraryStarted = !1, this.logQueries = t1.logQueries ?? !1, this.logLevel = t1.logLevel ?? \"error\", this.logEmitter = t1.logEmitter, this.datamodel = atob(t1.inlineSchema), t1.enableDebugLogs && (this.logLevel = \"debug\");\n        let i1 = Object.keys(t1.overrideDatasources)[0], o1 = t1.overrideDatasources[i1]?.url;\n        i1 !== void 0 && o1 !== void 0 && (this.datasourceOverrides = {\n            [i1]: o1\n        }), this.libraryInstantiationPromise = this.instantiateLibrary(), this.checkForTooManyEngines();\n    }\n    checkForTooManyEngines() {\n        Ml === 10 && console.warn(`${Re(\"warn(prisma-client)\")} This is the 10th instance of Prisma Client being started. Make sure this is intentional.`);\n    }\n    async transaction(t1, r1, n1) {\n        await this.start();\n        let i1 = JSON.stringify(r1), o1;\n        if (t1 === \"start\") {\n            let a1 = JSON.stringify({\n                max_wait: n1?.maxWait ?? 2e3,\n                timeout: n1?.timeout ?? 5e3,\n                isolation_level: n1?.isolationLevel\n            });\n            o1 = await this.engine?.startTransaction(a1, i1);\n        } else t1 === \"commit\" ? o1 = await this.engine?.commitTransaction(n1.id, i1) : t1 === \"rollback\" && (o1 = await this.engine?.rollbackTransaction(n1.id, i1));\n        let s1 = this.parseEngineResponse(o1);\n        if (Qf(s1)) {\n            let a1 = this.getExternalAdapterError(s1);\n            throw a1 ? a1.error : new H(s1.message, {\n                code: s1.error_code,\n                clientVersion: this.config.clientVersion,\n                meta: s1.meta\n            });\n        }\n        return s1;\n    }\n    async instantiateLibrary() {\n        if (qe(\"internalSetup\"), this.libraryInstantiationPromise) return this.libraryInstantiationPromise;\n        wi(), this.binaryTarget = await this.getCurrentBinaryTarget(), await this.loadEngine(), this.version();\n    }\n    async getCurrentBinaryTarget() {\n        {\n            if (this.binaryTarget) return this.binaryTarget;\n            let t1 = await ft();\n            if (!Rl.includes(t1)) throw new k(`Unknown ${ve(\"PRISMA_QUERY_ENGINE_LIBRARY\")} ${ve(de(t1))}. Possible binaryTargets: ${pt(Rl.join(\", \"))} or a path to the query engine library.\nYou may have to run ${pt(\"prisma generate\")} for your changes to take effect.`, this.config.clientVersion);\n            return t1;\n        }\n    }\n    parseEngineResponse(t1) {\n        if (!t1) throw new W(\"Response from the Engine was empty\", {\n            clientVersion: this.config.clientVersion\n        });\n        try {\n            return JSON.parse(t1);\n        } catch  {\n            throw new W(\"Unable to JSON.parse response from engine\", {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async loadEngine() {\n        if (!this.engine) {\n            this.QueryEngineConstructor || (this.library = await this.libraryLoader.loadLibrary(this.config), this.QueryEngineConstructor = this.library.QueryEngine);\n            try {\n                let t1 = new WeakRef(this), { adapter: r1 } = this.config;\n                r1 && qe(\"Using driver adapter: %O\", r1), this.engine = new this.QueryEngineConstructor({\n                    datamodel: this.datamodel,\n                    env: process.env,\n                    logQueries: this.config.logQueries ?? !1,\n                    ignoreEnvVarErrors: !0,\n                    datasourceOverrides: this.datasourceOverrides ?? {},\n                    logLevel: this.logLevel,\n                    configDir: this.config.cwd,\n                    engineProtocol: \"json\"\n                }, (n1)=>{\n                    t1.deref()?.logger(n1);\n                }, r1), Ml++;\n            } catch (t1) {\n                let r1 = t1, n1 = this.parseInitError(r1.message);\n                throw typeof n1 == \"string\" ? r1 : new k(n1.message, this.config.clientVersion, n1.error_code);\n            }\n        }\n    }\n    logger(t1) {\n        let r1 = this.parseEngineResponse(t1);\n        if (r1) {\n            if (\"span\" in r1) {\n                this.config.tracingHelper.createEngineSpan(r1);\n                return;\n            }\n            r1.level = r1?.level.toLowerCase() ?? \"unknown\", Uf(r1) ? this.logEmitter.emit(\"query\", {\n                timestamp: new Date,\n                query: r1.query,\n                params: r1.params,\n                duration: Number(r1.duration_ms),\n                target: r1.module_path\n            }) : Kf(r1) ? this.loggerRustPanic = new be(this.getErrorMessageWithLink(`${r1.message}: ${r1.reason} in ${r1.file}:${r1.line}:${r1.column}`), this.config.clientVersion) : this.logEmitter.emit(r1.level, {\n                timestamp: new Date,\n                message: r1.message,\n                target: r1.module_path\n            });\n        }\n    }\n    getErrorMessageWithLink(t1) {\n        return fl({\n            binaryTarget: this.binaryTarget,\n            title: t1,\n            version: this.config.clientVersion,\n            engineVersion: this.versionInfo?.commit,\n            database: this.config.activeProvider,\n            query: this.lastQuery\n        });\n    }\n    parseInitError(t1) {\n        try {\n            return JSON.parse(t1);\n        } catch  {}\n        return t1;\n    }\n    parseRequestError(t1) {\n        try {\n            return JSON.parse(t1);\n        } catch  {}\n        return t1;\n    }\n    onBeforeExit() {\n        throw new Error('\"beforeExit\" hook is not applicable to the library engine since Prisma 5.0.0, it is only relevant and implemented for the binary engine. Please add your event listener to the `process` object directly instead.');\n    }\n    async start() {\n        if (await this.libraryInstantiationPromise, await this.libraryStoppingPromise, this.libraryStartingPromise) return qe(`library already starting, this.libraryStarted: ${this.libraryStarted}`), this.libraryStartingPromise;\n        if (this.libraryStarted) return;\n        let t1 = async ()=>{\n            qe(\"library starting\");\n            try {\n                let r1 = {\n                    traceparent: this.config.tracingHelper.getTraceParent()\n                };\n                await this.engine?.connect(JSON.stringify(r1)), this.libraryStarted = !0, qe(\"library started\");\n            } catch (r1) {\n                let n1 = this.parseInitError(r1.message);\n                throw typeof n1 == \"string\" ? r1 : new k(n1.message, this.config.clientVersion, n1.error_code);\n            } finally{\n                this.libraryStartingPromise = void 0;\n            }\n        };\n        return this.libraryStartingPromise = this.config.tracingHelper.runInChildSpan(\"connect\", t1), this.libraryStartingPromise;\n    }\n    async stop() {\n        if (await this.libraryStartingPromise, await this.executingQueryPromise, this.libraryStoppingPromise) return qe(\"library is already stopping\"), this.libraryStoppingPromise;\n        if (!this.libraryStarted) return;\n        let t1 = async ()=>{\n            await new Promise((n1)=>setTimeout(n1, 5)), qe(\"library stopping\");\n            let r1 = {\n                traceparent: this.config.tracingHelper.getTraceParent()\n            };\n            await this.engine?.disconnect(JSON.stringify(r1)), this.libraryStarted = !1, this.libraryStoppingPromise = void 0, qe(\"library stopped\");\n        };\n        return this.libraryStoppingPromise = this.config.tracingHelper.runInChildSpan(\"disconnect\", t1), this.libraryStoppingPromise;\n    }\n    version() {\n        return this.versionInfo = this.library?.version(), this.versionInfo?.version ?? \"unknown\";\n    }\n    debugPanic(t1) {\n        return this.library?.debugPanic(t1);\n    }\n    async request(t1, { traceparent: r1, interactiveTransaction: n1 }) {\n        qe(`sending request, this.libraryStarted: ${this.libraryStarted}`);\n        let i1 = JSON.stringify({\n            traceparent: r1\n        }), o1 = JSON.stringify(t1);\n        try {\n            await this.start(), this.executingQueryPromise = this.engine?.query(o1, i1, n1?.id), this.lastQuery = o1;\n            let s1 = this.parseEngineResponse(await this.executingQueryPromise);\n            if (s1.errors) throw s1.errors.length === 1 ? this.buildQueryError(s1.errors[0]) : new W(JSON.stringify(s1.errors), {\n                clientVersion: this.config.clientVersion\n            });\n            if (this.loggerRustPanic) throw this.loggerRustPanic;\n            return {\n                data: s1,\n                elapsed: 0\n            };\n        } catch (s1) {\n            if (s1 instanceof k) throw s1;\n            if (s1.code === \"GenericFailure\" && s1.message?.startsWith(\"PANIC:\")) throw new be(this.getErrorMessageWithLink(s1.message), this.config.clientVersion);\n            let a1 = this.parseRequestError(s1.message);\n            throw typeof a1 == \"string\" ? s1 : new W(`${a1.message}\n${a1.backtrace}`, {\n                clientVersion: this.config.clientVersion\n            });\n        }\n    }\n    async requestBatch(t1, { transaction: r1, traceparent: n1 }) {\n        qe(\"requestBatch\");\n        let i1 = jn(t1, r1);\n        await this.start(), this.lastQuery = JSON.stringify(i1), this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify({\n            traceparent: n1\n        }), vl(r1));\n        let o1 = await this.executingQueryPromise, s1 = this.parseEngineResponse(o1);\n        if (s1.errors) throw s1.errors.length === 1 ? this.buildQueryError(s1.errors[0]) : new W(JSON.stringify(s1.errors), {\n            clientVersion: this.config.clientVersion\n        });\n        let { batchResult: a1, errors: l1 } = s1;\n        if (Array.isArray(a1)) return a1.map((u1)=>u1.errors && u1.errors.length > 0 ? this.loggerRustPanic ?? this.buildQueryError(u1.errors[0]) : {\n                data: u1,\n                elapsed: 0\n            });\n        throw l1 && l1.length === 1 ? new Error(l1[0].error) : new Error(JSON.stringify(s1));\n    }\n    buildQueryError(t1) {\n        if (t1.user_facing_error.is_panic) return new be(this.getErrorMessageWithLink(t1.user_facing_error.message), this.config.clientVersion);\n        let r1 = this.getExternalAdapterError(t1.user_facing_error);\n        return r1 ? r1.error : vr(t1, this.config.clientVersion);\n    }\n    getExternalAdapterError(t1) {\n        if (t1.error_code === Vf && this.config.adapter) {\n            let r1 = t1.meta?.id;\n            dn(typeof r1 == \"number\", \"Malformed external JS error received from the engine\");\n            let n1 = this.config.adapter.errorRegistry.consumeError(r1);\n            return dn(n1, \"External error with reported id was not registered\"), n1;\n        }\n    }\n    async metrics(t1) {\n        await this.start();\n        let r1 = await this.engine.metrics(JSON.stringify(t1));\n        return t1.format === \"prometheus\" ? r1 : this.parseEngineResponse(r1);\n    }\n};\nfunction Qf(e1) {\n    return typeof e1 == \"object\" && e1 !== null && e1.error_code !== void 0;\n}\nfunction Sl(e1, t1) {\n    let r1;\n    try {\n        r1 = Vn({\n            inlineDatasources: t1.inlineDatasources,\n            overrideDatasources: t1.overrideDatasources,\n            env: {\n                ...t1.env,\n                ...process.env\n            },\n            clientVersion: t1.clientVersion\n        });\n    } catch  {}\n    e1.noEngine !== !0 && r1?.startsWith(\"prisma://\") && lr(\"recommend--no-engine\", \"In production, we recommend using `prisma generate --no-engine` (See: `prisma generate --help`)\");\n    let n1 = gt(t1.generator);\n    if (n1 === \"wasm\" && t1.adapter !== void 0) return new zt(t1);\n    if (r1?.startsWith(\"prisma://\") || e1.noEngine) return new Lr(t1);\n    if (n1 === \"library\") return new zt(t1);\n    throw \"binary\", new se(\"Invalid client engine type, please use `library` or `binary`\", {\n        clientVersion: t1.clientVersion\n    });\n}\nfunction zn({ generator: e1 }) {\n    return e1?.previewFeatures ?? [];\n}\nvar Nl = F(Io());\nfunction Ol(e1, t1) {\n    let r1 = Dl(e1), n1 = Jf(r1), i1 = Hf(n1);\n    i1 ? Yn(i1, t1) : t1.addErrorMessage(()=>\"Unknown error\");\n}\nfunction Dl(e1) {\n    return e1.errors.flatMap((t1)=>t1.kind === \"Union\" ? Dl(t1) : [\n            t1\n        ]);\n}\nfunction Jf(e1) {\n    let t1 = new Map, r1 = [];\n    for (let n1 of e1){\n        if (n1.kind !== \"InvalidArgumentType\") {\n            r1.push(n1);\n            continue;\n        }\n        let i1 = `${n1.selectionPath.join(\".\")}:${n1.argumentPath.join(\".\")}`, o1 = t1.get(i1);\n        o1 ? t1.set(i1, {\n            ...n1,\n            argument: {\n                ...n1.argument,\n                typeNames: Gf(o1.argument.typeNames, n1.argument.typeNames)\n            }\n        }) : t1.set(i1, n1);\n    }\n    return r1.push(...t1.values()), r1;\n}\nfunction Gf(e1, t1) {\n    return [\n        ...new Set(e1.concat(t1))\n    ];\n}\nfunction Hf(e1) {\n    return Qi(e1, (t1, r1)=>{\n        let n1 = kl(t1), i1 = kl(r1);\n        return n1 !== i1 ? n1 - i1 : Fl(t1) - Fl(r1);\n    });\n}\nfunction kl(e1) {\n    let t1 = 0;\n    return Array.isArray(e1.selectionPath) && (t1 += e1.selectionPath.length), Array.isArray(e1.argumentPath) && (t1 += e1.argumentPath.length), t1;\n}\nfunction Fl(e1) {\n    switch(e1.kind){\n        case \"InvalidArgumentValue\":\n        case \"ValueTooLarge\":\n            return 20;\n        case \"InvalidArgumentType\":\n            return 10;\n        case \"RequiredArgumentMissing\":\n            return -10;\n        default:\n            return 0;\n    }\n}\nvar Qe = class {\n    constructor(t1, r1){\n        this.name = t1;\n        this.value = r1;\n        this.isRequired = !1;\n    }\n    makeRequired() {\n        return this.isRequired = !0, this;\n    }\n    write(t1) {\n        let { colors: { green: r1 } } = t1.context;\n        t1.addMarginSymbol(r1(this.isRequired ? \"+\" : \"?\")), t1.write(r1(this.name)), this.isRequired || t1.write(r1(\"?\")), t1.write(r1(\": \")), typeof this.value == \"string\" ? t1.write(r1(this.value)) : t1.write(this.value);\n    }\n};\nvar Zn = class {\n    constructor(){\n        this.fields = [];\n    }\n    addField(t1, r1) {\n        return this.fields.push({\n            write (n1) {\n                let { green: i1, dim: o1 } = n1.context.colors;\n                n1.write(i1(o1(`${t1}: ${r1}`))).addMarginSymbol(i1(o1(\"+\")));\n            }\n        }), this;\n    }\n    write(t1) {\n        let { colors: { green: r1 } } = t1.context;\n        t1.writeLine(r1(\"{\")).withIndent(()=>{\n            t1.writeJoined(Vt, this.fields).newLine();\n        }).write(r1(\"}\")).addMarginSymbol(r1(\"+\"));\n    }\n};\nfunction Yn(e1, t1) {\n    switch(e1.kind){\n        case \"IncludeAndSelect\":\n            Wf(e1, t1);\n            break;\n        case \"IncludeOnScalar\":\n            zf(e1, t1);\n            break;\n        case \"EmptySelection\":\n            Yf(e1, t1);\n            break;\n        case \"UnknownSelectionField\":\n            Zf(e1, t1);\n            break;\n        case \"UnknownArgument\":\n            Xf(e1, t1);\n            break;\n        case \"UnknownInputField\":\n            eg(e1, t1);\n            break;\n        case \"RequiredArgumentMissing\":\n            tg(e1, t1);\n            break;\n        case \"InvalidArgumentType\":\n            rg(e1, t1);\n            break;\n        case \"InvalidArgumentValue\":\n            ng(e1, t1);\n            break;\n        case \"ValueTooLarge\":\n            ig(e1, t1);\n            break;\n        case \"SomeFieldsMissing\":\n            og(e1, t1);\n            break;\n        case \"TooManyFieldsGiven\":\n            sg(e1, t1);\n            break;\n        case \"Union\":\n            Ol(e1, t1);\n            break;\n        default:\n            throw new Error(\"not implemented: \" + e1.kind);\n    }\n}\nfunction Wf(e1, t1) {\n    let r1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    r1 && r1 instanceof z && (r1.getField(\"include\")?.markAsError(), r1.getField(\"select\")?.markAsError()), t1.addErrorMessage((n1)=>`Please ${n1.bold(\"either\")} use ${n1.green(\"`include`\")} or ${n1.green(\"`select`\")}, but ${n1.red(\"not both\")} at the same time.`);\n}\nfunction zf(e1, t1) {\n    let [r1, n1] = Xn(e1.selectionPath), i1 = e1.outputType, o1 = t1.arguments.getDeepSelectionParent(r1)?.value;\n    if (o1 && (o1.getField(n1)?.markAsError(), i1)) for (let s1 of i1.fields)s1.isRelation && o1.addSuggestion(new Qe(s1.name, \"true\"));\n    t1.addErrorMessage((s1)=>{\n        let a1 = `Invalid scalar field ${s1.red(`\\`${n1}\\``)} for ${s1.bold(\"include\")} statement`;\n        return i1 ? a1 += ` on model ${s1.bold(i1.name)}. ${jr(s1)}` : a1 += \".\", a1 += `\nNote that ${s1.bold(\"include\")} statements only accept relation fields.`, a1;\n    });\n}\nfunction Yf(e1, t1) {\n    let r1 = e1.outputType, n1 = t1.arguments.getDeepSelectionParent(e1.selectionPath)?.value, i1 = n1?.isEmpty() ?? !1;\n    n1 && (n1.removeAllFields(), ql(n1, r1)), t1.addErrorMessage((o1)=>i1 ? `The ${o1.red(\"`select`\")} statement for type ${o1.bold(r1.name)} must not be empty. ${jr(o1)}` : `The ${o1.red(\"`select`\")} statement for type ${o1.bold(r1.name)} needs ${o1.bold(\"at least one truthy value\")}.`);\n}\nfunction Zf(e1, t1) {\n    let [r1, n1] = Xn(e1.selectionPath), i1 = t1.arguments.getDeepSelectionParent(r1);\n    i1 && (i1.value.getField(n1)?.markAsError(), ql(i1.value, e1.outputType)), t1.addErrorMessage((o1)=>{\n        let s1 = [\n            `Unknown field ${o1.red(`\\`${n1}\\``)}`\n        ];\n        return i1 && s1.push(`for ${o1.bold(i1.kind)} statement`), s1.push(`on model ${o1.bold(`\\`${e1.outputType.name}\\``)}.`), s1.push(jr(o1)), s1.join(\" \");\n    });\n}\nfunction Xf(e1, t1) {\n    let r1 = e1.argumentPath[0], n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    n1 instanceof z && (n1.getField(r1)?.markAsError(), ag(n1, e1.arguments)), t1.addErrorMessage((i1)=>Ll(i1, r1, e1.arguments.map((o1)=>o1.name)));\n}\nfunction eg(e1, t1) {\n    let [r1, n1] = Xn(e1.argumentPath), i1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    if (i1 instanceof z) {\n        i1.getDeepField(e1.argumentPath)?.markAsError();\n        let o1 = i1.getDeepFieldValue(r1);\n        o1 instanceof z && Bl(o1, e1.inputType);\n    }\n    t1.addErrorMessage((o1)=>Ll(o1, n1, e1.inputType.fields.map((s1)=>s1.name)));\n}\nfunction Ll(e1, t1, r1) {\n    let n1 = [\n        `Unknown argument \\`${e1.red(t1)}\\`.`\n    ], i1 = ug(t1, r1);\n    return i1 && n1.push(`Did you mean \\`${e1.green(i1)}\\`?`), r1.length > 0 && n1.push(jr(e1)), n1.join(\" \");\n}\nfunction tg(e1, t1) {\n    let r1;\n    t1.addErrorMessage((l1)=>r1?.value instanceof Y && r1.value.text === \"null\" ? `Argument \\`${l1.green(o1)}\\` must not be ${l1.red(\"null\")}.` : `Argument \\`${l1.green(o1)}\\` is missing.`);\n    let n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    if (!(n1 instanceof z)) return;\n    let [i1, o1] = Xn(e1.argumentPath), s1 = new Zn, a1 = n1.getDeepFieldValue(i1);\n    if (a1 instanceof z) if (r1 = a1.getField(o1), r1 && a1.removeField(o1), e1.inputTypes.length === 1 && e1.inputTypes[0].kind === \"object\") {\n        for (let l1 of e1.inputTypes[0].fields)s1.addField(l1.name, l1.typeNames.join(\" | \"));\n        a1.addSuggestion(new Qe(o1, s1).makeRequired());\n    } else {\n        let l1 = e1.inputTypes.map($l).join(\" | \");\n        a1.addSuggestion(new Qe(o1, l1).makeRequired());\n    }\n}\nfunction $l(e1) {\n    return e1.kind === \"list\" ? `${$l(e1.elementType)}[]` : e1.name;\n}\nfunction rg(e1, t1) {\n    let r1 = e1.argument.name, n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    n1 instanceof z && n1.getDeepFieldValue(e1.argumentPath)?.markAsError(), t1.addErrorMessage((i1)=>{\n        let o1 = ei(\"or\", e1.argument.typeNames.map((s1)=>i1.green(s1)));\n        return `Argument \\`${i1.bold(r1)}\\`: Invalid value provided. Expected ${o1}, provided ${i1.red(e1.inferredType)}.`;\n    });\n}\nfunction ng(e1, t1) {\n    let r1 = e1.argument.name, n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    n1 instanceof z && n1.getDeepFieldValue(e1.argumentPath)?.markAsError(), t1.addErrorMessage((i1)=>{\n        let o1 = [\n            `Invalid value for argument \\`${i1.bold(r1)}\\``\n        ];\n        if (e1.underlyingError && o1.push(`: ${e1.underlyingError}`), o1.push(\".\"), e1.argument.typeNames.length > 0) {\n            let s1 = ei(\"or\", e1.argument.typeNames.map((a1)=>i1.green(a1)));\n            o1.push(` Expected ${s1}.`);\n        }\n        return o1.join(\"\");\n    });\n}\nfunction ig(e1, t1) {\n    let r1 = e1.argument.name, n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath), i1;\n    if (n1 instanceof z) {\n        let s1 = n1.getDeepField(e1.argumentPath)?.value;\n        s1?.markAsError(), s1 instanceof Y && (i1 = s1.text);\n    }\n    t1.addErrorMessage((o1)=>{\n        let s1 = [\n            \"Unable to fit value\"\n        ];\n        return i1 && s1.push(o1.red(i1)), s1.push(`into a 64-bit signed integer for field \\`${o1.bold(r1)}\\``), s1.join(\" \");\n    });\n}\nfunction og(e1, t1) {\n    let r1 = e1.argumentPath[e1.argumentPath.length - 1], n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath);\n    if (n1 instanceof z) {\n        let i1 = n1.getDeepFieldValue(e1.argumentPath);\n        i1 instanceof z && Bl(i1, e1.inputType);\n    }\n    t1.addErrorMessage((i1)=>{\n        let o1 = [\n            `Argument \\`${i1.bold(r1)}\\` of type ${i1.bold(e1.inputType.name)} needs`\n        ];\n        return e1.constraints.minFieldCount === 1 ? e1.constraints.requiredFields ? o1.push(`${i1.green(\"at least one of\")} ${ei(\"or\", e1.constraints.requiredFields.map((s1)=>`\\`${i1.bold(s1)}\\``))} arguments.`) : o1.push(`${i1.green(\"at least one\")} argument.`) : o1.push(`${i1.green(`at least ${e1.constraints.minFieldCount}`)} arguments.`), o1.push(jr(i1)), o1.join(\" \");\n    });\n}\nfunction sg(e1, t1) {\n    let r1 = e1.argumentPath[e1.argumentPath.length - 1], n1 = t1.arguments.getDeepSubSelectionValue(e1.selectionPath), i1 = [];\n    if (n1 instanceof z) {\n        let o1 = n1.getDeepFieldValue(e1.argumentPath);\n        o1 instanceof z && (o1.markAsError(), i1 = Object.keys(o1.getFields()));\n    }\n    t1.addErrorMessage((o1)=>{\n        let s1 = [\n            `Argument \\`${o1.bold(r1)}\\` of type ${o1.bold(e1.inputType.name)} needs`\n        ];\n        return e1.constraints.minFieldCount === 1 && e1.constraints.maxFieldCount == 1 ? s1.push(`${o1.green(\"exactly one\")} argument,`) : e1.constraints.maxFieldCount == 1 ? s1.push(`${o1.green(\"at most one\")} argument,`) : s1.push(`${o1.green(`at most ${e1.constraints.maxFieldCount}`)} arguments,`), s1.push(`but you provided ${ei(\"and\", i1.map((a1)=>o1.red(a1)))}. Please choose`), e1.constraints.maxFieldCount === 1 ? s1.push(\"one.\") : s1.push(`${e1.constraints.maxFieldCount}.`), s1.join(\" \");\n    });\n}\nfunction ql(e1, t1) {\n    for (let r1 of t1.fields)e1.hasField(r1.name) || e1.addSuggestion(new Qe(r1.name, \"true\"));\n}\nfunction ag(e1, t1) {\n    for (let r1 of t1)e1.hasField(r1.name) || e1.addSuggestion(new Qe(r1.name, r1.typeNames.join(\" | \")));\n}\nfunction Bl(e1, t1) {\n    if (t1.kind === \"object\") for (let r1 of t1.fields)e1.hasField(r1.name) || e1.addSuggestion(new Qe(r1.name, r1.typeNames.join(\" | \")));\n}\nfunction Xn(e1) {\n    let t1 = [\n        ...e1\n    ], r1 = t1.pop();\n    if (!r1) throw new Error(\"unexpected empty path\");\n    return [\n        t1,\n        r1\n    ];\n}\nfunction jr({ green: e1, enabled: t1 }) {\n    return \"Available options are \" + (t1 ? `listed in ${e1(\"green\")}` : \"marked with ?\") + \".\";\n}\nfunction ei(e1, t1) {\n    if (t1.length === 1) return t1[0];\n    let r1 = [\n        ...t1\n    ], n1 = r1.pop();\n    return `${r1.join(\", \")} ${e1} ${n1}`;\n}\nvar lg = 3;\nfunction ug(e1, t1) {\n    let r1 = 1 / 0, n1;\n    for (let i1 of t1){\n        let o1 = (0, Nl.default)(e1, i1);\n        o1 > lg || o1 < r1 && (r1 = o1, n1 = i1);\n    }\n    return n1;\n}\nfunction ti({ args: e1, errors: t1, errorFormat: r1, callsite: n1, originalMethod: i1, clientVersion: o1 }) {\n    let s1 = Sn(e1);\n    for (let p1 of t1)Yn(p1, s1);\n    let a1 = r1 === \"pretty\" ? ha : Rn, l1 = s1.renderAllMessages(a1), u1 = new Nt(0, {\n        colors: a1\n    }).write(s1).toString(), c1 = Qt({\n        message: l1,\n        callsite: n1,\n        originalMethod: i1,\n        showColors: r1 === \"pretty\",\n        callArguments: u1\n    });\n    throw new se(c1, {\n        clientVersion: o1\n    });\n}\nvar cg = {\n    findUnique: \"findUnique\",\n    findUniqueOrThrow: \"findUniqueOrThrow\",\n    findFirst: \"findFirst\",\n    findFirstOrThrow: \"findFirstOrThrow\",\n    findMany: \"findMany\",\n    count: \"aggregate\",\n    create: \"createOne\",\n    createMany: \"createMany\",\n    update: \"updateOne\",\n    updateMany: \"updateMany\",\n    upsert: \"upsertOne\",\n    delete: \"deleteOne\",\n    deleteMany: \"deleteMany\",\n    executeRaw: \"executeRaw\",\n    queryRaw: \"queryRaw\",\n    aggregate: \"aggregate\",\n    groupBy: \"groupBy\",\n    runCommandRaw: \"runCommandRaw\",\n    findRaw: \"findRaw\",\n    aggregateRaw: \"aggregateRaw\"\n};\nfunction jl({ modelName: e1, action: t1, args: r1, runtimeDataModel: n1, extensions: i1, callsite: o1, clientMethod: s1, errorFormat: a1, clientVersion: l1 }) {\n    let u1 = new ko({\n        runtimeDataModel: n1,\n        modelName: e1,\n        action: t1,\n        rootArgs: r1,\n        callsite: o1,\n        extensions: i1,\n        selectionPath: [],\n        argumentPath: [],\n        originalMethod: s1,\n        errorFormat: a1,\n        clientVersion: l1\n    });\n    return {\n        modelName: e1,\n        action: cg[t1],\n        query: Fo(r1, u1)\n    };\n}\nfunction Fo({ select: e1, include: t1, ...r1 } = {}, n1) {\n    return {\n        arguments: Ul(r1, n1),\n        selection: pg(e1, t1, n1)\n    };\n}\nfunction pg(e1, t1, r1) {\n    return e1 && t1 && r1.throwValidationError({\n        kind: \"IncludeAndSelect\",\n        selectionPath: r1.getSelectionPath()\n    }), e1 ? fg(e1, r1) : dg(r1, t1);\n}\nfunction dg(e1, t1) {\n    let r1 = {};\n    return e1.model && !e1.isRawAction() && (r1.$composites = !0, r1.$scalars = !0), t1 && mg(r1, t1, e1), r1;\n}\nfunction mg(e1, t1, r1) {\n    for (let [n1, i1] of Object.entries(t1)){\n        let o1 = r1.findField(n1);\n        o1 && o1?.kind !== \"object\" && r1.throwValidationError({\n            kind: \"IncludeOnScalar\",\n            selectionPath: r1.getSelectionPath().concat(n1),\n            outputType: r1.getOutputTypeDescription()\n        }), i1 === !0 ? e1[n1] = !0 : typeof i1 == \"object\" && (e1[n1] = Fo(i1, r1.nestSelection(n1)));\n    }\n}\nfunction fg(e1, t1) {\n    let r1 = {}, n1 = t1.getComputedFields(), i1 = Za(e1, n1);\n    for (let [o1, s1] of Object.entries(i1)){\n        let a1 = t1.findField(o1);\n        n1?.[o1] && !a1 || (s1 === !0 ? r1[o1] = !0 : typeof s1 == \"object\" && (r1[o1] = Fo(s1, t1.nestSelection(o1))));\n    }\n    return r1;\n}\nfunction Vl(e1, t1) {\n    if (e1 === null) return null;\n    if (typeof e1 == \"string\" || typeof e1 == \"number\" || typeof e1 == \"boolean\") return e1;\n    if (typeof e1 == \"bigint\") return {\n        $type: \"BigInt\",\n        value: String(e1)\n    };\n    if (Lt(e1)) {\n        if (bn(e1)) return {\n            $type: \"DateTime\",\n            value: e1.toISOString()\n        };\n        t1.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: t1.getSelectionPath(),\n            argumentPath: t1.getArgumentPath(),\n            argument: {\n                name: t1.getArgumentName(),\n                typeNames: [\n                    \"Date\"\n                ]\n            },\n            underlyingError: \"Provided Date object is invalid\"\n        });\n    }\n    if (jt(e1)) return {\n        $type: \"FieldRef\",\n        value: {\n            _ref: e1.name,\n            _container: e1.modelName\n        }\n    };\n    if (Array.isArray(e1)) return gg(e1, t1);\n    if (ArrayBuffer.isView(e1)) return {\n        $type: \"Bytes\",\n        value: Buffer.from(e1).toString(\"base64\")\n    };\n    if (yg(e1)) return e1.values;\n    if (Bt(e1)) return {\n        $type: \"Decimal\",\n        value: e1.toFixed()\n    };\n    if (e1 instanceof ke) {\n        if (e1 !== gn.instances[e1._getName()]) throw new Error(\"Invalid ObjectEnumValue\");\n        return {\n            $type: \"Enum\",\n            value: e1._getName()\n        };\n    }\n    if (hg(e1)) return e1.toJSON();\n    if (typeof e1 == \"object\") return Ul(e1, t1);\n    t1.throwValidationError({\n        kind: \"InvalidArgumentValue\",\n        selectionPath: t1.getSelectionPath(),\n        argumentPath: t1.getArgumentPath(),\n        argument: {\n            name: t1.getArgumentName(),\n            typeNames: []\n        },\n        underlyingError: `We could not serialize ${Object.prototype.toString.call(e1)} value. Serialize the object to JSON or implement a \".toJSON()\" method on it`\n    });\n}\nfunction Ul(e1, t1) {\n    if (e1.$type) return {\n        $type: \"Json\",\n        value: JSON.stringify(e1)\n    };\n    let r1 = {};\n    for(let n1 in e1){\n        let i1 = e1[n1];\n        i1 !== void 0 && (r1[n1] = Vl(i1, t1.nestArgument(n1)));\n    }\n    return r1;\n}\nfunction gg(e1, t1) {\n    let r1 = [];\n    for(let n1 = 0; n1 < e1.length; n1++){\n        let i1 = t1.nestArgument(String(n1)), o1 = e1[n1];\n        o1 === void 0 && t1.throwValidationError({\n            kind: \"InvalidArgumentValue\",\n            selectionPath: i1.getSelectionPath(),\n            argumentPath: i1.getArgumentPath(),\n            argument: {\n                name: `${t1.getArgumentName()}[${n1}]`,\n                typeNames: []\n            },\n            underlyingError: \"Can not use `undefined` value within array. Use `null` or filter out `undefined` values\"\n        }), r1.push(Vl(o1, i1));\n    }\n    return r1;\n}\nfunction yg(e1) {\n    return typeof e1 == \"object\" && e1 !== null && e1.__prismaRawParameters__ === !0;\n}\nfunction hg(e1) {\n    return typeof e1 == \"object\" && e1 !== null && typeof e1.toJSON == \"function\";\n}\nvar ko = class e {\n    constructor(t1){\n        this.params = t1;\n        this.params.modelName && (this.model = this.params.runtimeDataModel.models[this.params.modelName]);\n    }\n    throwValidationError(t1) {\n        ti({\n            errors: [\n                t1\n            ],\n            originalMethod: this.params.originalMethod,\n            args: this.params.rootArgs ?? {},\n            callsite: this.params.callsite,\n            errorFormat: this.params.errorFormat,\n            clientVersion: this.params.clientVersion\n        });\n    }\n    getSelectionPath() {\n        return this.params.selectionPath;\n    }\n    getArgumentPath() {\n        return this.params.argumentPath;\n    }\n    getArgumentName() {\n        return this.params.argumentPath[this.params.argumentPath.length - 1];\n    }\n    getOutputTypeDescription() {\n        if (!(!this.params.modelName || !this.model)) return {\n            name: this.params.modelName,\n            fields: this.model.fields.map((t1)=>({\n                    name: t1.name,\n                    typeName: \"boolean\",\n                    isRelation: t1.kind === \"object\"\n                }))\n        };\n    }\n    isRawAction() {\n        return [\n            \"executeRaw\",\n            \"queryRaw\",\n            \"runCommandRaw\",\n            \"findRaw\",\n            \"aggregateRaw\"\n        ].includes(this.params.action);\n    }\n    getComputedFields() {\n        if (this.params.modelName) return this.params.extensions.getAllComputedFields(this.params.modelName);\n    }\n    findField(t1) {\n        return this.model?.fields.find((r1)=>r1.name === t1);\n    }\n    nestSelection(t1) {\n        let r1 = this.findField(t1), n1 = r1?.kind === \"object\" ? r1.type : void 0;\n        return new e({\n            ...this.params,\n            modelName: n1,\n            selectionPath: this.params.selectionPath.concat(t1)\n        });\n    }\n    nestArgument(t1) {\n        return new e({\n            ...this.params,\n            argumentPath: this.params.argumentPath.concat(t1)\n        });\n    }\n};\nvar Kl = (e1)=>({\n        command: e1\n    });\nvar Ql = (e1)=>e1.strings.reduce((t1, r1, n1)=>`${t1}@P${n1}${r1}`);\nfunction Vr(e1) {\n    try {\n        return Jl(e1, \"fast\");\n    } catch  {\n        return Jl(e1, \"slow\");\n    }\n}\nfunction Jl(e1, t1) {\n    return JSON.stringify(e1.map((r1)=>bg(r1, t1)));\n}\nfunction bg(e1, t1) {\n    return typeof e1 == \"bigint\" ? {\n        prisma__type: \"bigint\",\n        prisma__value: e1.toString()\n    } : Lt(e1) ? {\n        prisma__type: \"date\",\n        prisma__value: e1.toJSON()\n    } : Ne.isDecimal(e1) ? {\n        prisma__type: \"decimal\",\n        prisma__value: e1.toJSON()\n    } : Buffer.isBuffer(e1) ? {\n        prisma__type: \"bytes\",\n        prisma__value: e1.toString(\"base64\")\n    } : xg(e1) || ArrayBuffer.isView(e1) ? {\n        prisma__type: \"bytes\",\n        prisma__value: Buffer.from(e1).toString(\"base64\")\n    } : typeof e1 == \"object\" && t1 === \"slow\" ? Hl(e1) : e1;\n}\nfunction xg(e1) {\n    return e1 instanceof ArrayBuffer || e1 instanceof SharedArrayBuffer ? !0 : typeof e1 == \"object\" && e1 !== null ? e1[Symbol.toStringTag] === \"ArrayBuffer\" || e1[Symbol.toStringTag] === \"SharedArrayBuffer\" : !1;\n}\nfunction Hl(e1) {\n    if (typeof e1 != \"object\" || e1 === null) return e1;\n    if (typeof e1.toJSON == \"function\") return e1.toJSON();\n    if (Array.isArray(e1)) return e1.map(Gl);\n    let t1 = {};\n    for (let r1 of Object.keys(e1))t1[r1] = Gl(e1[r1]);\n    return t1;\n}\nfunction Gl(e1) {\n    return typeof e1 == \"bigint\" ? e1.toString() : Hl(e1);\n}\nvar wg = /^(\\s*alter\\s)/i, Wl = $(\"prisma:client\");\nfunction Oo(e1, t1, r1, n1) {\n    if (!(e1 !== \"postgresql\" && e1 !== \"cockroachdb\") && r1.length > 0 && wg.exec(t1)) throw new Error(`Running ALTER using ${n1} is not supported\nUsing the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.\n\nExample:\n  await prisma.$executeRawUnsafe(\\`ALTER USER prisma WITH PASSWORD '\\${password}'\\`)\n\nMore Information: https://pris.ly/d/execute-raw\n`);\n}\nvar Do = ({ clientMethod: e1, activeProvider: t1, driverAdapterProvider: r1 })=>(n1)=>{\n        r1 !== void 0 && (t1 = r1);\n        let i1 = \"\", o1;\n        if (Array.isArray(n1)) {\n            let [s1, ...a1] = n1;\n            i1 = s1, o1 = {\n                values: Vr(a1 || []),\n                __prismaRawParameters__: !0\n            };\n        } else switch(t1){\n            case \"sqlite\":\n            case \"mysql\":\n                {\n                    i1 = n1.sql, o1 = {\n                        values: Vr(n1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"cockroachdb\":\n            case \"postgresql\":\n            case \"postgres\":\n                {\n                    i1 = n1.text, o1 = {\n                        values: Vr(n1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            case \"sqlserver\":\n                {\n                    i1 = Ql(n1), o1 = {\n                        values: Vr(n1.values),\n                        __prismaRawParameters__: !0\n                    };\n                    break;\n                }\n            default:\n                throw new Error(`The ${t1} provider does not support ${e1}`);\n        }\n        return o1?.values ? Wl(`prisma.${e1}(${i1}, ${o1.values})`) : Wl(`prisma.${e1}(${i1})`), {\n            query: i1,\n            parameters: o1\n        };\n    }, zl = {\n    requestArgsToMiddlewareArgs (e1) {\n        return [\n            e1.strings,\n            ...e1.values\n        ];\n    },\n    middlewareArgsToRequestArgs (e1) {\n        let [t1, ...r1] = e1;\n        return new fe(t1, r1);\n    }\n}, Yl = {\n    requestArgsToMiddlewareArgs (e1) {\n        return [\n            e1\n        ];\n    },\n    middlewareArgsToRequestArgs (e1) {\n        return e1[0];\n    }\n};\nfunction No(e1) {\n    return function(r1) {\n        let n1, i1 = (o1 = e1)=>{\n            try {\n                return o1 === void 0 || o1?.kind === \"itx\" ? n1 ?? (n1 = Zl(r1(o1))) : Zl(r1(o1));\n            } catch (s1) {\n                return Promise.reject(s1);\n            }\n        };\n        return {\n            then (o1, s1) {\n                return i1().then(o1, s1);\n            },\n            catch (o1) {\n                return i1().catch(o1);\n            },\n            finally (o1) {\n                return i1().finally(o1);\n            },\n            requestTransaction (o1) {\n                let s1 = i1(o1);\n                return s1.requestTransaction ? s1.requestTransaction(o1) : s1;\n            },\n            [Symbol.toStringTag]: \"PrismaPromise\"\n        };\n    };\n}\nfunction Zl(e1) {\n    return typeof e1.then == \"function\" ? e1 : Promise.resolve(e1);\n}\nvar Xl = {\n    isEnabled () {\n        return !1;\n    },\n    getTraceParent () {\n        return \"00-10-10-00\";\n    },\n    async createEngineSpan () {},\n    getActiveContext () {},\n    runInChildSpan (e1, t1) {\n        return t1();\n    }\n}, Lo = class {\n    isEnabled() {\n        return this.getGlobalTracingHelper().isEnabled();\n    }\n    getTraceParent(t1) {\n        return this.getGlobalTracingHelper().getTraceParent(t1);\n    }\n    createEngineSpan(t1) {\n        return this.getGlobalTracingHelper().createEngineSpan(t1);\n    }\n    getActiveContext() {\n        return this.getGlobalTracingHelper().getActiveContext();\n    }\n    runInChildSpan(t1, r1) {\n        return this.getGlobalTracingHelper().runInChildSpan(t1, r1);\n    }\n    getGlobalTracingHelper() {\n        return globalThis.PRISMA_INSTRUMENTATION?.helper ?? Xl;\n    }\n};\nfunction eu(e1) {\n    return e1.includes(\"tracing\") ? new Lo : Xl;\n}\nfunction tu(e1, t1 = ()=>{}) {\n    let r1, n1 = new Promise((i1)=>r1 = i1);\n    return {\n        then (i1) {\n            return --e1 === 0 && r1(t1()), i1?.(n1);\n        }\n    };\n}\nfunction ru(e1) {\n    return typeof e1 == \"string\" ? e1 : e1.reduce((t1, r1)=>{\n        let n1 = typeof r1 == \"string\" ? r1 : r1.level;\n        return n1 === \"query\" ? t1 : t1 && (r1 === \"info\" || t1 === \"info\") ? \"info\" : n1;\n    }, void 0);\n}\nvar ri = class {\n    constructor(){\n        this._middlewares = [];\n    }\n    use(t1) {\n        this._middlewares.push(t1);\n    }\n    get(t1) {\n        return this._middlewares[t1];\n    }\n    has(t1) {\n        return !!this._middlewares[t1];\n    }\n    length() {\n        return this._middlewares.length;\n    }\n};\nvar iu = F(Vi());\nfunction ni(e1) {\n    return typeof e1.batchRequestIdx == \"number\";\n}\nfunction ii(e1) {\n    return e1 === null ? e1 : Array.isArray(e1) ? e1.map(ii) : typeof e1 == \"object\" ? Eg(e1) ? Pg(e1) : Ot(e1, ii) : e1;\n}\nfunction Eg(e1) {\n    return e1 !== null && typeof e1 == \"object\" && typeof e1.$type == \"string\";\n}\nfunction Pg({ $type: e1, value: t1 }) {\n    switch(e1){\n        case \"BigInt\":\n            return BigInt(t1);\n        case \"Bytes\":\n            return Buffer.from(t1, \"base64\");\n        case \"DateTime\":\n            return new Date(t1);\n        case \"Decimal\":\n            return new Ne(t1);\n        case \"Json\":\n            return JSON.parse(t1);\n        default:\n            yt(t1, \"Unknown tagged value\");\n    }\n}\nfunction nu(e1) {\n    if (e1.action !== \"findUnique\" && e1.action !== \"findUniqueOrThrow\") return;\n    let t1 = [];\n    return e1.modelName && t1.push(e1.modelName), e1.query.arguments && t1.push($o(e1.query.arguments)), t1.push($o(e1.query.selection)), t1.join(\"\");\n}\nfunction $o(e1) {\n    return `(${Object.keys(e1).sort().map((r1)=>{\n        let n1 = e1[r1];\n        return typeof n1 == \"object\" && n1 !== null ? `(${r1} ${$o(n1)})` : r1;\n    }).join(\" \")})`;\n}\nvar vg = {\n    aggregate: !1,\n    aggregateRaw: !1,\n    createMany: !0,\n    createOne: !0,\n    deleteMany: !0,\n    deleteOne: !0,\n    executeRaw: !0,\n    findFirst: !1,\n    findFirstOrThrow: !1,\n    findMany: !1,\n    findRaw: !1,\n    findUnique: !1,\n    findUniqueOrThrow: !1,\n    groupBy: !1,\n    queryRaw: !1,\n    runCommandRaw: !0,\n    updateMany: !0,\n    updateOne: !0,\n    upsertOne: !0\n};\nfunction qo(e1) {\n    return vg[e1];\n}\nvar oi = class {\n    constructor(t1){\n        this.options = t1;\n        this.tickActive = !1;\n        this.batches = {};\n    }\n    request(t1) {\n        let r1 = this.options.batchBy(t1);\n        return r1 ? (this.batches[r1] || (this.batches[r1] = [], this.tickActive || (this.tickActive = !0, process.nextTick(()=>{\n            this.dispatchBatches(), this.tickActive = !1;\n        }))), new Promise((n1, i1)=>{\n            this.batches[r1].push({\n                request: t1,\n                resolve: n1,\n                reject: i1\n            });\n        })) : this.options.singleLoader(t1);\n    }\n    dispatchBatches() {\n        for(let t1 in this.batches){\n            let r1 = this.batches[t1];\n            delete this.batches[t1], r1.length === 1 ? this.options.singleLoader(r1[0].request).then((n1)=>{\n                n1 instanceof Error ? r1[0].reject(n1) : r1[0].resolve(n1);\n            }).catch((n1)=>{\n                r1[0].reject(n1);\n            }) : (r1.sort((n1, i1)=>this.options.batchOrder(n1.request, i1.request)), this.options.batchLoader(r1.map((n1)=>n1.request)).then((n1)=>{\n                if (n1 instanceof Error) for(let i1 = 0; i1 < r1.length; i1++)r1[i1].reject(n1);\n                else for(let i1 = 0; i1 < r1.length; i1++){\n                    let o1 = n1[i1];\n                    o1 instanceof Error ? r1[i1].reject(o1) : r1[i1].resolve(o1);\n                }\n            }).catch((n1)=>{\n                for(let i1 = 0; i1 < r1.length; i1++)r1[i1].reject(n1);\n            }));\n        }\n    }\n    get [Symbol.toStringTag]() {\n        return \"DataLoader\";\n    }\n};\nvar Tg = $(\"prisma:client:request_handler\"), si = class {\n    constructor(t1, r1){\n        this.logEmitter = r1, this.client = t1, this.dataloader = new oi({\n            batchLoader: Ga(async ({ requests: n1, customDataProxyFetch: i1 })=>{\n                let { transaction: o1, otelParentCtx: s1 } = n1[0], a1 = n1.map((p1)=>p1.protocolQuery), l1 = this.client._tracingHelper.getTraceParent(s1), u1 = n1.some((p1)=>qo(p1.protocolQuery.action));\n                return (await this.client._engine.requestBatch(a1, {\n                    traceparent: l1,\n                    transaction: _g(o1),\n                    containsWrite: u1,\n                    customDataProxyFetch: i1\n                })).map((p1, d1)=>{\n                    if (p1 instanceof Error) return p1;\n                    try {\n                        return this.mapQueryEngineResult(n1[d1], p1);\n                    } catch (f1) {\n                        return f1;\n                    }\n                });\n            }),\n            singleLoader: async (n1)=>{\n                let i1 = n1.transaction?.kind === \"itx\" ? ou(n1.transaction) : void 0, o1 = await this.client._engine.request(n1.protocolQuery, {\n                    traceparent: this.client._tracingHelper.getTraceParent(),\n                    interactiveTransaction: i1,\n                    isWrite: qo(n1.protocolQuery.action),\n                    customDataProxyFetch: n1.customDataProxyFetch\n                });\n                return this.mapQueryEngineResult(n1, o1);\n            },\n            batchBy: (n1)=>n1.transaction?.id ? `transaction-${n1.transaction.id}` : nu(n1.protocolQuery),\n            batchOrder (n1, i1) {\n                return n1.transaction?.kind === \"batch\" && i1.transaction?.kind === \"batch\" ? n1.transaction.index - i1.transaction.index : 0;\n            }\n        });\n    }\n    async request(t1) {\n        try {\n            return await this.dataloader.request(t1);\n        } catch (r1) {\n            let { clientMethod: n1, callsite: i1, transaction: o1, args: s1, modelName: a1 } = t1;\n            this.handleAndLogRequestError({\n                error: r1,\n                clientMethod: n1,\n                callsite: i1,\n                transaction: o1,\n                args: s1,\n                modelName: a1\n            });\n        }\n    }\n    mapQueryEngineResult({ dataPath: t1, unpacker: r1 }, n1) {\n        let i1 = n1?.data, o1 = n1?.elapsed, s1 = this.unpack(i1, t1, r1);\n        return process.env.PRISMA_CLIENT_GET_TIME ? {\n            data: s1,\n            elapsed: o1\n        } : s1;\n    }\n    handleAndLogRequestError(t1) {\n        try {\n            this.handleRequestError(t1);\n        } catch (r1) {\n            throw this.logEmitter && this.logEmitter.emit(\"error\", {\n                message: r1.message,\n                target: t1.clientMethod,\n                timestamp: new Date\n            }), r1;\n        }\n    }\n    handleRequestError({ error: t1, clientMethod: r1, callsite: n1, transaction: i1, args: o1, modelName: s1 }) {\n        if (Tg(t1), Cg(t1, i1) || t1 instanceof Ve) throw t1;\n        if (t1 instanceof H && Ag(t1)) {\n            let l1 = su(t1.meta);\n            ti({\n                args: o1,\n                errors: [\n                    l1\n                ],\n                callsite: n1,\n                errorFormat: this.client._errorFormat,\n                originalMethod: r1,\n                clientVersion: this.client._clientVersion\n            });\n        }\n        let a1 = t1.message;\n        if (n1 && (a1 = Qt({\n            callsite: n1,\n            originalMethod: r1,\n            isPanic: t1.isPanic,\n            showColors: this.client._errorFormat === \"pretty\",\n            message: a1\n        })), a1 = this.sanitizeMessage(a1), t1.code) {\n            let l1 = s1 ? {\n                modelName: s1,\n                ...t1.meta\n            } : t1.meta;\n            throw new H(a1, {\n                code: t1.code,\n                clientVersion: this.client._clientVersion,\n                meta: l1,\n                batchRequestIdx: t1.batchRequestIdx\n            });\n        } else {\n            if (t1.isPanic) throw new be(a1, this.client._clientVersion);\n            if (t1 instanceof W) throw new W(a1, {\n                clientVersion: this.client._clientVersion,\n                batchRequestIdx: t1.batchRequestIdx\n            });\n            if (t1 instanceof k) throw new k(a1, this.client._clientVersion);\n            if (t1 instanceof be) throw new be(a1, this.client._clientVersion);\n        }\n        throw t1.clientVersion = this.client._clientVersion, t1;\n    }\n    sanitizeMessage(t1) {\n        return this.client._errorFormat && this.client._errorFormat !== \"pretty\" ? (0, iu.default)(t1) : t1;\n    }\n    unpack(t1, r1, n1) {\n        if (!t1 || (t1.data && (t1 = t1.data), !t1)) return t1;\n        let i1 = Object.values(t1)[0], o1 = r1.filter((a1)=>a1 !== \"select\" && a1 !== \"include\"), s1 = ii(uo(i1, o1));\n        return n1 ? n1(s1) : s1;\n    }\n    get [Symbol.toStringTag]() {\n        return \"RequestHandler\";\n    }\n};\nfunction _g(e1) {\n    if (e1) {\n        if (e1.kind === \"batch\") return {\n            kind: \"batch\",\n            options: {\n                isolationLevel: e1.isolationLevel\n            }\n        };\n        if (e1.kind === \"itx\") return {\n            kind: \"itx\",\n            options: ou(e1)\n        };\n        yt(e1, \"Unknown transaction kind\");\n    }\n}\nfunction ou(e1) {\n    return {\n        id: e1.id,\n        payload: e1.payload\n    };\n}\nfunction Cg(e1, t1) {\n    return ni(e1) && t1?.kind === \"batch\" && e1.batchRequestIdx !== t1.index;\n}\nfunction Ag(e1) {\n    return e1.code === \"P2009\" || e1.code === \"P2012\";\n}\nfunction su(e1) {\n    if (e1.kind === \"Union\") return {\n        kind: \"Union\",\n        errors: e1.errors.map(su)\n    };\n    if (Array.isArray(e1.selectionPath)) {\n        let [, ...t1] = e1.selectionPath;\n        return {\n            ...e1,\n            selectionPath: t1\n        };\n    }\n    return e1;\n}\nvar au = \"5.8.0\";\nvar lu = au;\nfunction uu(e1) {\n    return e1.map((t1)=>{\n        let r1 = {};\n        for (let n1 of Object.keys(t1))r1[n1] = cu(t1[n1]);\n        return r1;\n    });\n}\nfunction cu({ prisma__type: e1, prisma__value: t1 }) {\n    switch(e1){\n        case \"bigint\":\n            return BigInt(t1);\n        case \"bytes\":\n            return Buffer.from(t1, \"base64\");\n        case \"decimal\":\n            return new Ne(t1);\n        case \"datetime\":\n        case \"date\":\n            return new Date(t1);\n        case \"time\":\n            return new Date(`1970-01-01T${t1}Z`);\n        case \"array\":\n            return t1.map(cu);\n        default:\n            return t1;\n    }\n}\nvar fu = F(Io());\nvar U = class extends Error {\n    constructor(t1){\n        super(t1 + `\nRead more at https://pris.ly/d/client-constructor`), this.name = \"PrismaClientConstructorValidationError\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"PrismaClientConstructorValidationError\";\n    }\n};\nv(U, \"PrismaClientConstructorValidationError\");\nvar pu = [\n    \"datasources\",\n    \"datasourceUrl\",\n    \"errorFormat\",\n    \"adapter\",\n    \"log\",\n    \"__internal\"\n], du = [\n    \"pretty\",\n    \"colorless\",\n    \"minimal\"\n], mu = [\n    \"info\",\n    \"query\",\n    \"warn\",\n    \"error\"\n], Mg = {\n    datasources: (e1, { datasourceNames: t1 })=>{\n        if (e1) {\n            if (typeof e1 != \"object\" || Array.isArray(e1)) throw new U(`Invalid value ${JSON.stringify(e1)} for \"datasources\" provided to PrismaClient constructor`);\n            for (let [r1, n1] of Object.entries(e1)){\n                if (!t1.includes(r1)) {\n                    let i1 = Yt(r1, t1) || ` Available datasources: ${t1.join(\", \")}`;\n                    throw new U(`Unknown datasource ${r1} provided to PrismaClient constructor.${i1}`);\n                }\n                if (typeof n1 != \"object\" || Array.isArray(n1)) throw new U(`Invalid value ${JSON.stringify(e1)} for datasource \"${r1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                if (n1 && typeof n1 == \"object\") for (let [i1, o1] of Object.entries(n1)){\n                    if (i1 !== \"url\") throw new U(`Invalid value ${JSON.stringify(e1)} for datasource \"${r1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                    if (typeof o1 != \"string\") throw new U(`Invalid value ${JSON.stringify(o1)} for datasource \"${r1}\" provided to PrismaClient constructor.\nIt should have this form: { url: \"CONNECTION_STRING\" }`);\n                }\n            }\n        }\n    },\n    adapter: (e1, t1)=>{\n        if (e1 === null) return;\n        if (e1 === void 0) throw new U('\"adapter\" property must not be undefined, use null to conditionally disable driver adapters.');\n        if (!zn(t1).includes(\"driverAdapters\")) throw new U('\"adapter\" property can only be provided to PrismaClient constructor when \"driverAdapters\" preview feature is enabled.');\n        if (gt() === \"binary\") throw new U('Cannot use a driver adapter with the \"binary\" Query Engine. Please use the \"library\" Query Engine.');\n    },\n    datasourceUrl: (e1)=>{\n        if (typeof e1 < \"u\" && typeof e1 != \"string\") throw new U(`Invalid value ${JSON.stringify(e1)} for \"datasourceUrl\" provided to PrismaClient constructor.\nExpected string or undefined.`);\n    },\n    errorFormat: (e1)=>{\n        if (e1) {\n            if (typeof e1 != \"string\") throw new U(`Invalid value ${JSON.stringify(e1)} for \"errorFormat\" provided to PrismaClient constructor.`);\n            if (!du.includes(e1)) {\n                let t1 = Yt(e1, du);\n                throw new U(`Invalid errorFormat ${e1} provided to PrismaClient constructor.${t1}`);\n            }\n        }\n    },\n    log: (e1)=>{\n        if (!e1) return;\n        if (!Array.isArray(e1)) throw new U(`Invalid value ${JSON.stringify(e1)} for \"log\" provided to PrismaClient constructor.`);\n        function t1(r1) {\n            if (typeof r1 == \"string\" && !mu.includes(r1)) {\n                let n1 = Yt(r1, mu);\n                throw new U(`Invalid log level \"${r1}\" provided to PrismaClient constructor.${n1}`);\n            }\n        }\n        for (let r1 of e1){\n            t1(r1);\n            let n1 = {\n                level: t1,\n                emit: (i1)=>{\n                    let o1 = [\n                        \"stdout\",\n                        \"event\"\n                    ];\n                    if (!o1.includes(i1)) {\n                        let s1 = Yt(i1, o1);\n                        throw new U(`Invalid value ${JSON.stringify(i1)} for \"emit\" in logLevel provided to PrismaClient constructor.${s1}`);\n                    }\n                }\n            };\n            if (r1 && typeof r1 == \"object\") for (let [i1, o1] of Object.entries(r1))if (n1[i1]) n1[i1](o1);\n            else throw new U(`Invalid property ${i1} for \"log\" provided to PrismaClient constructor`);\n        }\n    },\n    __internal: (e1)=>{\n        if (!e1) return;\n        let t1 = [\n            \"debug\",\n            \"hooks\",\n            \"engine\",\n            \"measurePerformance\"\n        ];\n        if (typeof e1 != \"object\") throw new U(`Invalid value ${JSON.stringify(e1)} for \"__internal\" to PrismaClient constructor`);\n        for (let [r1] of Object.entries(e1))if (!t1.includes(r1)) {\n            let n1 = Yt(r1, t1);\n            throw new U(`Invalid property ${JSON.stringify(r1)} for \"__internal\" provided to PrismaClient constructor.${n1}`);\n        }\n    }\n};\nfunction gu(e1, t1) {\n    for (let [r1, n1] of Object.entries(e1)){\n        if (!pu.includes(r1)) {\n            let i1 = Yt(r1, pu);\n            throw new U(`Unknown property ${r1} provided to PrismaClient constructor.${i1}`);\n        }\n        Mg[r1](n1, t1);\n    }\n    if (e1.datasourceUrl && e1.datasources) throw new U('Can not use \"datasourceUrl\" and \"datasources\" options at the same time. Pick one of them');\n}\nfunction Yt(e1, t1) {\n    if (t1.length === 0 || typeof e1 != \"string\") return \"\";\n    let r1 = Sg(e1, t1);\n    return r1 ? ` Did you mean \"${r1}\"?` : \"\";\n}\nfunction Sg(e1, t1) {\n    if (t1.length === 0) return null;\n    let r1 = t1.map((i1)=>({\n            value: i1,\n            distance: (0, fu.default)(e1, i1)\n        }));\n    r1.sort((i1, o1)=>i1.distance < o1.distance ? -1 : 1);\n    let n1 = r1[0];\n    return n1.distance < 3 ? n1.value : null;\n}\nfunction yu(e1) {\n    return e1.length === 0 ? Promise.resolve([]) : new Promise((t1, r1)=>{\n        let n1 = new Array(e1.length), i1 = null, o1 = !1, s1 = 0, a1 = ()=>{\n            o1 || (s1++, s1 === e1.length && (o1 = !0, i1 ? r1(i1) : t1(n1)));\n        }, l1 = (u1)=>{\n            o1 || (o1 = !0, r1(u1));\n        };\n        for(let u1 = 0; u1 < e1.length; u1++)e1[u1].then((c1)=>{\n            n1[u1] = c1, a1();\n        }, (c1)=>{\n            if (!ni(c1)) {\n                l1(c1);\n                return;\n            }\n            c1.batchRequestIdx === u1 ? l1(c1) : (i1 || (i1 = c1), a1());\n        });\n    });\n}\nvar lt = $(\"prisma:client\");\ntypeof globalThis == \"object\" && (globalThis.NODE_CLIENT = !0);\nvar Ig = {\n    requestArgsToMiddlewareArgs: (e1)=>e1,\n    middlewareArgsToRequestArgs: (e1)=>e1\n}, kg = Symbol.for(\"prisma.client.transaction.id\"), Fg = {\n    id: 0,\n    nextId () {\n        return ++this.id;\n    }\n};\nfunction Eu(e1) {\n    class t1 {\n        constructor(n1){\n            this._middlewares = new ri;\n            this._createPrismaPromise = No();\n            this.$extends = qa;\n            tl(e1), n1 && gu(n1, e1);\n            let i1 = n1?.adapter ? Yi(n1.adapter) : void 0, o1 = new xu.EventEmitter().on(\"error\", ()=>{});\n            this._extensions = Ln.empty(), this._previewFeatures = zn(e1), this._clientVersion = e1.clientVersion ?? lu, this._activeProvider = e1.activeProvider, this._tracingHelper = eu(this._previewFeatures);\n            let s1 = {\n                rootEnvPath: e1.relativeEnvPaths.rootEnvPath && Ur.default.resolve(e1.dirname, e1.relativeEnvPaths.rootEnvPath),\n                schemaEnvPath: e1.relativeEnvPaths.schemaEnvPath && Ur.default.resolve(e1.dirname, e1.relativeEnvPaths.schemaEnvPath)\n            }, a1 = !i1 && ir(s1, {\n                conflictCheck: \"none\"\n            }) || e1.injectableEdgeEnv?.();\n            try {\n                let l1 = n1 ?? {}, u1 = l1.__internal ?? {}, c1 = u1.debug === !0;\n                c1 && $.enable(\"prisma:client\");\n                let p1 = Ur.default.resolve(e1.dirname, e1.relativePath);\n                wu.default.existsSync(p1) || (p1 = e1.dirname), lt(\"dirname\", e1.dirname), lt(\"relativePath\", e1.relativePath), lt(\"cwd\", p1);\n                let d1 = u1.engine || {};\n                if (l1.errorFormat ? this._errorFormat = l1.errorFormat :  false ? 0 : process.env.NO_COLOR ? this._errorFormat = \"colorless\" : this._errorFormat = \"colorless\", this._runtimeDataModel = e1.runtimeDataModel, this._engineConfig = {\n                    cwd: p1,\n                    dirname: e1.dirname,\n                    enableDebugLogs: c1,\n                    allowTriggerPanic: d1.allowTriggerPanic,\n                    datamodelPath: Ur.default.join(e1.dirname, e1.filename ?? \"schema.prisma\"),\n                    prismaPath: d1.binaryPath ?? void 0,\n                    engineEndpoint: d1.endpoint,\n                    generator: e1.generator,\n                    showColors: this._errorFormat === \"pretty\",\n                    logLevel: l1.log && ru(l1.log),\n                    logQueries: l1.log && !!(typeof l1.log == \"string\" ? l1.log === \"query\" : l1.log.find((f1)=>typeof f1 == \"string\" ? f1 === \"query\" : f1.level === \"query\")),\n                    env: a1?.parsed ?? {},\n                    flags: [],\n                    getQueryEngineWasmModule: e1.getQueryEngineWasmModule,\n                    clientVersion: e1.clientVersion,\n                    engineVersion: e1.engineVersion,\n                    previewFeatures: this._previewFeatures,\n                    activeProvider: e1.activeProvider,\n                    inlineSchema: e1.inlineSchema,\n                    overrideDatasources: rl(l1, e1.datasourceNames),\n                    inlineDatasources: e1.inlineDatasources,\n                    inlineSchemaHash: e1.inlineSchemaHash,\n                    tracingHelper: this._tracingHelper,\n                    logEmitter: o1,\n                    isBundled: e1.isBundled,\n                    adapter: i1\n                }, lt(\"clientVersion\", e1.clientVersion), this._engine = Sl(e1, this._engineConfig), this._requestHandler = new si(this, o1), l1.log) for (let f1 of l1.log){\n                    let y1 = typeof f1 == \"string\" ? f1 : f1.emit === \"stdout\" ? f1.level : null;\n                    y1 && this.$on(y1, (g1)=>{\n                        ar.log(`${ar.tags[y1] ?? \"\"}`, g1.message || g1.query);\n                    });\n                }\n                this._metrics = new Dt(this._engine);\n            } catch (l1) {\n                throw l1.clientVersion = this._clientVersion, l1;\n            }\n            return this._appliedParent = Er(this);\n        }\n        get [Symbol.toStringTag]() {\n            return \"PrismaClient\";\n        }\n        $use(n1) {\n            this._middlewares.use(n1);\n        }\n        $on(n1, i1) {\n            n1 === \"beforeExit\" ? this._engine.onBeforeExit(i1) : n1 && this._engineConfig.logEmitter.on(n1, i1);\n        }\n        $connect() {\n            try {\n                return this._engine.start();\n            } catch (n1) {\n                throw n1.clientVersion = this._clientVersion, n1;\n            }\n        }\n        async $disconnect() {\n            try {\n                await this._engine.stop();\n            } catch (n1) {\n                throw n1.clientVersion = this._clientVersion, n1;\n            } finally{\n                ss();\n            }\n        }\n        $executeRawInternal(n1, i1, o1, s1) {\n            let a1 = this._activeProvider, l1 = this._engineConfig.adapter?.provider;\n            return this._request({\n                action: \"executeRaw\",\n                args: o1,\n                transaction: n1,\n                clientMethod: i1,\n                argsMapper: Do({\n                    clientMethod: i1,\n                    activeProvider: a1,\n                    driverAdapterProvider: l1\n                }),\n                callsite: it(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s1\n            });\n        }\n        $executeRaw(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>{\n                if (n1.raw !== void 0 || n1.sql !== void 0) {\n                    let [s1, a1] = hu(n1, i1);\n                    return Oo(this._activeProvider, s1.text, s1.values, Array.isArray(n1) ? \"prisma.$executeRaw`<SQL>`\" : \"prisma.$executeRaw(sql`<SQL>`)\"), this.$executeRawInternal(o1, \"$executeRaw\", s1, a1);\n                }\n                throw new se(\"`$executeRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $executeRawUnsafe(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>(Oo(this._activeProvider, n1, i1, \"prisma.$executeRawUnsafe(<SQL>, [...values])\"), this.$executeRawInternal(o1, \"$executeRawUnsafe\", [\n                    n1,\n                    ...i1\n                ])));\n        }\n        $runCommandRaw(n1) {\n            if (e1.activeProvider !== \"mongodb\") throw new se(`The ${e1.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`, {\n                clientVersion: this._clientVersion\n            });\n            return this._createPrismaPromise((i1)=>this._request({\n                    args: n1,\n                    clientMethod: \"$runCommandRaw\",\n                    dataPath: [],\n                    action: \"runCommandRaw\",\n                    argsMapper: Kl,\n                    callsite: it(this._errorFormat),\n                    transaction: i1\n                }));\n        }\n        async $queryRawInternal(n1, i1, o1, s1) {\n            let a1 = this._activeProvider, l1 = this._engineConfig.adapter?.provider;\n            return this._request({\n                action: \"queryRaw\",\n                args: o1,\n                transaction: n1,\n                clientMethod: i1,\n                argsMapper: Do({\n                    clientMethod: i1,\n                    activeProvider: a1,\n                    driverAdapterProvider: l1\n                }),\n                callsite: it(this._errorFormat),\n                dataPath: [],\n                middlewareArgsMapper: s1\n            }).then(uu);\n        }\n        $queryRaw(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>{\n                if (n1.raw !== void 0 || n1.sql !== void 0) return this.$queryRawInternal(o1, \"$queryRaw\", ...hu(n1, i1));\n                throw new se(\"`$queryRaw` is a tag function, please use it like the following:\\n```\\nconst result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`\\n```\\n\\nOr read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw\\n\", {\n                    clientVersion: this._clientVersion\n                });\n            });\n        }\n        $queryRawUnsafe(n1, ...i1) {\n            return this._createPrismaPromise((o1)=>this.$queryRawInternal(o1, \"$queryRawUnsafe\", [\n                    n1,\n                    ...i1\n                ]));\n        }\n        _transactionWithArray({ promises: n1, options: i1 }) {\n            let o1 = Fg.nextId(), s1 = tu(n1.length), a1 = n1.map((l1, u1)=>{\n                if (l1?.[Symbol.toStringTag] !== \"PrismaPromise\") throw new Error(\"All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.\");\n                let c1 = i1?.isolationLevel, p1 = {\n                    kind: \"batch\",\n                    id: o1,\n                    index: u1,\n                    isolationLevel: c1,\n                    lock: s1\n                };\n                return l1.requestTransaction?.(p1) ?? l1;\n            });\n            return yu(a1);\n        }\n        async _transactionWithCallback({ callback: n1, options: i1 }) {\n            let o1 = {\n                traceparent: this._tracingHelper.getTraceParent()\n            }, s1 = await this._engine.transaction(\"start\", o1, i1), a1;\n            try {\n                let l1 = {\n                    kind: \"itx\",\n                    ...s1\n                };\n                a1 = await n1(this._createItxClient(l1)), await this._engine.transaction(\"commit\", o1, s1);\n            } catch (l1) {\n                throw await this._engine.transaction(\"rollback\", o1, s1).catch(()=>{}), l1;\n            }\n            return a1;\n        }\n        _createItxClient(n1) {\n            return Er(Oe(On(this), [\n                ce(\"_appliedParent\", ()=>this._appliedParent._createItxClient(n1)),\n                ce(\"_createPrismaPromise\", ()=>No(n1)),\n                ce(kg, ()=>n1.id),\n                hr(Gi)\n            ]));\n        }\n        $transaction(n1, i1) {\n            let o1;\n            typeof n1 == \"function\" ? o1 = ()=>this._transactionWithCallback({\n                    callback: n1,\n                    options: i1\n                }) : o1 = ()=>this._transactionWithArray({\n                    promises: n1,\n                    options: i1\n                });\n            let s1 = {\n                name: \"transaction\",\n                attributes: {\n                    method: \"$transaction\"\n                }\n            };\n            return this._tracingHelper.runInChildSpan(s1, o1);\n        }\n        _request(n1) {\n            n1.otelParentCtx = this._tracingHelper.getActiveContext();\n            let i1 = n1.middlewareArgsMapper ?? Ig, o1 = {\n                args: i1.requestArgsToMiddlewareArgs(n1.args),\n                dataPath: n1.dataPath,\n                runInTransaction: !!n1.transaction,\n                action: n1.action,\n                model: n1.model\n            }, s1 = {\n                middleware: {\n                    name: \"middleware\",\n                    middleware: !0,\n                    attributes: {\n                        method: \"$use\"\n                    },\n                    active: !1\n                },\n                operation: {\n                    name: \"operation\",\n                    attributes: {\n                        method: o1.action,\n                        model: o1.model,\n                        name: o1.model ? `${o1.model}.${o1.action}` : o1.action\n                    }\n                }\n            }, a1 = -1, l1 = async (u1)=>{\n                let c1 = this._middlewares.get(++a1);\n                if (c1) return this._tracingHelper.runInChildSpan(s1.middleware, (_1)=>c1(u1, (A1)=>(_1?.end(), l1(A1))));\n                let { runInTransaction: p1, args: d1, ...f1 } = u1, y1 = {\n                    ...n1,\n                    ...f1\n                };\n                d1 && (y1.args = i1.middlewareArgsToRequestArgs(d1)), n1.transaction !== void 0 && p1 === !1 && delete y1.transaction;\n                let g1 = await Ja(this, y1);\n                return y1.model ? Va({\n                    result: g1,\n                    modelName: y1.model,\n                    args: y1.args,\n                    extensions: this._extensions,\n                    runtimeDataModel: this._runtimeDataModel\n                }) : g1;\n            };\n            return this._tracingHelper.runInChildSpan(s1.operation, ()=>new bu.AsyncResource(\"prisma-client-request\").runInAsyncScope(()=>l1(o1)));\n        }\n        async _executeRequest({ args: n1, clientMethod: i1, dataPath: o1, callsite: s1, action: a1, model: l1, argsMapper: u1, transaction: c1, unpacker: p1, otelParentCtx: d1, customDataProxyFetch: f1 }) {\n            try {\n                n1 = u1 ? u1(n1) : n1;\n                let y1 = {\n                    name: \"serialize\"\n                }, g1 = this._tracingHelper.runInChildSpan(y1, ()=>jl({\n                        modelName: l1,\n                        runtimeDataModel: this._runtimeDataModel,\n                        action: a1,\n                        args: n1,\n                        clientMethod: i1,\n                        callsite: s1,\n                        extensions: this._extensions,\n                        errorFormat: this._errorFormat,\n                        clientVersion: this._clientVersion\n                    }));\n                return $.enabled(\"prisma:client\") && (lt(\"Prisma Client call:\"), lt(`prisma.${i1}(${Ea(n1)})`), lt(\"Generated request:\"), lt(JSON.stringify(g1, null, 2) + `\n`)), c1?.kind === \"batch\" && await c1.lock, this._requestHandler.request({\n                    protocolQuery: g1,\n                    modelName: l1,\n                    action: a1,\n                    clientMethod: i1,\n                    dataPath: o1,\n                    callsite: s1,\n                    args: n1,\n                    extensions: this._extensions,\n                    transaction: c1,\n                    unpacker: p1,\n                    otelParentCtx: d1,\n                    otelChildCtx: this._tracingHelper.getActiveContext(),\n                    customDataProxyFetch: f1\n                });\n            } catch (y1) {\n                throw y1.clientVersion = this._clientVersion, y1;\n            }\n        }\n        get $metrics() {\n            if (!this._hasPreviewFlag(\"metrics\")) throw new se(\"`metrics` preview feature must be enabled in order to access metrics API\", {\n                clientVersion: this._clientVersion\n            });\n            return this._metrics;\n        }\n        _hasPreviewFlag(n1) {\n            return !!this._engineConfig.previewFeatures?.includes(n1);\n        }\n    }\n    return t1;\n}\nfunction hu(e1, t1) {\n    return Og(e1) ? [\n        new fe(e1, t1),\n        zl\n    ] : [\n        e1,\n        Yl\n    ];\n}\nfunction Og(e1) {\n    return Array.isArray(e1) && Array.isArray(e1.raw);\n}\nvar Dg = new Set([\n    \"toJSON\",\n    \"$$typeof\",\n    \"asymmetricMatch\",\n    Symbol.iterator,\n    Symbol.toStringTag,\n    Symbol.isConcatSpreadable,\n    Symbol.toPrimitive\n]);\nfunction Pu(e1) {\n    return new Proxy(e1, {\n        get (t1, r1) {\n            if (r1 in t1) return t1[r1];\n            if (!Dg.has(r1)) throw new TypeError(`Invalid enum value: ${String(r1)}`);\n        }\n    });\n}\nfunction vu(e1) {\n    ir(e1, {\n        conflictCheck: \"warn\"\n    });\n}\n0 && (0); /*! Bundled license information:\n\ndecimal.js/decimal.mjs:\n  (*!\n   *  decimal.js v10.4.3\n   *  An arbitrary-precision Decimal type for JavaScript.\n   *  https://github.com/MikeMcl/decimal.js\n   *  Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\n   *  MIT Licence\n   *)\n*/  //# sourceMappingURL=library.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@prisma/client/runtime/library.js\n");

/***/ })

};
;